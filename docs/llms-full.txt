# Talking about disability and needs

URL: https://design.sis.gov.uk/accessibility/introduction/discussing
Subtitle: How to talk about disability and needs.


## Discussing user needs

If done in the right way, having a discussion upfront about people's needs can be very valuable.

Being proactive, in a positive manner, will build up a good relationship with your users and ensure you're delivering the best experience possible.

It can be hard to know who your users are. It's important not to disregard accessibility because you 'can't find anyone with accessibility needs'.

Only test your apps with real users [when you've completed your own accessibility testing](/accessibility/testing#testing-with-real-people). This means you don't waste people's time, and you can get more valuable usability insights.

## Disclosure

Disclosing a disability or impairment is an individual decision, and there is no obligation for anybody to do so. The point at which an individual discloses a disability or impairment (if at all) varies from case to case.

There are many reasons why someone may or may not choose to disclose. Reasons for non-disclosure include a fear that it will disadvantage them if disclosed. Some may have a disability or impairment they have not yet discovered and so wouldn't know there was a need for disclosure.

There are also many reasons why disclosing a disability is a positive action that will empower, protect and assist someone in the workplace.

Awareness of someone's needs may mean that provision can be made for reasonable adjustments. The person and their colleagues may feel more comfortable to have open conversations about their requirements. This can lead to the person facing fewer barriers to employment and training opportunities.

Discussing someone's needs should be handled sensitively and on a one-to-one basis.

---

# Accessibility

URL: https://design.sis.gov.uk/accessibility
Subtitle: This section introduces accessibility and how to design, build and test for accessible apps and services.


## Our work on accessibility

MI6, MI5, GCHQ and our partners work to provide accessible, inclusive and equitable experiences for everyone who uses our apps and services.

This means making sure that what we build, buy or use empowers our teams.

We want our teams to consistently and effectively contribute to our mission, regardless of any impairments or accessibility needs they might have.

## Get started

If you create or manage apps or services for MI6, MI5, GCHQ and our partners, you have a responsibility to make sure they are inclusive and accessible.

To understand more about how we make our stuff accessible, read:

- [Why accessibility is important](/accessibility/introduction) and how it can affect our teams.
- [What our teams must do](/accessibility/requirement) to comply with our Policy and other public sector legislation.
- The types of [disabilities, impairments and neurological diversity](/accessibility/needs) to consider when creating apps and services.
- How to [code your apps and services](/accessibility/coding) so that they're accessible.
- How and when to [test how accessible](/accessibility/testing) your apps and services are.
- How and when to [document how accessible](/accessibility/documenting) your apps and services are.

## Getting help

For internal teams, support is available from your local accessibility experts.

They can help you understand how to properly design, build and test your apps and services. Search your intranet to get in touch with them.

## Feedback

<p>
  The Design System aims to introduce disability, impairments and difference in
  an inclusive and accurate way. Please{" "}
  <ic-link
    target="_blank"
    href="https://github.com/mi6/ic-design-system/issues"
    rel="noreferer noopener nofollow"
  >
    check for an existing issue or let us know
  </ic-link>{" "}
  if you can help us improve our language.
</p>

---

# Alt text

URL: https://design.sis.gov.uk/accessibility/coding/alt-text
Subtitle: Follow our accessibility tips for alt text.


## Introduction

Use alt text on images. The `alt` attribute provides alternative text to users who can't see the image.

Alt text should concisely convey the meaning of the image within the context of the page.

If the image is only decorative or not needed because it will be repeated in adjacent text, include an empty `alt` attribute, `alt=""`.

```html
<img src="logo.jpg" alt="Design System logo" />
```

Using alt text benefits:

- Those who rely on screen readers as it will read the alt text.
- Those who have a slow connection; the alt text will be displayed in place of an image when it can't be loaded.

The `alt` attribute can be used on `area`, `img` and `input` elements.

## When it goes wrong

A screen reader will announce the presence of the image along with any `alt` text.

If there is no `alt` attribute, the screen reader only announces the presence of the image, although some screen readers may try to add context by reading the file name.

A screen reader will not announce images with an empty `alt` attribute.

## Alternative images

Alternatives to the `<img>` element are Scalable Vector Graphics (SVG) markup and the `<canvas>` element. They are often used for interactive images.

Favour SVG over `<canvas>` because the `<canvas>` element is not accessible to assistive technologies. It's not rendered in the DOM and doesn't have internal accessibility semantics like SVG.

SVG is also scalable for those who need magnification.

---

# Accessibility Statement guidance

URL: https://design.sis.gov.uk/accessibility/documenting/accessibility-statements-guidance
Subtitle: How to fill out and maintain an Accessibility Statement.


import { IcAlert } from "@ukic/react";

## How to fill in an Accessibility Statement

This page tells you how to fill in an [Accessibility Statement](/accessibility/documenting/accessibility-statements) if you work for MI6, MI5, GCHQ or one of our partners. [Templates are available](/accessibility/documenting/accessibility-statements#the-template).

The numbered headings correspond to the sections you will find within the Accessibility Statement.

<p>
  It's based on the{" "}
  <ic-link
    target="_blank"
    href="https://www.gov.uk/government/publications/sample-accessibility-statement/sample-accessibility-statement-for-a-fictional-public-sector-website"
    rel="noreferer noopener nofollow"
  >
    sample accessibility statement
  </ic-link>{" "}
  published by the Government Digital Service (GDS).
</p>

Most of it is legally required and needs to be published to comply with the organisation's accessibility requirements. Don't change the order of sections or wording unless this guidance tells you to.

Don't use the statement to justify why an app is inaccessible, other than in the "Disproportionate Burden" section.

You can also [download this guidance (DOCX)](/accessibility-statement-guidance.docx).

### Where to publish

The [when to create and update](/accessibility/documenting/when-to-create-and-update) page explains where to publish the completed Accessibility Statement.

### How to use the template

You may need to make minor changes, such as changing between singular and plural or 'app to service', but don't re-order, change titles or remove anything unless this guidance tells you to.

Keep the language simple. This statement needs to be understandable for everyone in the department, it shouldn't be technical.

Update everything in square brackets (between '[' and ']') &ndash; remove the square brackets.

It has examples and sample wording and guidance. Remove anything marked as 'EXAMPLE'.

## 1. Overview

This section is used to highlight how accessible the app is. The bullet points are one example of what you could write and aren't a checklist but will be true when the app is fully compliant the Web Content Accessibility Guidelines (WCAG) Level A and AA criteria.

<IcAlert
  message="Please update the example bullet points to match your app. If you leave the current examples, the information might be incorrect.
"
  variant="info"
/>

If the app doesn't have user guides, remove that statement.

Keep this section up to date as you make changes to your app.

If the app is fully or partly made up of third-party software, note this here. Reference the conformance level that the vendor provides. If the vendor doesn't provide accessibility documentation, request it from them.

## 2. How accessible this app is

<IcAlert
  message="Delete the examples in the template before publishing"
  variant="info"
/>

This section is used to summarise any accessibility problems in the app. Document workarounds to inaccessible content or features.
Consider a user of the app and think about what issues they would want to know about.

Provide full detail of the accessibility problem later under 'non-accessible content'.

If the app is compliant and there's no accessibility problems, include the sentence:
_“We're confident that this app is accessible.”_

## 3. What to do if you can't access parts of this app

This section is used to explain alternatives and workarounds for accessibility problems that you are aware of.

It's not possible to predict all possible needs someone might have when using your app. The app must have a process to deal with these requests even if the app is compliant to the relevant standard.

**Don't** use this section to justify why something is not accessible.

If the app is corporately supported, it's likely that accessibility adjustments would be requested through a Service Desk. If the app is not corporately supported, the development team must be able to deal with these requests.

## 4. Reporting accessibility problems with this app

Don't remove this section. You always need to provide a way for users to report a problem with your app, even if it's public facing.

If this is a commercial app or part of it relies on a third-party vendor, be clear how this might impact the time it takes to fix accessibility problems.

## 5. Enforcement procedure

This section is used to make clear how the accessibility of the app can be challenged.

Remove the second paragraph if the statement will be published publicly online.

## 6. Contacting us

This section is used to explain how people can contact the team that looks after the app. Change this section depending on your app and team.

Only reference the Service Desk if you've agreed that support route.

Where possible, the contact details you provide should point to a team or a group. This avoids a single point of failure if your point of contact were to leave their role.

## 7. Technical information about this app's accessibility

This section is used to make a formal statement about how accessible the app is.

The form of words here are legally required, so **don't change it** except for adding in the name of Department.

### 7(a). Compliance Status

There's a legally required way of expressing the compliance status of your app, so don't change any words. Delete the statements that don't apply.

- If the app meets **all** Level A and Level AA success criteria of WCAG Level 2.2 then it's 'fully compliant'.
- If the app meets **more than half** of the Level A and Level AA success criteria of WCAG Level 2.2 then it's 'partially compliant'.
- If the app meets **less than half** of the Level A and Level AA success criteria of WCAG Level 2.2 then it's 'not compliant'.

## 8. Non-accessible content

This section is used to fully explain accessibility problems in the app.

If no section applies, you can delete this section. This section must be added later if accessibility problems are found because overall compliance will have changed.

**Don't change or remove** the headings in this section. You can add subheadings to better format the lists of problems if needed.

### 8(a). Non-compliance with the accessibility regulations

<IcAlert
  message="Delete the example in the template before publishing"
  variant="info"
/>

This section is used to list accessibility problems in your apps that need to be fixed.

For each accessibility problem, list:

- A description of the accessibility problem.
- The WCAG 2.2 success criteria that are partially or not supported because of the accessibility problem.
- When the problem will be fixed. You must fix accessibility problems **within a defined timeframe.**

Don't mention problems covered by a Disproportionate Burden or Regulation exemption.

If there are no accessibility problems, include the following sentence, amending as appropriate:
_“There are no non-compliances with the accessibility regulations other than those in “Disproportionate burden"/"Content that's not within the scope of the accessibility regulations""_

### 8(b). Disproportionate burden

<IcAlert
  message="Delete the example in the template before publishing"
  variant="info"
/>

This section is used if the app has an approved disproportionate burden assessment. Disproportionate burden assessments must always be approved by local accessibility owners.

A disproportionate burden is a claim made when the Department can't reasonably fix or make the app accessible.

If the app does not need a disproportionate burden assessment, include the sentence:
_“We're not claiming a disproportionate burden to making any part of [app name] compliant to the accessibility regulations.”_

### 8(c). Content that's not within the scope of the accessibility regulations

<IcAlert
  message="Delete the example in the template before publishing"
  variant="info"
/>

This section is used to list which parts of the app will not be made accessible because they're explicitly excluded in the Regulations. Refer to the Department's accessibility requirements for what is explicitly excluded.

If the app does not have content that's not within the scope of the accessibility regulations, include the sentence:
_“There is no content in the app that is outside the scope of the accessibility regulations.”_

## 9. How we tested this app

This section is used to explain how the app was tested against the relevant standard (WCAG).
This includes which version(s) of the app were tested, where they are hosted and how pages were chosen for testing.

If relevant, include information from third-party auditors and reports that they have provided.

There is no requirement to test an app with a specific approach, but a combination of [manual and automatic techniques](/accessibility/testing) is recommended.

## 10. What we're doing to improve accessibility

This section is used to explain how you will make sure that the app remains accessible through its lifecycle. Linking to a product or accessibility roadmap is optional, but it will help users understand what improvements will be made in future.

Where the app has existing accessibility problems, explain the timeframe in which the problems will be fixed.

## 11. Preparation of this Accessibility Statement

This section is used to say when the latest accessibility testing was done, when this statement was updated and to link to relevant reports.

The wording in the first sentence about when the statement was prepared is legally required. **Don't change it.**

Include multiple Accessibility Conformance Reports if appropriate. The reports must match the latest app and this Accessibility Statement.

Instances where multiple Accessibility Conformance Reports should be referenced:

- The app consists of multiple interacting user interfaces.
- The app is based on third party software that has been configured. Provide the vendor's Accessibility Conformance Report (VPAT/ACR) and then a supplementary report that covers any user interface changes caused by your configuration or customisation of the app.

---

# Accessibility Statements

URL: https://design.sis.gov.uk/accessibility/documenting/accessibility-statements
Subtitle: Accessibility Statements are simple but important documents that are useful to everyone.


## Introduction

All apps and services must publish an Accessibility Statement to comply with the Intelligence Community [Digital Accessibility Policy](/accessibility/requirement).

An Accessibility Statement is a clear overview of the accessibility compliance status and contact details for the team that looks after the app or service.

[Read the IC Design System's Accessibility Statement](/icds).

The statement includes how accessible an app or service is, known problems, who is responsible and how the product was tested.

The statement will evolve as the app or service changes. As accessibility problems are found and fixed, and new features are added, the statement must reflect the [Accessibility Conformance Report](/accessibility/documenting/conformance-report) and all testing results.

The statement must also link to your Accessibility Conformance Report if one is required.

## The template

To make the statement useful for everyone, follow the template and don't change the layout. Keep the existing language where applicable, write in plain language and avoid technical jargon.

<ul>
  <li>
    <ic-link
      target=""
      href="/accessibility/documenting/accessibility-statements-guidance"
      rel="noreferer noopener nofollow"
    >
      Guidance for completing accessibility statements
    </ic-link>
  </li>
  <li>
    <ic-link
      target=""
      href="/accessibility-statement-template.docx"
      rel="noreferer noopener nofollow"
    >
      Blank accessibility statement (DOCX)
    </ic-link>
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://github.com/mi6/ic-design-system/tree/main/static/accessibility-statement-html-blank.html"
      rel="noreferer noopener nofollow"
    >
      Blank accessibility statement (HTML)
    </ic-link>
  </li>
</ul>

---

# Accessibility Conformance Report

URL: https://design.sis.gov.uk/accessibility/documenting/conformance-report
Subtitle: An Accessibility Conformance Report is used for accurate and consistent reporting of accessibility status in apps and services.


## Introduction

All apps and services must publish and maintain an Accessibility Conformance Report that states current compliance in order to comply with the Intelligence Community [Digital Accessibility Policy](/accessibility/requirement).

An Accessibility Conformance Report is used for accurate and consistent reporting of accessibility status in apps and services.

[Download the IC Design System's Accessibility Conformance Report](/icds-accessibility-conformance-report-17-01-24.docx).

The standard Report checks that an app or service meets each applicable [WCAG](/accessibility/requirement/wcag) success criteria.

Use the full range of [accessibility testing](/accessibility/testing) methods to make sure your app or service is accessible to everyone. Just filling in a Report as a checklist won't give a full picture of how accessible (to WCAG) your app or service is.

If an accessibility problem is found in the app or service that doesn't fit into the Report, it must be recorded in the Accessibility Statement.

## Update as you go

Update the Report during the lifecycle of the app or service.

Automated and manual accessibility testing is needed to fill in the Reports. Whenever new features are added, tested and problems are found, they need to be reflected in the Report.

## Which report template to use

<p>
  A common checklist for testing and reporting is the{" "}
  <ic-link
    target="_blank"
    href="https://www.itic.org/policy/accessibility/vpat"
    rel="noreferer noopener nofollow"
  >
    Voluntary Product Accessibility Template® (VPAT®)
  </ic-link>
  . When filled in, the VPAT® becomes the app or service's Accessibility Conformance
  Report.
</p>

Use the correct VPAT® depending on the type of app or service:

- Use the [WCAG (VPAT®) template](/VPAT2.5WCAG-November2023.doc) for apps and services with a user interface (browser-based or otherwise).

<p>
  If the report is for a non-web based product you may want to look at the
  W3.org{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/TR/wcag2ict-22/"
    rel="noreferer noopener nofollow"
  >
    Guidance on Applying WCAG 2 to Non-Web Information and Communications
    Technologies (WCAG2ICT)
  </ic-link>
</p>

If a Report is produced or available from auditors or vendors, use their reports even if it's not called a 'VPAT®'. If configuration/customisation has been applied to the vendor's software, then a supplementary Report must be provided that covers any user experience changes caused by this modification.

If the app or service is modified from the original version&mdash;or does not fully represent conformance to the requirements&mdash;an updated Report version must be produced. Accessibility Conformance Reports must match the latest Accessibility Statement and app version.

All reports need to explain conformance to all WCAG success criteria or explain why it's not applicable.

## How to fill in the report

To make the Report useful for everyone:

- Update the Report as you do [manual](/accessibility/testing/manual-testing) and [automated accessibility testing](/accessibility/testing/automated-testing).
- Write in plain English and avoid technical jargon so that everyone can understand it.
- Ensure there is a Conformance Level and supporting comment in 'Remarks and Explanations' for each success criteria, even if it's 'not applicable'.
- For any 'Supports' and 'Partially Supports' levels, explain why the app or service meets that specific success criteria.
- For any 'Not Applicable' levels, explain why they aren't applicable to that specific success criteria.

---

# Documenting accessibility

URL: https://design.sis.gov.uk/accessibility/documenting
Subtitle: This section tells you how to document how accessible your app or service is.


## Introduction

As well as thorough [accessibility testing](/accessibility/testing), comprehensive documentation is needed for an app or service to comply with the Intelligence Community [Digital Accessibility Policy](/accessibility/requirement).

All apps and services are required to regularly and transparently publish up-to-date versions of their documentation.

Documentation must be published internally to all potential users. For our external apps and services, documentation must be published publicly.

We use [Accessibility Statements](/accessibility/documenting/accessibility-statements) and [Accessibility Conformance Reports](/accessibility/documenting/conformance-report) to document how accessible our apps and services are.

## Accessibility Statement

An Accessibility Statement is a clear overview of the accessibility compliance status and contact details for the team that looks after the app or service.

The statement includes how accessible an app or service is, known problems, who is responsible and how the product was tested.

The statement needs to explain known accessibility issues, how people can work around the issues and when you plan to fix them.

## Accessibility Conformance Report

An Accessibility Conformance Report is used for accurate and consistent reporting of accessibility status in apps and services.

This report checks that an app or service meets each applicable [WCAG](/accessibility/requirement/wcag) success criteria.

---

# When to create and update

URL: https://design.sis.gov.uk/accessibility/documenting/when-to-create-and-update
Subtitle: Keep your documentation current and transparent.


## Introduction

All documentation needs to be kept up to date and represent the version of the app or service that users have, or will have, access to.

## When to create

Create the [Accessibility Statement](/accessibility/documenting/accessibility-statements) and [Accessibility Conformance Report](/accessibility/documenting/conformance-report) as early as possible. It's best to create them at the start of the project (or development).

An Accessibility Statement must always be available to users, even in a pilot or minimum viable product (MVP).

## When to update

Update the documentation during the lifecycle of the app or service. Whenever new features are added, tested and problems are found, they need to be reflected in the documentation.

Publish the documentation when it changes. The documentation must be reviewed at least every 12 months even if the app or service has not changed.

## Where to publish

Publish the Accessibility Statement for apps and services in the following places:

- As an accessible page, preferably available in the footer or navigation.
- In any substantive corporate records for each department where the app or service is available.

Departments may also require statements to be published on their Intranet.

The statement must reflect and link to the latest Accessibility Conformance Report.

---

# Digital Accessibility Policy

URL: https://design.sis.gov.uk/accessibility/requirement
Status: LIVE
Subtitle: This section gives you an overview on how to meet our Digital Accessibility Policy.


## Introduction to the Policy

All digital products that the UK Intelligence Community builds, buys or uses must meet the Intelligence Community's Digital Accessibility Policy. This includes mobile-, browser- and desktop-based software, interfaces attached to physical hardware and operating systems.

A digital product will meet our policy if it:

- Fully conforms to the relevant standard; [WCAG 2.2 Level AA](/accessibility/requirement/wcag).
- Publishes and links to an [Accessibility Statement](/accessibility/documenting/accessibility-statements). It's updated whenever the conformance of the Digital Product changes, when accessibility problems are raised, or at least once every 12-months.
- Publishes and links to an [Accessibility Conformance Report](/accessibility/documenting/conformance-report) documenting full, partial or non-conformance to the relevant WCAG. It's updated whenever accessibility problems are raised, or when the user interface is changed.

The requirement applies differently to [older apps and services](/accessibility/requirement/meeting-the-policy) depending on when they were last modified.

You can't claim an exception to the Policy solely due to lack of time, knowledge or because accessibility wasn't prioritised.

## How accessible is accessible enough?

Associated legislation provides the minimum expectation, but the Policy and Design System support teams in creating inclusive experiences above these minimum standards.

However, it's not possible to guarantee an app or service is fully accessible to every possible user in every use case. There is no such thing as 'always 100% accessible'.

Apps and services will encounter accessibility problems during their lifecycle.

Teams must transparently document non-conformance and known accessibility problems in their Accessibility Statements and Accessibility Conformance Reports. You must always include the date when you plan to fix the problem.

## Policy and legislation

If you work for MI6, MI5 or GCHQ, search your intranet to learn more about our specific Policy Requirements.

Unfortunately we can't currently publish the Policy online.

The guidance in the Design System is the source of truth for developing accessible apps and services, but it's not the Policy. The Design System was developed closely alongside the Policy.

<p>
  The Policy makes sure the Intelligence Community departments exceeds its
  obligations set out in the{" "}
  <ic-link
    target="_blank"
    href="https://www.legislation.gov.uk/uksi/2018/852/contents/made"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    The Public Sector Bodies (Websites and Mobile Applications) Accessibility
    Regulations 2018
  </ic-link>{" "}
  . This legislation builds on existing obligations to people who have a
  disability under the{" "}
  <ic-link
    target="_blank"
    href="https://www.legislation.gov.uk/ukpga/2010/15/contents"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Equality Act 2010
  </ic-link>{" "}
  (or the{" "}
  <ic-link
    target="_blank"
    href="https://www.legislation.gov.uk/ukpga/1995/50/contents"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Disability Discrimination Act 1995
  </ic-link>{" "}
  in Northern Ireland).
</p>

---

# Meeting the Policy

URL: https://design.sis.gov.uk/accessibility/requirement/meeting-the-policy
Status: LIVE
Subtitle: This section is a summary of the Policy. Refer to the full document for full details.


## Scope

All digital apps and services must follow at least some of these requirements. The type and age of the app or service changes what you need to do.

All documentation must be regularly reviewed, especially on substantial revisions to the app or service.

## All apps and services

The team must create and commit to the [Accessibility Statement](/accessibility/documenting/accessibility-statements). Use this to document and roadmap how you'll address any known issues.

The Accessibility Statement must be updated whenever the conformance of the app or service changes, when accessibility problems are raised, or at least once every 12-months.

The Accessibility Statement must be published within the app or service, and be discoverable for potential users.

## New or updated apps and services

New apps and services, or those that have been 'substantially revised' (see definition below) on or after 23 September 2019, must comply to all requirements.

These apps and services must:

- Publish and link to an Accessibility Statement (see above).
- Fully conform to the relevant standard; [WCAG 2.2 Level AA](/accessibility/requirement/wcag).
- Publish and link to an [Accessibility Conformance Report](/accessibility/documenting/conformance-report) documenting full, partial or non-conformance to the relevant WCAG standard. Update this whenever accessibility problems are raised, or when the user interface is changed.

## Apps and services not changed since 23 September 2019

Apps and services that haven't been 'substantially revised' since 23 September 2019 are subject to an abridged accessibility requirement. If an app or service is later 'substantially revised' then additional requirements will then apply.

These apps and services must regularly publish an Accessibility Statement (see above).

It's recommended, but not required, that these apps and services regularly complete and publish an [Accessibility Conformance Report](/accessibility/documenting/conformance-report).

Apps and services in this category will still need to provide reasonable adjustments where required, if accessibility problems are known.

### Definition of substantially revised

A modification to an app or service is considered a ‘substantial revision’ when at least one of the following is true:

- Any new feature is added to the user interface or service.
- Any feature is modified within the user interface.
- Any refactoring of the code behind a user interface is carried out.
- A feature upgrade of an outsourced or COTS product where the user interface code was modified or it's unclear if the underlying user interface code was modified.

You should re-test all parts of an app or service that could be affected by a substantial revision.

## Commercial and off-the-shelf

This requirement applies to commercial procurements or off-the-shelf (COTS) products.

In many cases, vendors or commercial organisations already publish the required documentation.

If you work for MI5, MI6 or GCHQ, search your intranet to learn more about our specific Policy Requirements.

## For public-facing tools

<p>
  This requirement also applies to public-facing websites managed by the
  Intelligence Community departments, such as this one.{" "}
  <ic-link
    target="_blank"
    href="https://www.gov.uk/guidance/accessibility-requirements-for-public-sector-websites-and-apps"
    rel="noreferer noopener nofollow"
  >
    Read more about understanding accessibility requirements for public sector
    bodies
  </ic-link>{" "}
  on the GOV.UK website.
</p>

---

# Subtitling, transcripts and audio description

URL: https://design.sis.gov.uk/accessibility/requirement/subtitles-transcripts-captions
Subtitle: This section tells you how to make videos and audio accessible.


## Introduction

Inclusive video and audio is important to those who are d/Deaf, are blind, have hearing impairments, have difficulty processing information, and those who perceive things differently.

Some people have a combination of needs, such as those who are deaf-blind. Everyone will have a different way that they prefer to consume information.

Features like captions or transcripts will benefit all users, not only those described above.

<p>
  This content is adapted from the{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/media/av/"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Web Accessibility Initiative
  </ic-link>{" "}
  and the{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/TR/WCAG22/"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Web Content Accessibility Guidelines (WCAG) 2.2
  </ic-link>
  .
</p>

## Requirements and recommendations

All intranet and ‘official communications’ content must always meet these requirements.

### Pre-recorded content

Video content that includes audio **must**:

- Provide in-video audio description of important visual information (where possible).
- Provide captions (‘subtitles’) of the audio content.
- Provide a descriptive transcript.

Audio-only content **must**:

- Provide a transcript.

Video-only content **must**:

- Provide a descriptive transcript **or** fully audio described version.

### Live broadcasts

All live content **should**:

- Provide an accurate script to viewers or listeners before the broadcast, **and**,
- Allow automatic captions, though this does not fulfil the WCAG requirement due to inaccuracy of automatic captioning.

### Sign language

All audio-video content for consumption across a significant majority of an organisation **should**:

- Provide British Sign Language signing within the video.

If there is no audio in a video, inform users in text that it does not need subtitles, captions or transcriptions.

## Planning audio-video content

<p>
  Consider a variety of aspects as you produce audio-video content. Full
  considerations are covered at the{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/media/av/av-content/"
    rel="noreferer noopener nofollow"
  >
    Web Accessibility Initiative
  </ic-link>{" "}
  .
</p>

Considerations include:

- Avoid causing seizures by avoiding content that flashes more than three times in one second.
- Position actors and speakers so viewers are able to lip read.
- Reduce background noise in videos.
- Avoid descriptions based solely on sensory characteristics.
- Make overlay text readable with appropriate contrast and font size.
- Write the script so that audio description of visual information is part of the speech (and therefore is in the subtitles).

## Descriptive transcripts

A descriptive transcript is a normal transcript of the audio content **and** includes text-based descriptions of important visual information.

Descriptive transcripts make content accessible to deaf-blind users and meets the needs of others who may have difficulty processing auditory information or can't focus on visual information.

Descriptive transcripts can be created using the captioning content that you need to produce anyway.

You don't need a separate basic transcript if you provide a descriptive one.

## Automated captioning

While it's important to give people the choice to use automated captions (such as in Microsoft Teams), it does not often fulfil the requirements of users.

The automated functionality can produce inaccurate results. As such, manual review and/or a script of the conversation should be provided when you publish captions or transcripts.

### Example of a bad automatic caption

Spoken text: "Broil on high for **4 to 5** minutes. You should **not** preheat the oven."

Automatic caption: "Broil on high for **45** minutes. You should **know to** preheat the oven."

---

# WCAG standards

URL: https://design.sis.gov.uk/accessibility/requirement/wcag
Subtitle: This section briefly introduces the Web Content Accessibility Guidelines (WCAG).


## About WCAG

<p>
  The World Wide Web Consortium's (W3C){" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/TR/WCAG22/"
    rel="noreferer noopener nofollow"
  >
    Web Content Accessibility Guidelines (WCAG)
  </ic-link>{" "}
  are used for making sure browser-based apps and services are conformant to
  industry standards.
</p>

Apps and services developed across the Intelligence Community must meet WCAG 2.2 Level A and Level AA criteria. Where possible, try to meet Level AAA too.

Being fully conformant to WCAG doesn't guarantee that your app or service is accessible to everyone. We use it as a good minimum standard, supported by enhanced requirements and responsive reporting processes.

Where applicable, there are around 70 criteria that an app or service needs to meet. Meeting them means the app or service is accessible in a number of ways and is generally implemented to accepted standards. You still need to do other [manual and automated testing](/accessibility/testing).

<p>
  The Web Accessibility Initative (WAI) has good documentation on{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/WCAG22/quickref/"
    rel="noreferer noopener nofollow"
  >
    How to Meet WCAG
  </ic-link>{" "}
  for each criterion.
</p>

## Reporting conformance

An [Accessibility Conformance Report (ACR)](/accessibility/documenting/conformance-report) is a checklist you can use to measure conformance to the WCAG standards.

Completing this will give you the documentation that's required by the [Digital Accessibility Policy](/accessibility/requirement).

## Principles of WCAG

WCAG is based on four principles: Perceivable, Operable, Understandable and Robust.

### Perceivable

People will use your app in different ways, including ways you didn't plan for. They may use a sense other than sight to browse. People may rely on assistive technology to present information in a different way, such as a screen reader or braille display.

WCAG works to make sure your app is presented to assistive technologies in a way that gives a comparable experience to people who use them.

### Operable

When people can perceive your app, they need to be able to do something with it. Some people may have difficulties interacting with the keyboard or mouse due to motor difficulties. They may use one or the other, or another mechanism such as speech.

WCAG checks for good keyboard navigation, no time limits and standard-compliant form fields.

### Understandable

Once your app is perceivable and operable, make sure what is shown is understandable. An app that behaves unexpectedly or inconsistently is one that might stop people from understanding what it is or how to use it.

WCAG checks that you use clear language in a way that signposts functionality. It also checks content for a hierarchy to make sure people who may not see your app can understand it.

### Robust

Standards such as WCAG, HTML5, CSS3 and good coding practices ensure technologies don't struggle with your service. Consider that when assistive technology fails, it's not always obvious to the user that something has ‘gone wrong’.

WCAG checks some basic coding standards to make sure assistive technology can interact with your capability.

## WCAG levels

WCAG has three levels of conformance. The higher level of conformance your service has, the more people will benefit.

The impact of Level A criteria might be barely visible in an interface but Level AAA criteria will have a significant impact on the design.

---

# AG Grid theme

URL: https://design.sis.gov.uk/get-started/install-components/ag-grid-theme
Subtitle: How to theme an AG Grid component using ICDS styles.


import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "@ukic/web-components/dist/core/ag-theme-icds.css";

export const rowData = [
  { make: "Tesla", model: "Model Y", price: 64950, electric: true },
  { make: "Ford", model: "F-Series", price: 33850, electric: false },
  { make: "Toyota", model: "Corolla", price: 29600, electric: false },
];

export const colDefs = [
  {
    headerName: "Car details",
    children: [
      { columnGroupShow: "closed", field: "price" },
      {
        columnGroupShow: "open",
        field: "make",
        filter: true,
        filterParams: {
          filterOptions: ["contains", "startsWith"],
        },
      },
      {
        columnGroupShow: "open",
        field: "model",
        editable: true,
        cellEditor: "agLargeTextCellEditor",
        cellEditorPopup: true,
      },
    ],
  },
  {
    headerName: "Car specs",
    headerTooltip: "Specs of the car",
    children: [{ field: "electric", pinned: "left" }],
  },
];

## Why we've created the theme

While the ICDS encourages using our components to ensure consistency in accessibility and user experience, we also recognise that other, older component libraries may offer features that are not yet available in our library.

In this case, our data table component may not provide the features needed by our consumers. This is due to the time and resources needed to implement these features, which are usually accomplished by large, dedicated teams in other libraries. For the ICDS, our team is small and our time spent delivering other useful features requested by the community.

In order to not leave consumers without the features they require while we implement them into our component library, we are offering a custom-made ICDS theme.

<p>
  This theme is being implemented on the{" "}
  <ic-link
    target="_blank"
    href="https://www.ag-grid.com/"
    rel="noreferer noopener nofollow"
  >
    ag-grid component
  </ic-link>
  , which is our recommended alternative data table solution whilst we take the time
  to implement the features our users require in a structured manner, to deliver
  the quality product our users expect.
</p>

## Example theme

<ComponentPreview>
  <div className="ag-theme-icds">
    <AgGridReact
      rowData={rowData}
      columnDefs={colDefs}
      rowSelection={{ mode: "multiRow" }}
      pagination
    />
  </div>
</ComponentPreview>

## How to apply the theme

The theme is held in a css file exported in our `@ukic/web-components` package. To apply it, add the following class to the parent `<div>` of the ag-grid component.

```jsx
// Can either import the css directly into the component file...
import "@ukic/web-components/dist/core/ag-theme-icds.css";
// ...or via another css file
import "./{FILE_NAME}.css";

return <div className="ag-theme-icds" style={{ height: 500 }}></div>;
```

If importing via another css file, add the following import to the top of the file.

```css
@import "@ukic/web-components/dist/core/ag-theme-icds.css";
```

---

# Auditory needs

URL: https://design.sis.gov.uk/accessibility/needs/auditory
Subtitle: Hearing impairment means a complete or partial loss of the ability to hear in one or both ears.


import auditoryAccessibilityFig3 from "./images/fig-3-closed-caption-and-transcripts.png";

## Introduction

People will have different degrees of a hearing impairment. Profoundly or severely deaf people may rely on hearing aids and lip-reading/speaking, whilst others will struggle with noisy environments.

A hearing impairment can include things like finding issues with background noise through to side effects of medicines.

<p>
  11 million people in the UK are d/Deaf or hard of hearing. You can{" "}
  <ic-link
    target="_blank"
    href="https://rnid.org.uk/about-us/research-and-policy/facts-and-figures/"
    rel="noreferer noopener nofollow"
  >
    read the Royal National Institute for Deaf People (RNID) auditory facts and
    figures
  </ic-link>{" "}
  for more information.
</p>

## Examples of hearing impairments

The following table lists examples of hearing impairments in three columns (permanent, temporary and situational).

| Permanent                                     | Temporary                                                                | Situational                                       |
| 
---

# Invisible illness

URL: https://design.sis.gov.uk/accessibility/needs/invisible
Subtitle: Invisible illness is an umbrella term for medical conditions that are invisible to others.


import invisibleAccessibilityFig4 from "./images/fig-4-good-error-messages.png";
import invisibleAccessibilityFig5 from "./images/fig-5-bad-error-messages.png";
import toastAnimation from "./images/toast-example-ten-seconds.mp4";

## Introduction

The examples below aren't exhaustive but show some common experiences that may affect how people use apps and services.

### Stress and anxiety

Stress and anxiety disorders are a group of related conditions that can cause both psychological and physical symptoms. Symptoms can include feeling restless or worried, irritability, fatigue, dizziness and difficulty breathing.

Behavioural effects include procrastination, avoidance and social withdrawal.

<p>
  <ic-link
    target="_blank"
    href="https://www.nhs.uk/conditions/generalised-anxiety-disorder/"
    rel="noreferer noopener nofollow"
  >
    Read more about anxiety disorders on the NHS website
  </ic-link>{" "}
  .
</p>

### Epilepsy

Epilepsy is a condition that affects around one in every 100 people in the UK. When someone has epilepsy, it means they tend to have epileptic seizures.

Triggers aren't the same for everyone, but common triggers include temperature, light, stress, tiredness, flicker and computer screens.

<p>
  <ic-link
    target="_blank"
    href="https://www.epilepsysociety.org.uk/about-epilepsy/what-epilepsy"
    rel="noreferer noopener nofollow"
  >
    Read more about epilepsy at the Epilepsy Society
  </ic-link>{" "}
  .
</p>

### Myalgic Encephalopathy/Chronic Fatigue Syndrome

Myalgic Encephalopathy/Chronic Fatigue Syndrome (ME/CFS) causes persistent fatigue (extreme tiredness) that affects day to day living and isn’t relieved by sleep or rest.

The main symptoms of ME/CFS are persistent mental and physical fatigue, although there are other common symptoms including muscular and joint pain, severe headaches, poor short-term memory and concentration, difficulty organising thoughts and problems finding the right words.

<p>
  <ic-link
    target="_blank"
    href="https://www.meresearch.org.uk/what-is-me"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Read more about ME/CFS at ME Research UK
  </ic-link>{" "}
  .
</p>

### Fibromyalgia

Fibromyalgia, also called Fibromyalgia Syndrome (FMS), is a long-term condition that causes pain all over the body.

As well as widespread pain, people with FMS can also experience increased sensitivity to pain, extreme tiredness, muscle stiffness, difficulty sleeping, problems with mental processes (known as "fibro-fog") such as memory and concentration, headaches and irritable bowel syndrome (IBS).

<p>
  <ic-link
    target="_blank"
    href="https://www.nhs.uk/conditions/fibromyalgia/"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Read more about fibromyalgia on the NHS website
  </ic-link>{" "}
  .
</p>

## How to design for invisible illnesses

In addressing some of the design tips below, we make it easier for everyone to use our apps.

Thinking about the [design considerations for neurodiversity](/accessibility/needs/neurodiversity) can help people who have invisible illnesses.

Some things we include in apps increase anxiety and, for some people, the impact can be significant.

### Error messages

Any error messages on a page should explain how to fix the problem without blaming the user. Being blamed can increase anxiety and stress which may affect other invisible needs.
Make sure any error messages explain what needs to be done to fix the error.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={invisibleAccessibilityFig4}
    imageAlt="A graphic of an error message and a submit button where the error asks the user to check data. The error states that the error is with the form, not with the user."
    state="good"
    caption="Error messages should advise people on how to fix the issue rather than blaming them."
  />
  <DoDontCaution
    imageSrc={invisibleAccessibilityFig5}
    imageAlt="A graphic of an error message and a submit button where the error blames the user for the submission failing."
    state="bad"
    caption="Error messages should not blame the person or fail to tell them how to fix the issue."
  />
</DoubleDoDontCaution>

### Motions/Animations/GIFs

The use of animations or motion on a webpage when people aren’t expecting it can increase stress.
If an animation is required, ensure to add an option to close it quickly as the motion could also affect those with Epilepsy.

### Disappearing pop-ups/toasts

Make sure pop-ups and toasts are visible for a good amount of time, and that they don't flash up too quickly on the screen.
Components like toasts can be auto dismissed, meaning they can sometimes disappear too quickly and not allow enough time to be read.

The toast component displayed in the video below dismisses after 10 seconds, which allows plenty of time for the toast to be read.

<video
  width="50%"
  muted
  controls
  loop
  title="A graphic of a toast showing a success message that will dismiss after 10 seconds."
>
  <source src={toastAnimation} type="video/mp4" />
</video>

---

# Accessibility needs

URL: https://design.sis.gov.uk/accessibility/needs
Subtitle: When building apps and services, be careful not to assume everyone is like you.


## Types of accessibility needs

Accessibility needs can be permanent, temporary or situational. Remember to not consider those with 'accessibility needs’ as a defined group of people with 'disability and impairments'.

Anyone can have a different set of needs at any time. We've curated some information to get you started, but this is by no means an exhaustive list of the types of experiences people can have.

- [Auditory](/accessibility/needs/auditory)
- [Invisible illness](/accessibility/needs/invisible)
- [Motor](/accessibility/needs/motor)
- [Neurodiversity](/accessibility/needs/neurodiversity)
- [Visual](/accessibility/needs/visual)

## Designing for accessibility

Have a look at the best practices for [designing for accessibility needs](/accessibility/needs/general) and explore how different accessibility needs require unique design considerations.

## Government Digital Service Accessibility Personas

<p>
  The GDS Accessibility team has created{" "}
  <ic-link
    target="_blank"
    href="https://alphagov.github.io/accessibility-personas/"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    seven different accessibility personas
  </ic-link>
  .
</p>

Each persona has different access needs. They are:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/claudia/"
      rel="noreferer noopener nofollow"
    >
      Claudia
    </ic-link>{" "}
    &ndash; a sight impaired screen magnifier user.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/ashleigh/"
      rel="noreferer noopener nofollow"
    >
      Ashleigh
    </ic-link>{" "}
    &ndash; a severely sight impaired screenreader user.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/ron/"
      rel="noreferer noopener nofollow"
    >
      Ron
    </ic-link>{" "}
    &ndash; an older user with multiple needs.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/chris/"
      rel="noreferer noopener nofollow"
    >
      Chris
    </ic-link>{" "}
    &ndash; a user with rheumatoid arthritis.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/pawel/"
      rel="noreferer noopener nofollow"
    >
      Pawel
    </ic-link>{" "}
    &ndash; a user with Aspergers.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/simone/"
      rel="noreferer noopener nofollow"
    >
      Simone
    </ic-link>{" "}
    &ndash; a dyslexic user.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://alphagov.github.io/accessibility-personas/saleem/"
      rel="noreferer noopener nofollow"
    >
      Saleem
    </ic-link>{" "}
    &ndash; a profoundly deaf user.
  </li>
</ul>

## Feedback

<p>
  The Design System aims to introduce disability, impairments and difference in
  an inclusive and accurate way. Please{" "}
  <ic-link
    target="_blank"
    href="https://github.com/mi6/ic-design-system/issues"
    rel="noreferer noopener nofollow"
  >
    check for an existing issue or let us know
  </ic-link>{" "}
  if you can help us improve our language.
</p>

---

# Designing for accessibility needs

URL: https://design.sis.gov.uk/accessibility/needs/general
Subtitle: Every app and service you create must have a minimal baseline of accessible designs.


import generalAccessibilityFig1 from "./images/fig-1-linear-layout.png";
import generalAccessibilityFig2 from "./images/fig-2-non-linear-layout.png";

## Introduction

<p>
  The Home Office has created effective{" "}
  <ic-link
    target="_blank"
    href="https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/"
    rel="noreferer noopener nofollow"
  >
    posters on designing for accessibility
  </ic-link>{" "}
  from which the accessibility needs section has taken inspiration. needs
  section has taken inspiration.
</p>

This page displays the generic design implementations that benefit multiple forms of accessibility. We have suggested the following design guidelines to be used when designing a page or service.

### Large font

Writing in a large font size will put less writing on a page and make the words more readable.

Accessible font size recommendations can be found on the [typography styles page](/styles/typography) of this website.

Our eyes are most often drawn to the larger text on a page. Less words on a page will feel like less effort to read.

### Tabbing order

Allowing people to use the tab button on their keyboard to navigate between elements on a page will improve accessibility.
Some people are unable to use a mouse, so this option increases accessibility.

The default keyboard navigation order must be logical and follow the visual flow of the page — i.e. left to right, top to bottom.

### Descriptive actions

Ensure that actions describe their feature. Having a button or link that says ‘click here’ isn’t beneficial if ‘here’ isn’t specified.

Using descriptions stating exactly what the action does is more accessible.

### Simple linear layouts

Ensure data is displayed in a linear format that is readable for people. Don’t use confusing layouts.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={generalAccessibilityFig1}
    imageAlt="A graphic of an information page currently at step 1 requiring an email address to be inputted and a ‘yes’ or ‘no’ as to whether you wish to be contacted. All of these options are aligned to the left and the ‘Next’ button to continue to next step is at the bottom."
    state="good"
    caption="Ensure all components are linear and aligned to the left."
  />
  <DoDontCaution
    imageSrc={generalAccessibilityFig2}
    imageAlt="A graphic of an information page currently at step 1 requiring an email address to be inputted and a ‘yes’ or ‘no’ as to whether you wish to be contacted. These options are not aligned to the left and the ‘Next’ button to move on to the next page is next to the email input, and not at the bottom of the page. This non linear layout can be confusing to people who don’t know the layout well."
    state="bad"
    caption="All components are not aligned to the left, showing what the layout should not look like."
  />
</DoubleDoDontCaution>

## Get user's opinions

Before confirming a design, we suggest you reach out to other members of your community to validate your design and make sure it works for people with accessibility requirements.

For more information explore how to [test accessibility with real people](/accessibility/testing).

## Additional accessibility resources

Check out the specific accessibility needs pages for more detail regarding designing for specific accessibility needs.

- [Auditory](/accessibility/needs/auditory)
- [Invisible illness](/accessibility/needs/invisible)
- [Motor](/accessibility/needs/motor)
- [Neurodiversity](/accessibility/needs/neurodiversity)
- [Visual](/accessibility/needs/visual)

---

# Motor needs

URL: https://design.sis.gov.uk/accessibility/needs/motor
Subtitle: 'Motor impairment' means a partial or total lack of function in a body part, usually a limb or limbs.


import motorAccessibilityFig8 from "./images/fig-8-large-clickable-areas.png";
import motorAccessibilityFig9 from "./images/fig-9-clickable-areas-too-small.png";
import motorAccessibilityFig10 from "./images/fig-10-dictate-function-on-text-fields.png";
import motorAccessibilityFig11 from "./images/fig-11-no-dictate-function.png";

## Introduction

Motor impairments can fundamentally affect the usage of your app or service. Some people that use walking frames can't hold a mobile phone, and some with muscle tremors may be unable to use dropdown menus with a mouse.

There are many types and causes of motor impairments. Over 400,000 people in the UK have rheumatoid arthritis and the number of people diagnosed with Parkinson's in 2018 in the UK was around one in 350 adults.

<p>
  <ic-link
    target="_blank"
    href="https://www.nhs.uk/conditions/fibromyalgia/"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Read more about Parkinson's on the Parkinson's UK website
  </ic-link>{" "}
  .
</p>

## Examples of motor impairments

The following table lists examples of motor impairments in three columns (permanent, temporary and situational).

| Permanent                                                  | Temporary   | Situational           |
| 
---

# Visual needs

URL: https://design.sis.gov.uk/accessibility/needs/visual
Subtitle: A visual impairment is a reduction in clarity or loss of vision that may be temporary or permanent.


import visualAccessibilityFig12 from "./images/fig-12-messages-using-colour-and-text.png";
import visualAccessibilityFig13 from "./images/fig-13-messages-using-colour-only.png";

## Introduction

Visual impairments can affect people to different degrees, including:

- Blind people who are sightless with no light perception.
- Those with only slight peripheral vision.
- People with light perception but a colour deficiency ('colour blindness').
- Temporary impairments such as distraction or glare.

Some people will use a screen magnifier, screen reader and/or Braille display to use technology. Some people may also require travel, mobility and navigational assistance.

<p>
  Nearly 2 million people in the UK are blind or partially sighted. Only
  one-third of people registered blind or partially sighted are in paid work.{" "}
  <ic-link
    target="_blank"
    href="https://www.nhs.uk/conditions/vision-loss/"
    rel="noreferer noopener nofollow"
  >
    Read more about vision loss on the NHS website
  </ic-link>
  .
</p>

<p>
  Over one-third (44%) of blind or partially sighted people also have
  depression, making it the most common secondary condition for those with sight
  loss.{" "}
  <ic-link
    target="_blank"
    href="https://www.rnib.org.uk/nb-online/rise-depression-rates-people-sight-loss"
    rel="noreferer noopener nofollow"
  >
    Read more about vision depression rates rising among people with sight loss
  </ic-link>
  .
</p>

## Examples of visual impairments

The following table lists examples of visual impairments in three columns (permanent, temporary and situational).

| Permanent                                                   | Temporary                                           | Situational                     |
| 
---

# Neurodiversity

URL: https://design.sis.gov.uk/accessibility/needs/neurodiversity
Subtitle: People often think, communicate, understand or remember things in ways we might not consider.


import neurodiversityAccessibilityFig14 from "./images/fig-14-graphics-and-text-used-to-show-data.png";
import neurodiversityAccessibilityFig15 from "./images/fig-15-only-text-is-used-to-show-data.png";
import neurodiversityAccessibilityFig16 from "./images/fig-16-dyslexia-friendly-font.png";
import neurodiversityAccessibilityFig17 from "./images/fig-17-no-dyslexia-friendly-font.png";

## Introduction

The terms neurodiversity, neurodifference and cognitive impairment cover a broad range of impairments or differences.

Neurodiversity and neurodifference are umbrella terms referring to a group of conditions that share common features. These features often centre around differences in how people learn and process information.

People with neurodiversity often describe themselves as having a different set of skills, abilities and ways of seeing the world.

## Types of neurodiversity

Improving a design for one set of needs often improves the experiences for other groups. It's quite common that some types of neurodiversity share needs with others.

It's important to remember that neurodiversity isn't always a disability or impairment. Neurodiverse people might not identify as having accessibility needs, but will still benefit from support and accessibility considerations.

Not all types of neurodiversity and cognitive needs are included in these examples.

### Dyslexia

People with Dyslexia may have difficulty processing and remembering information they see and hear, which can affect learning and the acquisition of literacy skills. Dyslexia can also impact other areas such as organisational skills.

6.3 million people (around 10% of the UK population) have dyslexia.

<p>
  <ic-link
    target="_blank"
    href="https://www.bdadyslexia.org.uk/dyslexia/about-dyslexia/what-is-dyslexia"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    Read more about Dyslexia at the British Dyslexia Association
  </ic-link>
  .
</p>

### Dyspraxia/Developmental Coordination Disorder

Developmental Coordination Disorder (DCD), also known as dyspraxia, is a common disorder affecting fine and/or gross motor coordination in children and adults.

Many non-motor difficulties may also be experienced. These include memory, perception and processing as well as additional problems with planning, organising and carrying out movements in the right order in everyday situations.

<p>
  <ic-link
    target="_blank"
    href="https://dyspraxiafoundation.org.uk/about-dyspraxia/dyspraxia-glance/"
    rel="noreferer noopener nofollow"
  >
    Read more about Dyspraxia at the Dyspraxia Foundation
  </ic-link>
  .
</p>

### Dyscalculia

Dyscalculia affects someone's ability to understand, recall or use numerical information. Some people may feel anxious when having to undertake any mathematical tasks.

Dyscalculia can also affect how numerical information is processed; some people can also have difficulty with memory, speed of thinking, organisation and sequencing. People with dyscalculia may not understand numerical references such as percentages.

### Irlen Syndrome

Irlen Syndrome is a perceptual processing disorder. It can affect what words and letters look like, including how well someone can read. It's distinct from dyslexia.

It can be the cause of unexplained symptoms such as headaches, eye strain and fatigue.

<p>
  <ic-link
    target="_blank"
    href="https://www.irlensyndrome.org/what-is-irlen-syndrome/"
    rel="noreferer noopener nofollow"
  >
    Read more about Irlen Syndrome at the Irlen Syndrome Foundation (US)
  </ic-link>
  .
</p>

### Attention Deficit conditions

Attention deficit hyperactivity disorder (ADHD) leads to difficulties in maintaining attention as well as impulsive and hyperactive behaviour.

The effects on people can include, but aren't limited to:

- Trouble holding attention on tasks.
- Avoidance or dislike of tasks that require a lot of mental effort.
- Forgetfulness.
- Trouble organising tasks and activities.

<p>
  <ic-link
    target="_blank"
    href="https://adhduk.co.uk/about-adhd/"
    rel="noreferer noopener nofollow"
  >
    Read more about ADD and ADHD at ADHD UK
  </ic-link>
  .
</p>

### Spectrum conditions (including Autism and Asperger's)

Autism (including Asperger's) is a spectrum condition that affects the way someone sees the world, processes information and interacts with others.

In the workplace, even when their qualifications and skill levels are ideally suited to the work concerned, someone may experience difficulties interacting with colleagues, and this can affect their ability to remain in employment. These may include:

- Not understanding abstract concepts.
- Needing extra time to process information or answer questions.
- Over- or under-sensitivity to light and sound.

Around 700,000 people in the UK are on the autistic spectrum. Only 16% of people with autism in the UK are in full time paid employment.

<p>
  Read more about{" "}
  <ic-link
    target="_blank"
    href="https://www.mencap.org.uk/learning-disability-explained/conditions-linked-learning-disability/autism-and-aspergers-syndrome"
    rel="noreferer noopener nofollow"
  >
    Autism and Asperger's at Mencap
  </ic-link>{" "}
  or{" "}
  <ic-link
    target="_blank"
    href="https://www.autism.org.uk/advice-and-guidance/what-is-autism"
    rel="noreferer noopener nofollow"
  >
    The National Autistic Society
  </ic-link>
  .
</p>

## How to design for neurodiversity

In addressing some of the design tips below, we make it easier for everyone to use our apps.

### Use colour properly

Some people understand colour differently or may not be able to infer a relationship between colour and meaning.

Always use [accessible colour](/styles/colour) and never rely on colour alone to convey meaning.

### Use graphics alongside text

Some people find it easier to look at images. Use graphs, icons and colour alongside text to provide a different way to consume information.

All images and icons must use [accessible colour](/styles/colour) and have `alt` (alternate) text and captions.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={neurodiversityAccessibilityFig14}
    imageAlt="A graphic of a survey regarding eye colour. Results are conveyed by short lines of text and by a pie chart that displays the results in a more visible solution."
    state="good"
    caption="Using both images and text can make it easier to understand data."
  />
  <DoDontCaution
    imageSrc={neurodiversityAccessibilityFig15}
    imageAlt="A graphic of a survey regarding eye colour. Results are written in long sentences that do not show the information as clearly as possible."
    state="bad"
    caption="Using text only to present data can be complex and overwhelming."
  />
</DoubleDoDontCaution>

<IcAlert
  heading=""
  message="The pie chart in the diagram above is not a component, but shows how images should be imported. 
  Please make sure that any text in the diagram is accessible with a screen reader."
  variant="info"
/>

### Don't expect the user to remember

If you use multiple input steps, make sure you remind users what they've entered before. Don't expect people to switch (or remember) between screens to see what they typed in previously.

### Use simple words

Where possible, use [simple words](/styles/content-style/voice-and-tone) and aim for a maximum reading age of 9.
People prefer to read pages with words they are already familiar with.

### Allow browser customisations

Some people rely on Operating System or Browser settings to change the colours of their apps.
Make sure what you build can be used with platform settings.

These include Windows High Contrast mode, macOS increased contrast and browser extensions that modify CSS styles.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={neurodiversityAccessibilityFig16}
    imageAlt="A graphic of a dialogue box to show open-dyslexic text font, which is easier for people with dyslexia to read."
    state="good"
    caption="Open-dyslexic font is used to make text more readable for those with dyslexia."
  />
  <DoDontCaution
    imageSrc={neurodiversityAccessibilityFig17}
    imageAlt="A graphic of a dialogue box to show default text font."
    state="bad"
    caption="Default fonts might not always benefit people with dyslexia."
  />
</DoubleDoDontCaution>

---

# Colour

URL: https://design.sis.gov.uk/styles/colour


import ColorTable from "./components/ColourTable";
import {
  ColoursText,
  ColoursAction,
  ColoursActionBackgrounds,
  ColoursLinks,
  ColoursStatus,
  ColoursDeprecatedStatus,
  ColoursClassification,
  ColoursArchitecturalAll,
  ColoursTheme,
} from "./components/ColourTable/colours.config";

## Using colours

People can complete tasks faster with recognisable, accessible and consistent colours.

Always use the Design System colour styles. These colours meet or exceed all [accessibility requirements](/accessibility/requirement).

The colour styles are built into the [UI Kit](/get-started). You should use these to help maintain consistency when you are building custom experiences.

## Text

Primary text is an off-black colour that satisfies minimum and maximum contrast needs. Use this colour for the majority of text and elements.

Use the secondary text colour for supporting content such as helper text or less important information in lists and tables.

Use the tertiary text colour for even less important information. Use the tertiary text colour sparingly and always try to use the primary or secondary colours first.

Don't use different colours for text, unless specified as part of a component.

<ColorTable config={ColoursText} />

## Action

Use the action colour for interactive elements like buttons, form controls and important actions. This makes it easy for people to recognise elements and switch between contexts.

The single action colour creates consistency across a range of apps. Use the dark or light action colour variant if a background colour is used.

Use the destructive action colour styles for actions that can't be reversed.

<ColorTable config={ColoursAction} />

### Action backgrounds

Interactive elements sometimes require transparent backgrounds for their hover and pressed states. The action background colour styles use the action colour styles with transparency.

<ColorTable config={ColoursActionBackgrounds} />

## Links

Use these colours for all links. These specific colours help to identify links from non-interactive text.

<ColorTable config={ColoursLinks} />

## Status

Use these colours only for status updates, errors and warnings. Always include text describing the status even if you use an icon.

Use the contrast colour variants to achieve good contrast when displaying status on dark backgrounds.

Use the 'warning dark' colour for any 'warning' text.

<ColorTable config={ColoursStatus} />

<br />

The following status colours have been deprecated. You can find equivalent colours in the table above.

<ColorTable config={ColoursDeprecatedStatus} />

## Classification

Use these colour styles for components that indicate content's classification.

<ColorTable config={ColoursClassification} />

## Architectural

Use these colours in lines, borders and backgrounds to logically separate distinct pieces of content.

<ColorTable config={ColoursArchitecturalAll} />

## Theme

You may choose a theme colour to give your app a distinct theme or 'brand'. Make sure it meets contrast requirements with either black or white foreground text.

If you use the [IC UI Kit](/components), the foreground colour will be automatically determined based on your theme colour.

The theme colour is used on the [top navigation](/components/top-navigation), [side navigation](/components/side-navigation), [hero](/components/hero) and [footer](/components/footer) components.

Don't use theme colours on any other components.

<ColorTable config={ColoursTheme} />

## Accessibility considerations

These colours have been considered against a variety of accessibility and usability practices. This includes colour contrast, recognition, consistency and with various colour deficiencies.

If using a 'light' theme colour, any text in those components will need to be black instead of white. This is automatic if you're using the IC UI Kit. It's not possible to use 'inaccessible' colours in the IC UI Kit as they'll revert to the default theme colour. See the component documentation for more details.

---

# Community

URL: https://design.sis.gov.uk/community
Subtitle: The UK Intelligence Community Design System is a community effort endorsed across the UK Intelligence Community.


## Introduction

The Design System and UI Kit has been [open sourced onto GitHub](https://github.com/orgs/mi6/projects/2/views/1) with the aim to make it easier for others to contribute back.

We hope to demonstrate our approach to software and inclusive design.

- See our [roadmap](/community/roadmap) for an overview of recent work, current focus and work we have planned.
- Learn how you can [contribute](/community/contribute) using the [contribution criteria](/community/contribute-criteria).
- How our community approaches design through our [design principles](/get-started/design-principles).

## More open source from the Intelligence Community

Our Design System enables MI6, MI5 and GCHQ to build usable, consistent and accessible apps and services.

Whilst most of our work is secret and for internal eyes only, there is a small number of open source projects from our community and partners.

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://github.com//mi6"
      rel="noreferer noopener nofollow"
    >
      MI6 GitHub
    </ic-link>
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://github.com/gchq"
      rel="noreferer noopener nofollow"
    >
      GCHQ GitHub
    </ic-link>
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://gchq.github.io/LD-Explorer/"
      rel="noreferer noopener nofollow"
    >
      LD-Explorer
    </ic-link>{" "}
    &ndash; A tool for easily exploring and experimenting with linked data
    resources directly from the browser.
  </li>
</ul>

---

# Links

URL: https://design.sis.gov.uk/styles/content-style/links
Subtitle: Links need to be understandable by all users.


## Introduction

It's important to make sure link text tells users where they are going and why. This is because link text should make sense without context (the words around the link).

Avoid writing 'click here' or 'read more'.

| **Like this...**                                                   | **Not like this...**                                                           |
| 
---

# Coding for accessibility

URL: https://design.sis.gov.uk/accessibility/coding
Subtitle: This section introduces some tips for making sure you code with accessibility best practice.


## Introduction

You should always write and [test](/accessibility/testing/) accessible code, even in prototypes.

Fixing accessibility issues later on can be very costly in both time and effort. Not considering accessibility when coding will increase your technical debt, and make it harder for people to use your app or service.

## Learn web fundamentals

All front-end developers should build a good foundation of web fundamentals. The most important language to get right is HTML.

CSS and JavaScript should be learnt before composite libraries or frameworks like StencilJS and React.

Common accessibility issues are avoided by following HTML, CSS and JavaScript best practices.

## Test whilst developing

Spotting and fixing accessibility issues early saves time later in the development lifecycle.

Use [automated browser testing tools](/accessibility/testing/automated-testing/#browser-testing) whilst developing, in code editors, linting and CI/CD workflows.

[Keyboard-only testing](/accessibility/testing/manual-testing/#keyboard-only-testing) should be done as often as possible, especially on significant changes.

Planning for [full manual testing](/accessibility/testing/manual-testing/#full-manual-accessibility-testing) will help address any [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation).

## Using third-party libraries and frameworks

The Design System and its UI Kit includes automated, manual and user-led accessibility testing. We are confident our components and patterns exceed minimum accessibility standards.

Check whether other third-party external libraries you use have been tested. Consider if the vendor or community is performing enough accessibility testing.

---

# Link

URL: https://design.sis.gov.uk/components/link/accessibility
Status: BETA
Subtitle: Links can be used to navigate to different pages or sections of a page.


## Easy to use for everyone

Links use the semantic `<a>` HTML element (anchor element) with an `href` attribute to create a hyperlink.

## For Assistive Technology

Most screen readers will announce “link” before reading out a link. For example, a link labelled “Components” will be read out as “link components”.

## Based on

The links component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://webaim.org/techniques/hypertext/"
      rel="noreferer noopener nofollow"
    >
      Links and Hypertext
    </ic-link>
    , WebAIM, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://adrianroselli.com/2016/01/links-buttons-submits-and-divs-oh-hell.html"
      rel="noreferer noopener nofollow"
    >
      Links, Buttons, Submits, and Divs, Oh Hell
    </ic-link>
    , Adrian Roselli, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#accessibility"
      rel="noreferer noopener nofollow"
    >
      The Anchor element
    </ic-link>
    , Mozilla, accessed July 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Link

URL: https://design.sis.gov.uk/components/link/code
Status: BETA
Subtitle: Links can be used to navigate to different pages or sections of a page.


import { IcLink } from "@ukic/react";

import { MemoryRouter, NavLink } from "react-router-dom";

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-link href="/components/link/code">About our coffees</ic-link>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLink href="/components/link/code">About our coffees</IcLink>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

## Component demo

<ComponentPreview snippets={snippets}>
  <IcLink href="#" onClick={(e) => e.preventDefault()}>
    About our coffees
  </IcLink>
</ComponentPreview>

## Link details

{
  "props": [
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": true,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the link, e.g. dark, light, or default.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "download",
      "type": "boolean | string",
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "If `true`, the user can save the linked URL instead of navigating to it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the link points to.",
      "docsTags": [],
      "default": "null",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showIcon",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-icon",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. The 'open in new tab/window' icon will display automatically if target=\"_blank\"."
        }
      ],
      "deprecation": "This prop should not be used anymore. The 'open in new tab/window' icon will display automatically if target=\"_blank\".",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "router-item",
      "docs": "Handle routing by nesting your routes in this slot."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the link.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### With icon

export const snippetsIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-link href="#" target="_blank">About our coffees</ic-link>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLink href="#" target="_blank">About our coffees</IcLink>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIcon}>
  <IcLink href="/" target="_blank">
    About our coffees
  </IcLink>
</ComponentPreview>

### Appearance

export const snippetsLightDark = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-link href="#" appearance="dark" target="_blank">About our coffees</ic-link>
<ic-link href="#" appearance="light" target="_blank">About our coffees</ic-link>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
  }
  .light-background {
    padding: var(--ic-space-xs);
  }
  .dark-background {
    background: #333333;
    padding: var(--ic-space-xs);
  }
</style>
<body>
  <div class="parent-container">
    <div class="light-background">
      <ic-link href="#" appearance="dark" target="_blank">
        About our coffees
      </ic-link>
    </div>
    <div class="dark-background">
      <ic-link href="#" appearance="light" target="_blank">
        About our coffees
      </ic-link>
    </div>
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLink href="#" appearance="dark" target="_blank">About our coffees</IcLink>
<IcLink href="#" appearance="light" target="_blank">About our coffees</IcLink>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: 'flex',
    flexWrap: 'wrap',
  },
  lightBackground: {
    padding: 'var(--ic-space-xs)',
  },
  darkBackground: {
    background: '#333333',
    padding: 'var(--ic-space-xs)',
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    <div className={classes.lightBackground}>
      <IcLink href="/" appearance="dark" target="_blank">
        About our coffees
      </IcLink>
    </div>
    <div className={classes.darkBackground}>
      <IcLink href="#" appearance="light" target="_blank">
        About our coffees
      </IcLink>
    </div>
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: 'flex',
    flexWrap: 'wrap',
  },
  lightBackground: {
    padding: 'var(--ic-space-xs)',
  },
  darkBackground: {
    background: '#333333',
    padding: 'var(--ic-space-xs)',
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    <div className={classes.lightBackground}>
      <IcLink href="/" appearance="dark" target="_blank">
        About our coffees
      </IcLink>
    </div>
    <div className={classes.darkBackground}>
      <IcLink href="#" appearance="light" target="_blank">
        About our coffees
      </IcLink>
    </div>
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLightDark}>
  <div
    style={{
      padding: "0.5rem",
    }}
  >
    <IcLink href="/" appearance="dark" target="_blank">
      About our coffees
    </IcLink>
  </div>
  <div
    style={{
      background: "#333333",
      padding: "0.5rem",
    }}
  >
    <IcLink href="/" appearance="light" target="_blank">
      About our coffees
    </IcLink>
  </div>
</ComponentPreview>

### With React Router

export const withReactRouter = [
  {
    technology: "React",
    snippets: {
      short: `<MemoryRouter initialEntries={["/"]}>
  <div className={classes.linkContainer}>
    <IcLink>
      <NavLink to="/" slot="router-item">Home</NavLink>
    </IcLink>
    <IcLink>
      <NavLink to="/daily-tippers" slot="router-item">Beverages</NavLink>
    </IcLink>
  </div>
  <IcSectionContainer>
    <Routes>
      <Route path="/" element={<IcTypography>This is the home page</IcTypography>} />
      <Route path="/daily-tippers" element={<IcTypography>This page is about beverages</IcTypography>} />
    </Routes>
  </IcSectionContainer>
</MemoryRouter>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  linkContainer: {
    display: "flex",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  linkContainer: {
    display: "flex",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withReactRouter}
  style={{ flexDirection: "column" }}
>
  <MemoryRouter initialEntries={["/"]}>
    <div
      style={{
        display: "flex",
        flexDirection: "row",
        gap: "0.5rem",
      }}
    >
      <IcLink>
        <NavLink to="/" slot="router-item">
          Home
        </NavLink>
      </IcLink>
      <IcLink>
        <NavLink to="/daily-tippers" slot="router-item">
          Beverages
        </NavLink>
      </IcLink>
    </div>
  </MemoryRouter>
</ComponentPreview>

---

# Card (horizontal)

URL: https://design.sis.gov.uk/components/horizontal-card/code
Status: CANARY
Subtitle: Horizontal cards are containers used to display structured information or link to new information.


import { IcCardHorizontal } from "@ukic/canary-react";
import { IcTypography } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk."
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

## Horizontal card details

{
  "props": [
    {
      "name": "clickable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "clickable",
      "reflectToAttr": false,
      "docs": "If `true`, the horizontal card will be a clickable variant, instead of static.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the horizontal card will be disabled if it is clickable.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The heading for the horizontal card. This is required, unless a slotted heading is used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the clickable horizontal card link points to. If set, the clickable horizontal card will render as an \"a\" tag, otherwise it will render as a button.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "message",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "The main body message of the horizontal card.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"extra-large\" | \"large\" | \"medium\" | \"small\"",
      "complexType": {
        "original": "IcCardSizes",
        "resolved": "\"extra-large\" | \"large\" | \"medium\" | \"small\"",
        "references": {
          "IcCardSizes": {
            "location": "import",
            "path": "./ic-card-horizontal.types",
            "id": "src/components/ic-card-horizontal/ic-card-horizontal.types.ts::IcCardSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the horizontal card.",
      "docsTags": [],
      "default": "\"medium\"",
      "values": [
        {
          "value": "extra-large",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the horizontal card."
    },
    {
      "name": "heading",
      "docs": "Content will be placed at the top of the horizontal card to the right of the icon."
    },
    {
      "name": "icon",
      "docs": "Content will be placed to the left of the horizontal card heading."
    },
    {
      "name": "image",
      "docs": "Content will be placed to the left of all other content."
    },
    {
      "name": "message",
      "docs": "Content will be placed in the main body of the horizontal card."
    }
  ],
  "styles": [
    {
      "name": "--card-horizontal-width",
      "annotation": "prop",
      "docs": "Width of the horizontal card"
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the card.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "click",
      "capture": true,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Heading only

export const snippetsHeadingOnly = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal heading="Americano order"></ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal heading="Americano order" />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsHeadingOnly}>
  <IcCardHorizontal heading="Americano order" />
</ComponentPreview>

### With icon

export const snippetsWithIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal heading="Americano order">
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal heading="Americano order">
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWithIcon}>
  <IcCardHorizontal heading="Americano order">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### With message

export const snippetsWithMessage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk."
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWithMessage}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### With image

export const snippetsWithImage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk."
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWithImage}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk." 
  size="small"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk."
  size="small"
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSmall}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
    size="small"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Large

export const snippetsLarge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk. Size: Grande. Order type: Takeaway." 
  size="large"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk. Size: Grande. Order type: Takeaway."
  size="large"
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLarge}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk. Size: Grande. Order type: Takeaway."
    size="large"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Extra large

export const snippetsXL = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk. Size: Venti. Order type: Takeaway via drive-through." 
  size="extra-large"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk. Size: Venti. Order type: Takeaway via drive-through."
  size="extra-large"
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsXL}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk. Size: Venti. Order type: Takeaway via drive-through."
    size="extra-large"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Clickable

export const snippetsClickable = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk." 
  clickable="true"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk."
  clickable
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsClickable}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
    clickable
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Clickable link

export const snippetsClickableHref = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk." 
  clickable="true" 
  href="#"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk."
  clickable
  href="#"
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsClickableHref}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
    clickable
    href="#"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Wrapped by link

export const snippetsWrapped = [
  {
    technology: "Web component",
    snippets: {
      short: `<a href="/">
  <ic-card-horizontal 
    heading="Americano order" 
    message="Extras: Double espresso shot and oat milk." 
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
    </svg>
    <svg
      slot="image"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1600 900"
    >
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </ic-card-horizontal>
</a>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<a href="/">
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
  >
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
    </SlottedSVG>
    <SlottedSVG
      slot="image"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1600 900"
    >
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </SlottedSVG>
  </IcCardHorizontal>
</a>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWrapped}>
  <a
    href="/"
    onClick={(e) => e.preventDefault()}
    style={{ textDecoration: "none", color: "var(--ic-architechtural-black)" }}
    aria-label="Americano order card"
  >
    <IcCardHorizontal
      heading="Americano order"
      message="Extras: Double espresso shot and oat milk."
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </svg>
      <svg
        slot="image"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 1600 900"
      >
        <rect fill="#ff7700" width="1600" height="1600" y="-350" />
        <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
        <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
        <polygon fill="#c50022" points="-60 900 398 662 816 900" />
        <polygon fill="#a3001b" points="337 900 398 662 816 900" />
        <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
        <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
        <polygon fill="#b80066" points="641 695 886 900 367 900" />
        <polygon fill="#960052" points="587 900 641 695 886 900" />
        <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
        <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
        <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
        <polygon fill="#880088" points="943 900 1210 900 971 687" />
      </svg>
    </IcCardHorizontal>
  </a>
</ComponentPreview>

### Disabled

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal 
  heading="Americano order" 
  message="Extras: Double espresso shot and oat milk." 
  clickable="true" 
  disabled="true"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal
  heading="Americano order"
  message="Extras: Double espresso shot and oat milk."
  clickable
  disabled
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabled}>
  <IcCardHorizontal
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
    clickable
    disabled
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

### Slotted heading and message

export const snippetsSlottedHeading = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card-horizontal>
  <ic-typography slot="heading" variant="h4">Americano order</ic-typography>
  <ic-typography slot="message">Extras: Double espresso shot and oat milk.</ic-typography>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card-horizontal>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCardHorizontal>
  <IcTypography slot="heading" variant="h4">Americano order</IcTypography>
  <IcTypography slot="message">Extras: Double espresso shot and oat milk.</IcTypography>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCardHorizontal>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSlottedHeading}>
  <IcCardHorizontal>
    <IcTypography slot="heading" variant="h4">
      Americano order
    </IcTypography>
    <IcTypography slot="message">
      Extras: Double espresso shot and oat milk.
    </IcTypography>
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

---

# Card (horizontal)

URL: https://design.sis.gov.uk/components/horizontal-card
Status: CANARY
Subtitle: Horizontal cards are containers used to display structured information or link to new information.


import { IcAlert, IcLink } from "@ukic/react";
import { IcCardHorizontal } from "@ukic/canary-react";

<IcAlert
  heading="Canary component"
  variant="info"
  message="This component is new and its guidance will be updated over time."
/>

## Canary components

Canary components are unstable components that are released for testing purposes.

We value any feedback from users willing to try them in their applications.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

For more information on Canary components, read our approach to [releases and versions](/get-started/releases-versions).

<p>
  Additional details on the props and events for this component can be found in
  the{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-web-components/?path=/docs/web-components-horizontal-card--docs"
    target="_blank"
  >
    Canary web components
  </IcLink>{" "}
  and{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-react/?path=/docs/react-components-horizontal-card--docs"
    target="_blank"
  >
    Canary React
  </IcLink>{" "}
  storybooks.
</p>

## Component demo

<ComponentPreview>
  <IcCardHorizontal heading="Card heading" message="Card message">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <svg slot="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 900">
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCardHorizontal>
</ComponentPreview>

---

# Defining accessibility

URL: https://design.sis.gov.uk/accessibility/introduction/definition
Subtitle: The word 'accessibility' can mean a lot of different things.


## What accessibility means

We use the term ‘accessible’ to mean that someone isn’t excluded from something based on experiencing a disability, impairment or because they think differently.

<p>
  The Design System is built around the{" "}
  <ic-link
    target="_blank"
    href="https://www.scope.org.uk/about-us/social-model-of-disability/"
    rel="noreferer noopener nofollow"
  >
    Social Model of Disability
  </ic-link>{" "}
  .
</p>

It states that people are disabled by barriers in society rather than being disabled by a medical definition, impairment or neurodiversity they experience.

This model recognises that, with sensible consideration, we can empower people to use our technology in a way that works for them.

## There are a wide range of needs

Don't consider those with 'accessibility needs' as a defined group of people with 'disability and impairments'.

When we talk about accessible apps and services, most people think initially of visually impaired or blind users who might use screen readers.

In fact, we need to consider a lot of needs people may have, like motor impairments and neurological diversity. Good (and accessible) design considers implications of the full spectrum of diversity.

## Accessible is better for everyone

Accessible apps are always more usable for people who don't have accessibility needs. If you become skilled at considering accessibility, you'll always end up with a better product.

Something can be accessible to some people while being inaccessible to others. An app with a real-time data table might work really well for sighted users and those who use a screen reader.

However, if someone has a different reading comprehension or has anxiety from information overload, they may experience significant issues if table rows are rapidly changing or flashing.

---

# Introduction to accessibility

URL: https://design.sis.gov.uk/accessibility/introduction
Subtitle: Many people who work for us are directly impacted by the accessibility decisions we make.


## Introduction

Accessibility is not just about disability; it covers a wide range of needs from temporary motor impairments and blindness, to neurological diversity like dyslexia and anxiety.

<p>
  One in five people in the UK have a disability. You can{" "}
  <ic-link
    target="_blank"
    href="https://www.scope.org.uk/media/disability-facts-figures/"
    rel="noreferer noopener nofollow"
  >
    read Scope disability facts and figures
  </ic-link>{" "}
  for more information.
</p>

There are also many people who might have temporary accessibility needs and wouldn't identify as having them.

## Permanent, temporary and situational

Impairments can be permanent, temporary or situational. Anyone can have a different set of impairments at any time and those needs can change quickly.

There are no hard and fast rules about how a disability, impairment or neurological diversity affects someone.

A person born with one arm, a person with a broken wrist and a person holding a baby all have a reduced ability to interact through their hands. Each will interact with things differently; arguably, someone with one arm may be better prepared than someone with a broken wrist.

Accessibility and inclusive design aren't restricted to a small community with life-changing needs.

Read more about examples of [disabilities, impairments and neurological diversity](/accessibility/needs).

---

# Angular

URL: https://design.sis.gov.uk/get-started/install-components/angular
Subtitle: How to use the components in an Angular-based application.


import { IcAlert } from "@ukic/react";

<IcAlert
  variant="info"
  heading="Version check"
  message="These instructions were used with Angular version 13.2.5."
/>

## Step one

In the root of your project:

```shell
// using npm
npm install @ukic/web-components @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/web-components @ukic/fonts
```

## Step two

In the `app.modules.ts` file, import the `CUSTOM_ELEMENTS_SCHEMA`.

Or for standalone components, import the `CUSTOM_ELEMENTS_SCHEMA` into the `.ts` file of any component using the components from this Design System.

```jsx
import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from "@angular/core";
```

## Step three

Then include it in the `@NgModule` decorator object. Or for standalone components, include it in the `@Component` decorator object.

```jsx
// Modules
@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule],
  providers: [],
  bootstrap: [AppComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
// Standalone components
@Component({
  selector: 'app-foo',
  standalone: true,
  imports: [],
  templateUrl: './foo.component.html',
  styleUrl: './foo.component.scss',
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
```

## Step four

Set skipLibCheck to `true` in your `tsconfig.json` file.

```jsx
"compilerOptions": {
  "skipLibCheck": true,
},
```

## Step five

Import defineCustomElements in your `main.ts` file.

```jsx
import { defineCustomElements } from "@ukic/web-components/loader";
```

## Step six

Call defineCustomElements at the bottom of `main.ts`:

```jsx
//other configuration
...
defineCustomElements();
```

## Step seven

Add the following into the top level CSS file for your project. For newly generated Angular projects this will be `src/styles.css`.

```css
@import "@ukic/fonts/dist/fonts.css";
@import "@ukic/web-components/dist/core/core.css";
```

<br />

<p>
  In order to be rendered consistently across browsers and in line with modern
  standards, each of the components uses styles from a global CSS file based on{" "}
  <ic-link
    target="_blank"
    href="https://necolas.github.io/normalize.css/"
    rel="noreferer noopener nofollow"
  >
    Normalize.css
  </ic-link>
  .
</p>

If you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the components, add the following into the top level CSS file as well.

```css
@import "@ukic/web-components/dist/core/normalize.css";
```

## Step eight

Declare the component in your `app.component.html` file.

```html
<ic-status-tag label="Neutral"></ic-status-tag>
```

---

# Install the components

URL: https://design.sis.gov.uk/get-started/install-components
Subtitle: Install and use the UI Kit component library. Use React or web components to quickly build accessible interfaces.


## Installing the components

<p>
  The UI Kit components are available on{" "}
  <ic-link
    target="_blank"
    href="https://www.npmjs.com/"
    rel="noreferer noopener nofollow"
  >
    npmjs.com
  </ic-link>
  , and can be installed from the command line.
</p>

```shell
// Web components, Angular, Vue, Svelte
npm install @ukic/web-components @ukic/fonts

// React
npm install @ukic/react @ukic/fonts
```

## Using the components

To use the components in a particular framework, follow the framework instructions.

- [React](/get-started/install-components/react)
- [Angular](/get-started/install-components/angular)
- [Vue](/get-started/install-components/vue)
- [Svelte](/get-started/install-components/svelte)
- [Gatsby](/get-started/install-components/gatsby)
- [Next.js](/get-started/install-components/nextJS)

Web components can be used without the need for a framework. To use web components without a framework, follow the [web components instructions](/get-started/install-components/web-components).

<p>
  Custom Elements Everywhere has{" "}
  <ic-link
    target="_blank"
    href="https://custom-elements-everywhere.com"
    rel="noreferer noopener nofollow"
  >
    more information on how web components work with other frameworks
  </ic-link>
  .
</p>

## Using third-party components

If you can't find a suitable component in this Design System, then you can use one from a third-party library. Use the library's theming and customisation options and follow our [styles](/styles) so that they look and feel as similar as possible.

You can replace the third-party components once they are released in the Design System.

---

# Releases and versions

URL: https://design.sis.gov.uk/get-started/releases-versions
Subtitle: Our approach to releases and versioning.


## How we release and version

This page provides details on how the `@ukic/` packages and website are released and versioned.

<p>
  Releases are triggered once the <code class="language-text">develop</code>{" "}
  branch pull request is merged into the <code class="language-text">main</code>{" "}
  branch. The package versions follow the{" "}
  <ic-link
    target="_blank"
    href="https://semver.org/"
    rel="noreferer noopener nofollow"
  >
    semantic versioning
  </ic-link>{" "}
  scheme.
</p>

```js
major.minor.patch;
```

<br />

**Major releases** contain breaking changes to the component libraries. Breaking changes are communicated to the community as early as possible to allow teams to plan when to integrate the new packages into their projects. Major releases are very infrequent, with at least a year between them.

**Minor releases** contain new component features. Minor releases are backwards-compatible with no requirement for the developer to make updates to their existing implementation. However, to use the new feature, the implementation will require a small update (such as adding a new prop) in order to use the new component application programming interface (API).

**Patch releases** contain bug fixes.

<p>
  Minor and/or patch releases are scheduled every two weeks. All changes to the
  component library are recorded in the{" "}
  <ic-link
    target="_blank"
    href="https://github.com/mi6/ic-ui-kit/blob/main/packages/web-components/CHANGELOG.md"
    rel="noreferer noopener nofollow"
  >
    Web Components CHANGELOG.md
  </ic-link>
  .
</p>

All packages are published with identical version numbers.

## How we manage Beta components

Beta components are an intermediate stage in our versioning system, between the initial "Alpha" testing phase (peer review) and the stable release.

When a component reaches the Beta stage, it has passed the preliminary phase but is not yet deemed fully stable. This allows us to release components for wider testing and gather feedback from our user community while further fine-tuning their functionalities and addressing potential issues.

Beta components are integrated into our normal `@ukic/` packages and can be installed just like any other stable component. They are easily accessible to developers and users who wish to explore the latest developments and contribute to the improvements.

It is important to be aware of a few points when working with Beta components:

1. **Potential API changes:** As Beta components are still in development, there may be changes to their API between major version updates. This could require manual adjustments in the codebase to accommodate the changes.
2. **Presence of bugs:** Beta components may contain bugs or missing features.
3. **Potential future major changes:** Since Beta components are actively evolving, there may be major behind-the-scenes changes planned for the future.

We consider Beta components acceptable for use in production-ready applications, as long as customers are happy with the issues mentioned previously.

We regularly review the stability and reliability of Beta components. When the component meets the criteria it can be transitioned to a stable release.

## Canary components

Canary components are unstable components that are released for testing purposes.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

We consider a Canary component to be acceptable for moving to Beta once customers have tested its usage and provided enough feedback to suggest they're happy with it.

Canary components can be installed in the same way as our core `@ukic/` packages, but prefixed with canary, for example `@ukic/canary-react` or `@ukic/canary-web-components`.

```shell
// Canary Web Components
npm i @ukic/canary-web-components @ukic/fonts

// Canary React
npm i @ukic/canary-react @ukic/fonts
```

A difference between our Canary packages and our core `@ukic/` packages is that canary package versions follow a `<version>-canary.<build-number>` pattern.

<p>
  Another difference is that docs for canary components won't appear in the
  Components guidance section of this site. Instead, docs can be viewed in our
  Storybook instance for either{" "}
  <ic-link
    target="_blank"
    href="https://mi6.github.io/ic-ui-kit/branches/canary/main/react/?path=/docs/getting-started--docs"
    rel="noreferer noopener nofollow"
  >
    React
  </ic-link>{" "}
  or{" "}
  <ic-link
    target="_blank"
    href="https://mi6.github.io/ic-ui-kit/branches/canary/main/web-components/?path=/docs/getting-started--docs"
    rel="noreferer noopener nofollow"
  >
    web components
  </ic-link>
  .
</p>

## Supporting previous versions

As the component library matures and new versions arrive, the team will actively maintain and support the previous major version for up to 6 months.

This is to allow the team to provide as much resource as possible on the current version. Any support for the legacy versions will only include security updates and bug fixes. No new features will be added.

---

# Testing with Cypress

URL: https://design.sis.gov.uk/get-started/test-components/testing-with-cypress
Subtitle: How to test our components with Cypress.


import testFiles from "./test-app/index";

export const snippetArray = [
  {
    fileName: testFiles.cypress.fileName,
    disableMoreButton: testFiles.cypress.disableMoreButton,
    snippets: {
      short: testFiles.cypress.snippets.short,
      long: testFiles.cypress.snippets.long,
    },
  },
  {
    fileName: testFiles.component.fileName,
    disableMoreButton: testFiles.component.disableMoreButton,
    snippets: {
      short: testFiles.component.snippets.short,
      long: testFiles.component.snippets.long,
    },
  },
  {
    fileName: testFiles.types.fileName,
    disableMoreButton: testFiles.types.disableMoreButton,
    snippets: {
      short: testFiles.types.snippets.short,
      long: testFiles.types.snippets.long,
    },
  },
  {
    fileName: testFiles.constants.fileName,
    disableMoreButton: testFiles.constants.disableMoreButton,
    snippets: {
      short: testFiles.constants.snippets.short,
      long: testFiles.constants.snippets.long,
    },
  },
  {
    fileName: testFiles.methods.fileName,
    disableMoreButton: testFiles.methods.disableMoreButton,
    snippets: {
      short: testFiles.methods.snippets.short,
      long: testFiles.methods.snippets.long,
    },
  },
];

export const stackblitzProps = {
  test: "develop",
  title: "Testing with Cypress",
  branch: "/tree/main",
};

## About Cypress

<p>
  <ic-link
    target="_blank"
    href="https://www.cypress.io/"
    rel="noreferer noopener nofollow"
  >
    Cypress
  </ic-link>{" "}
  is a developer-friendly, Javascript-based front-end testing tool. It comes
  bundled with popular libraries like Mocha and Chai, allowing for swift
  adoption.
</p>
<p>
  Advantages include snapshots at the time of test execution, implicit wait
  commands, multiple browsers in which to test and real-time command execution
  with visual feedback.
</p>

Cypress allows for end-to-end testing, replicating how "users interact with your app by using a real browser", and component testing, also known as unit testing, which tests a component's functionality, styling and appearance in isolation.

## Cypress and the Shadow DOM

Cypress gives two ways in which to test `@ukic` components in the [shadow DOM](/get-started/test-components#how-weve-built-the-components).

### Configuring at test level

Add `includeShadowDom: true` to the `cy.get` query.

```js
// cypress/e2e/test.cy.js
it("has an app bar with title link", () => {
  cy.get("ic-top-navigation", { includeShadowDom: true })
    .shadow()
    .find(".title-link")
    .should("have.attr", "href", "/")
    .should("have.text", "My App Title");
});
```

This allows traversing the shadow DOM by chaining the `.shadow()` method.

### Configuring at global level

Add `includeShadowDom: true` to the `cypress.config.js`.

```js
// cypress.config.js
const { defineConfig } = require("cypress");

module.exports = defineConfig({
  includeShadowDom: true,
  component: {
    devServer: {
      framework: "create-react-app",
      bundler: "webpack",
    },
  },
});
```

This allows traversing the shadow DOM using assertions without having to explicitly chain the `.shadow()` method.

## Example: Component testing

Below are examples of component tests on the `@ukic/react` components `IcTextfield` and `IcButton`. Component tests are normally located adjacent to the component they are testing and are rendered on a development server.

```tsx
// Textfield.tsx
import { IcTextField, IcButton } from "@ukic/react";
import React, { useState } from "react";

function Textfield() {
  const [favouriteCoffee, setFavouriteCoffee] = useState<String>("");

  const handleChange = (event) => {
    event.preventDefault();
    setFavouriteCoffee(event.detail.value);
  };

  const handleClick = () => {
    console.log("This is the best coffee going:", favouriteCoffee);
  };

  return (
    <form>
      <IcTextField
        label="What is your favourite coffee?"
        placeholder="Placeholder"
        helperText="Such as Arabica, Robusta or Liberica"
        onIcChange={(ev) => handleChange(ev)}
      />

      <IcButton variant="primary" onClick={() => handleClick()}>
        Send
      </IcButton>
    </form>
  );
}

export default Textfield;
```

```tsx
// Textfield.cy.tsx
import React from "react";
import Textfield from "./Textfield.tsx";

describe("<Textfield />", () => {
  it("renders", () => {
    cy.mount(<Textfield />).should("have.property", "component");
  });
  it("takes a value in the textfield and prints to console when the button is clicked", () => {
    // Render the component
    cy.mount(<Textfield />);
    // Capture the log to check later
    cy.stub(window.console, "log").as("consoleLog");

    // Check the IcComponents have finished rendering
    cy.get("ic-text-field").should("have.class", "hydrated");
    cy.get("ic-button").should("have.class", "hydrated");

    // Interact with the components and provide assertions
    cy.get("#ic-text-field-input-1").type("Black");
    cy.get("ic-button").click();
    cy.get("@consoleLog").should(
      "be.calledWith",
      "This is the best coffee going:",
      "Black"
    );
  });
});
```

## Example: End-to-end testing

Below is an example of end-to-end tests written against a ‘test app’ that has been created using ICDS components.

<ComponentTesting
  snippetArray={snippetArray}
  showStackblitzBtn
  stackblitzButtonTestAppProps={stackblitzProps}
/>

---

# Inclusive language

URL: https://design.sis.gov.uk/styles/content-style/inclusive-language
Subtitle: Consider that what you write can have side effects even with the best of intentions.


## Introduction

Where possible, we have developed the Design System and its content style with input from across the communities. This includes disability advisory networks, affinity groups and expertise from the UKIC.

## Addressing potentially sensitive topics

Some friendly terms can unintentionally exclude big groups of people. For example, 'hi folks', 'you guys' or 'all of mankind' refer to gender identity. People have different beliefs, identities or perceptions that can change how they feel about these words.

<p>
  <ic-link
    target="_blank"
    href="https://www.linkedin.com/pulse/inclusive-language-important-thriving-diverse-work-culture-singh"
    rel="noreferer noopener nofollow"
  >
    Read more about thriving diverse work culture on the LinkedIn website
  </ic-link>
  .
</p>

### Social Model of Disability

<p>
  This Design System is an exception to talking about disability, impairment and
  other situations that affect how people work. The Design System language and
  principles are designed around{" "}
  <ic-link
    target="_blank"
    href="https://en.wikipedia.org/wiki/Social_model_of_disability"
    rel="noreferer noopener nofollow"
  >
    The Social Model of Disability
  </ic-link>
  .
</p>

### Disability and difference

While some words are inoffensive in certain contexts, some words are offensive in any context and should always be avoided.

It's important to consider the context when using some terms. For example, "falling on deaf ears" can be interpreted as offensive.

### Examples of Inclusive Language

This is not an 'Intelligence Community approved' list of terms but explains the reasoning for language you encounter within the Design System.

| **This...**                  | **Instead of...**                                                                                                                                                                                               |
| 
---

# Automated accessibility testing

URL: https://design.sis.gov.uk/accessibility/testing/automated-testing
Subtitle: Use a variety of automated testing tools to capture as many accessibility issues as possible.


import { IcAlert } from "@ukic/react";

<IcAlert
  heading="For internal staff"
  message="Speak to your local accessibility expert for more information on automated accessibility testing."
  titleAbove
  variant="info"
/>

## Introduction

Automated accessibility testing is a fast and repeatable way to spot some accessibility issues.
These tools can be integrated into development and deployment workflows.

Automated accessibility testing is essential but only finds between 30&ndash;50% of accessibility problems.
The [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation) page explains why [manual testing](/accessibility/testing/manual-testing) is always required.

Use a variety of automated testing tools to capture as many accessibility issues as possible.

## Browser testing

Test web apps using tools and extensions for that browser and test in multiple browsers where possible.

You need to use at least two accessibility testing extensions because each one will highlight slightly different accessibility problems.

<p>
  The UK Government Digital Service (GDS) published an{" "}
  <ic-link
    target="_blank"
    href="https://alphagov.github.io/accessibility-tool-audit/"
    rel="noreferer noopener nofollow"
  >
    accessibility tool audit
  </ic-link>
  . The Design System recommends:
</p>
<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.deque.com/axe/axe-for-web/"
      rel="noreferer noopener nofollow"
    >
      axe DevTools
    </ic-link>
    .
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://accessibilityinsights.io/docs/en/web/overview"
      rel="noreferer noopener nofollow"
    >
      Accessibility Insights for Web
    </ic-link>
    .
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://wave.webaim.org/extension/"
      rel="noreferer noopener nofollow"
    >
      WAVE
    </ic-link>
    .
  </li>
</ul>

Most of these tools will highlight the WCAG or best practice accessibility problems on the page and tell you how to fix the issue.

Some of the tools will walk you through extra manual testing (like Accessibility Insights for Web), while others will conduct only a full automated test.

Browser tools can only check what is rendered on a web page when you run the test. To check multiple pages, dialogs or other temporary elements, trigger them before re-running the test.

## Linters

Tools called 'linters' analyse source code for a range of potential bugs. Some linters check for accessibility problems or have additional rulesets you can use.

Linters detect issues very early and can prevent certain accessibility problems from ever being implemented.

<p>
  The{" "}
  <ic-link target="" href="/components" rel="noreferer noopener nofollow">
    UI Kit
  </ic-link>{" "}
  uses the ESLint accessibility plugin{" "}
  <ic-link
    target="_blank"
    href="https://github.com/jsx-eslint/eslint-plugin-jsx-a11y"
    rel="noreferer noopener nofollow"
  >
    eslint-plugin-jsx-a11y
  </ic-link>
  . Equivalent ESLint plugins are available for Vue and Angular.
</p>

## Integration and unit testing

Integration testing is where parts of software are combined and tested together.

This is often done as part of a Continuous Integration and Continuous Delivery (CI/CD) workflow.

## End-to-end testing

End-to-end testing is where the entire app is tested from a user's perspective.

<p>
  <ic-link
    target="_blank"
    href="https://www.selenium.dev/"
    rel="noreferer noopener nofollow"
  >
    Selenium
  </ic-link>{" "}
  and{" "}
  <ic-link
    target="_blank"
    href="https://www.cypress.io/"
    rel="noreferer noopener nofollow"
  >
    Cypress
  </ic-link>{" "}
  are common tools for end-to-end testing. Both tools have axe-core wrappers:{" "}
  <ic-link
    target="_blank"
    href="https://github.com/dequelabs/axe-selenium-java"
    rel="noreferer noopener nofollow"
  >
    axe-selenium
  </ic-link>{" "}
  and{" "}
  <ic-link
    target="_blank"
    href="https://github.com/avanslaars/cypress-axe"
    rel="noreferer noopener nofollow"
  >
    cypress-axe
  </ic-link>
  , respectively.
</p>

Well configured end-to-end tests should also test multiple pages, dialogs and other temporary elements.

### axe-core

<p>
  <ic-link
    target="_blank"
    href="https://github.com/dequelabs/axe-core"
    rel="noreferer noopener nofollow"
  >
    axe-core
  </ic-link>{" "}
  can test pages on your app in the same way other unit or integration tests
  would.
</p>

<p>
  Axe-core is used by the browser-based extensions{" "}
  <ic-link
    target="_blank"
    href="https://www.deque.com/axe/axe-for-web/"
    rel="noreferer noopener nofollow"
  >
    axe DevTools
  </ic-link>{" "}
  and{" "}
  <ic-link
    target="_blank"
    href="https://accessibilityinsights.io/docs/en/web/overview"
    rel="noreferer noopener nofollow"
  >
    Accessibility Insights for Web
  </ic-link>
  .
</p>

### Pa11y

<p>
  <ic-link
    target="_blank"
    href="https://pa11y.org/"
    rel="noreferer noopener nofollow"
  >
    Pa11y
  </ic-link>{" "}
  runs accessibility tests via the command line or Node.js for automating
  testing.
</p>

<p>
  It uses axe-core as well as{" "}
  <ic-link
    target="_blank"
    href="http://squizlabs.github.io/HTML_CodeSniffer/"
    rel="noreferer noopener nofollow"
  >
    HTML CodeSniffer
  </ic-link>{" "}
  to look for potential accessibility issues.
</p>

<p>
  <ic-link
    target="_blank"
    href="https://github.com/pa11y/pa11y-ci"
    rel="noreferer noopener nofollow"
  >
    Pa11y CI
  </ic-link>{" "}
  is a CI-centric accessibility test runner, built using Pa11y.
</p>

### SonarQube

<p>
  Tools such as{" "}
  <ic-link
    target="_blank"
    href="https://www.sonarqube.org/"
    rel="noreferer noopener nofollow"
  >
    SonarQube
  </ic-link>{" "}
  , which provide code-quality assurance of your source code, also have a number
  of{" "}
  <ic-link
    target="_blank"
    href="https://rules.sonarsource.com/html/tag/accessibility"
    rel="noreferer noopener nofollow"
  >
    accessibility rules
  </ic-link>{" "}
  in SonarHTML.
</p>

SonarQube recommends using this alongside other [linting](#linters) such as ESLint.

<p>
  <ic-link
    target="_blank"
    href="https://community.sonarsource.com/t/how-to-scan-accessibility-issues-using-sonarqube/17307"
    rel="noreferer noopener nofollow"
  >
    Read more about how to scan accessibility issues with SonarQube
  </ic-link>
  .
</p>

---

# Section container

URL: https://design.sis.gov.uk/components/section-container
Status: BETA
Subtitle: Use the section container component to consistently align content within an app.


import { IcChip, IcSectionContainer } from "@ukic/react";
import image1 from "./images/Fig-1-section-containers-align-content.png";
import image2 from "./images/Fig-2-full-height-example.png";
import image3 from "./images/Fig-3-section-containers-align-centre.png";
import image4 from "./images/Fig-4-section-containers-align-left.png";
import image5 from "./images/Fig-5-section-containers-align-full-width.png";

## Introduction

When creating a page, use section containers to group content and align the margins with each other as well as other components.

Section containers are used in components to control alignment of their content. The following components use section containers with the specified alignments.

- [Top navigation](/components/top-navigation): Full-width section container.
- [Footer](/components/footer): Full-width section container.
- [Hero](/components/hero): Centred section container.
- [Page header](/components/page-header): Centred section container.

## Component demo

<ComponentPreview style={{ display: "contents" }}>
  <IcSectionContainer style={{ border: "1px solid black" }} aligned="center">
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
        gap: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
  <br />
  <IcSectionContainer style={{ border: "1px solid black" }}>
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
        gap: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
  <br />
  <IcSectionContainer
    style={{ border: "1px solid black" }}
    aligned="full-width"
  >
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
        gap: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
</ComponentPreview>

## When to use

Use a section container to group multiple elements and align them on a page. Use multiple section containers to ensure alignment between them all.

<DoDontCaution
  imageSrc={image1}
  imageAlt="A page showing section containers used to align content to the centre of the viewport."
  caption="Use section containers maintain alignment across a page."
/>

## When not to use

Avoid nesting section containers as it can be difficult to maintain alignment. Instead, use multiple section containers to align each group of content differently.

## Sizing

The size of the section container changes dependent on the size of the viewport. The margins and maximum width of the container are automatically set so that the content will respond to changes in the viewport.

Make a section container full height to remove the vertical padding and help align vertical content more easily.

<DoDontCaution
  imageSrc={image2}
  imageAlt="Two section containers. The first section container has vertical padding included at the top and bottom of the container, whereas the second section container is full-height and has no vertical padding."
  caption="Make section containers full height to remove vertical padding and easily space content vertically."
/>

## Layout and placement

Use the alignment properties of the section container to change how they align with the viewport.

Use centre alignment to position the section container in the centre of the viewport.

<DoDontCaution
  imageSrc={image3}
  imageAlt="An example of a page with three section containers with centred alignment appearing in the middle of the viewport."
  caption="Section containers using centred alignment."
/>

Use left alignment to position the section container to the left of the viewport.

<DoDontCaution
  imageSrc={image4}
  imageAlt="An example of a page with three section containers with left alignment appearing to the left of the viewport."
  caption="Section containers using left alignment."
/>

Use full-width alignment to make the section container span the full width of the viewport.

<DoDontCaution
  imageSrc={image5}
  imageAlt="An example of a page with three section containers with full-width alignment stretching to the edges of the viewport."
  caption="Section containers using full-width alignment."
/>

## Content

Group any combination of content within a section container. Align the content relative to the section container. By default content is aligned to the left, but overide this to create custom internal layouts, whilst having the section align automatically with other containers on the page.

## Future work on this component

- Add grids to section container to align internal content.

## Related components

- [Layout and spacing](/styles/layout-spacing)

---

# Tree view

URL: https://design.sis.gov.uk/components/tree-view/accessibility
Status: CANARY
Subtitle: Use the tree view component to display hierarchical data, or provide navigation, within a tree structure.


## Easy to use for everyone

The tree view items will focus top-down, including the child nodes of any expanded parent items.
Tree view items can be iterated over with the tab or up and down keys.
Enter and space keys can be used to expand the currently selected parent node, or to follow the link of the currently selected node.

## For Assistive Technology

Tree view items consist of a button and an extended text area. When using a screen reader, the title of the tree view will be declared first along with how many items it contains.
When focussed on a tree view item, screen readers will state its:

<ul>
  <li>Label</li>
  <li>Index</li>
  <li>State</li>
  <li>Number of nested items</li>
</ul>
Any tree view items which aren’t in focus will not be declared by the screen reader.

## Based on

The tree view component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/target-size-enhanced.html"
      rel="noreferer noopener nofollow"
    >
      WCAG - Target Size (Enhanced) (Level AAA)
    </ic-link>
    , W3C Web Accessibility Initiative, accessed February 2024.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://retool.com/blog/designing-a-ui-for-tree-data#keyboarding-and-accessibility"
      rel="noreferer noopener nofollow"
    >
      Retool - Designing a UI for Tree Data - Keyboarding and Accessibility
    </ic-link>
    , Retool, accessed August 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.a11y-collective.com/blog/icon-usability-and-accessibility/"
      rel="noreferer noopener nofollow"
    >
      A11Y - Improving Icon Usability and Accessibility
    </ic-link>
    , A11Y Collective, accessed February 2024.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Tree view

URL: https://design.sis.gov.uk/components/tree-view
Status: CANARY
Subtitle: Use the tree view component to display hierarchical data, or provide navigation, within a tree structure.


import { IcAlert, IcLink } from "@ukic/react";
import { IcTreeView, IcTreeItem } from "@ukic/canary-react";
import treeViewFig1 from "./images/fig-1-use-tree-view-for-navigation-options.png";
import treeViewFig2 from "./images/fig-2-use-tree-view-for-related-subsections.png";
import treeViewFig3 from "./images/fig-3-avoid-tree-view-for-dense-data-display.png";
import treeViewFig4 from "./images/fig-4-avoid-using-tree-view-with-limited-width.png";

<IcAlert
  heading="Canary component"
  variant="info"
  message="This component is new and its guidance will be updated over time."
/>

## Canary components

Canary components are unstable components that are released for testing purposes.

We value any feedback from users willing to try them in their applications.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

For more information on canary components, read our approach to [releases and versions](/get-started/releases-versions).

<p>
  Additional details on the props and events for this component can be found in
  the{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-web-components/?path=/docs/web-components-tree-view--docs"
    target="_blank"
  >
    Canary web components
  </IcLink>{" "}
  and{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-react/?path=/docs/react-components-tree-view--docs"
    target="_blank"
  >
    Canary React
  </IcLink>{" "}
  storybooks.
</p>

## Introduction

Tree views allow for a large array of items to be displayed compactly, providing quick navigation throughout an application.

<ComponentPreview>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu">
      <IcTreeItem label="Coffee" />
      <IcTreeItem label="Tea" />
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

## When to use

Use tree view to display further navigation options in the application, such as web pages following the home page.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={treeViewFig1}
    imageAlt="An example of using tree view to navigate throughout an app with nested pages."
    state="good"
    caption="Use tree view to navigate throughout hierarchical content."
  />
</DoubleDoDontCaution>

Use tree view for hierarchical navigation options, such as related subsections to the current page or topic.

Use the tree view title bar to provide further clarity on the context of your tree view items.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={treeViewFig2}
    imageAlt="An example of using tree view with a title bar to display related content."
    state="good"
    caption="Use tree view with icons and a title bar to provide context to your data."
  />
</DoubleDoDontCaution>

## When not to use

Avoid using tree view for dense or complicated data display. Consider if this could be displayed better with a [data table](/components/data-table) or a grid.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={treeViewFig3}
    imageAlt="An example of using tree view for dense data with several data types."
    state="bad"
    d
    caption="Don't use tree view for data that would benefit from being aligned vertically."
  />
</DoubleDoDontCaution>

Avoid using tree view in a drawer or section with restricted width, as the nested layers for child tree items require width to expand into.

Avoid using multiple tree views on the same web page; consider using tabs which navigate to separate sections.

## Colour

Use the dark or light theme to achieve colour contrast compliance when using tree view on different coloured backgrounds.

## Sizing and placement

Set the tree view’s vertical size dependent on the number of tree view items to be displayed. Large items take up more height so are good to use when there are fewer navigation options. Small items allow for denser and more compact options so are best to use in situations with many nested layers of navigation items.

The width of the tree view is set by the screen size or the container it is placed within. Tree view item text will wrap onto the following line if it overlaps the side of the container. Text can instead be truncated with a tooltip with the `truncateTreeItem` prop.

Place the tree view at either side of the page to ensure it can always be accessed independent of the screen content. Tree views should fill the whole height of the container they sit within.

<DoDontCaution
  imageSrc={treeViewFig4}
  imageAlt="An example of placing tree view within a width restricted container leading to truncation."
  state="bad"
  caption="Place tree view in a wide enough container to properly indent nested data."
/>

## Interaction behaviour

When a tree view item is selected, the link it points to will be loaded if provided. Any nested items will appear underneath the parent item.

Tree view items can scroll within the tree view if they surpass the height of the container.

---

# Tree view

URL: https://design.sis.gov.uk/components/tree-view/code
Status: CANARY
Subtitle: Use the tree view component to display hierarchical data, or provide navigation, within a tree structure.


import { IcTreeView, IcTreeItem } from "@ukic/canary-react";
import { IcTypography, SlottedSVG } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu">
  <ic-tree-item label="Coffee"></ic-tree-item>
  <ic-tree-item label="Tea"></ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu">
    <IcTreeItem label="Coffee" />
    <IcTreeItem label="Tea" />
    <IcTreeItem label="Hot chocolate" />
  </IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu">
      <IcTreeItem label="Coffee" />
      <IcTreeItem label="Tea" />
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

## Tree view details

{
  "props": [
    {
      "name": "appearance",
      "type": "\"dark\" | \"light\"",
      "complexType": {
        "original": "IcThemeForegroundNoDefault",
        "resolved": "\"dark\" | \"light\"",
        "references": {
          "IcThemeForegroundNoDefault": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForegroundNoDefault"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the tree view, e.g. dark, or light.",
      "docsTags": [],
      "default": "\"dark\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The heading of the tree view.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the tree view.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "truncateHeading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "truncate-heading",
      "reflectToAttr": false,
      "docs": "If `true`, the tree view heading will be truncated instead of text wrapping.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "truncateTreeItems",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "truncate-tree-items",
      "reflectToAttr": false,
      "docs": "If `true`, tree items will be truncated, unless they are individually overridden.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "heading",
      "docs": "Content is set as the tree view heading."
    },
    {
      "name": "icon",
      "docs": "Content is placed to the left of the heading."
    }
  ],
  "styles": [
    {
      "name": "--tree-view-width",
      "annotation": "prop",
      "docs": "Width of the tree view"
    }
  ],
  "events": [],
  "methods": [],
  "listeners": [
    {
      "event": "icTreeItemSelected",
      "capture": false,
      "passive": false
    }
  ]
}


## Tree item details

{
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the tree item appears in the disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "expanded",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "expanded",
      "reflectToAttr": false,
      "docs": "If `true`, the tree item appears in the expanded state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the tree item link points to. If set, the tree item will render as an \"a\" tag, otherwise it will render as a div.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label of the tree item.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selected",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "selected",
      "reflectToAttr": false,
      "docs": "If `true`, the tree item appears in the selected state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "truncateTreeItem",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "truncate-tree-item",
      "reflectToAttr": false,
      "docs": "If `true`, the tree item label will be truncated instead of text wrapping.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "icon",
      "docs": "Content is placed to the left of the label."
    },
    {
      "name": "label",
      "docs": "Content is set as the tree item label."
    },
    {
      "name": "router-item",
      "docs": "Handle routing by nesting your routes in this slot."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "icTreeItemSelected",
      "detail": "{ id: string; }",
      "bubbles": true,
      "complexType": {
        "original": "{ id: string }",
        "resolved": "{ id: string; }",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when tree item is selected.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `input`.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "keydown",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Nested levels

export const snippetsNested = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu">
  <ic-tree-item label="Coffee">
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte"></ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu">
  <IcTreeItem label="Coffee">
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte" />
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsNested}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu">
      <IcTreeItem label="Coffee">
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte" />
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Slotted icons

export const snippetsIcons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </svg>
  <ic-tree-item label="Coffee">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </svg>
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte">
      <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu">
  <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </SlottedSVG>
  <IcTreeItem label="Coffee">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </SlottedSVG>
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </IcTreeItem>
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIcons}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z" />
      </SlottedSVG>
      <IcTreeItem label="Coffee">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
        </SlottedSVG>
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte">
          <svg
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
          </svg>
        </IcTreeItem>
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu" size="small">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </svg>
  <ic-tree-item label="Coffee">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </svg>
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte">
      <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu" size="small">
  <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </SlottedSVG>
  <IcTreeItem label="Coffee">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </SlottedSVG>
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </IcTreeItem>
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSmall}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu" size="small">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z" />
      </SlottedSVG>
      <IcTreeItem label="Coffee">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
        </SlottedSVG>
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte">
          <svg
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
          </svg>
        </IcTreeItem>
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Large

export const snippetsLarge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu" size="large">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </svg>
  <ic-tree-item label="Coffee">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </svg>
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte">
      <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu" size="large">
  <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </SlottedSVG>
  <IcTreeItem label="Coffee">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </SlottedSVG>
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </IcTreeItem>
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLarge}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu" size="large">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z" />
      </SlottedSVG>
      <IcTreeItem label="Coffee">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
        </SlottedSVG>
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte">
          <svg
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
          </svg>
        </IcTreeItem>
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Light

export const snippetsLight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu" appearance="light">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </svg>
  <ic-tree-item label="Coffee">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </svg>
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte">
      <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `.dark-background {
      flex-direction: column; 
      gap: var(--ic-space-xs); 
      background: #333333;
    }
  </style>
    <body>
      <div class="dark-background">
        {shortCode}
      </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu" appearance="light">
  <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </SlottedSVG>
  <IcTreeItem label="Coffee">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </SlottedSVG>
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </SlottedSVG>
    </IcTreeItem>
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    display: "flex",
    flexDirection: "column", 
    gap: "var(--ic-space-xs)", 
    background: "#333333",
  },
});
const classes = useStyles();
return (
  <div className={classes.darkBackground}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    display: "flex",
    flexDirection: "column", 
    gap: "var(--ic-space-xs)", 
    background: "#333333",
  },
});
const classes = useStyles();
return (
  <div className={classes.darkBackground}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLight} style={{ background: "#333333" }}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu" appearance="light">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z" />
      </SlottedSVG>
      <IcTreeItem label="Coffee">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
        </SlottedSVG>
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
          </SlottedSVG>
        </IcTreeItem>
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Disabled tree items

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </svg>
  <ic-tree-item label="Coffee">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </svg>
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte" disabled="true">
      <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </svg>
    </ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai" disabled="true"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate" disabled="true"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu">
  <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </SlottedSVG>
  <IcTreeItem label="Coffee">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </SlottedSVG>
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte" disabled>
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
        />
      </SlottedSVG>
    </IcTreeItem>
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" disabled />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate" disabled />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabled}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z" />
      </SlottedSVG>
      <IcTreeItem label="Coffee">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
        </SlottedSVG>
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte" disabled>
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
          </SlottedSVG>
        </IcTreeItem>
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" disabled />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate" disabled />
    </IcTreeView>
  </div>
</ComponentPreview>

### Slotted content

export const snippetsSlotted = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view>
  <ic-typography variant="subtitle-large" slot="heading">Menu</ic-typography>
  <ic-tree-item>
    <ic-typography slot="label">Coffee</ic-typography>
  </ic-tree-item>
  <ic-tree-item label="Tea"></ic-tree-item>
  <ic-tree-item label="Hot chocolate"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView>
  <IcTypography variant="subtitle-large" slot="heading">Menu</IcTypography>
  <IcTreeItem>
    <IcTypography slot="label">Coffee</IcTypography>
  </IcTreeItem>
  <IcTreeItem label="Tea" />
  <IcTreeItem label="Hot chocolate" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSlotted}>
  <div style={{ width: "250px" }}>
    <IcTreeView>
      <IcTypography variant="subtitle-large" slot="heading">
        Menu
      </IcTypography>
      <IcTreeItem>
        <IcTypography slot="label">Coffee</IcTypography>
      </IcTreeItem>
      <IcTreeItem label="Tea" />
      <IcTreeItem label="Hot chocolate" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Truncated

export const snippetsTruncated = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu with nested options">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </svg>
  <ic-tree-item label="Coffee">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </svg>
    <ic-tree-item label="Americano"></ic-tree-item>
    <ic-tree-item label="Latte with extra milk and sugar"></ic-tree-item>
    <ic-tree-item label="Espresso"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Tea">
    <ic-tree-item label="Earl Grey"></ic-tree-item>
    <ic-tree-item label="Chai"></ic-tree-item>
  </ic-tree-item>
  <ic-tree-item label="Hot chocolate with marshmallows"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu with nested options">
  <SlottedSVG slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z"
    />
  </SlottedSVG>
  <IcTreeItem label="Coffee">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z"
      />
    </SlottedSVG>
    <IcTreeItem label="Americano" />
    <IcTreeItem label="Latte with extra milk and sugar" />
    <IcTreeItem label="Espresso" />
  </IcTreeItem>
  <IcTreeItem label="Tea">
    <IcTreeItem label="Earl Grey" />
    <IcTreeItem label="Chai" />
  </IcTreeItem>
  <IcTreeItem label="Hot chocolate with marshmallows" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsTruncated}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu with nested options">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z" />
      </SlottedSVG>
      <IcTreeItem label="Coffee">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path d="M13,9V3.5L18.5,9M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z" />
        </SlottedSVG>
        <IcTreeItem label="Americano" />
        <IcTreeItem label="Latte with extra milk and sugar" />
        <IcTreeItem label="Espresso" />
      </IcTreeItem>
      <IcTreeItem label="Tea">
        <IcTreeItem label="Earl Grey" />
        <IcTreeItem label="Chai" />
      </IcTreeItem>
      <IcTreeItem label="Hot chocolate with marshmallows" />
    </IcTreeView>
  </div>
</ComponentPreview>

### Link

export const snippetsLink = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tree-view heading="Menu">
  <ic-tree-item label="Coffee" href="#"></ic-tree-item>
  <ic-tree-item label="Tea" selected="true" href="#"></ic-tree-item>
  <ic-tree-item label="Hot chocolate" disabled="true" href="#"></ic-tree-item>
</ic-tree-view>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTreeView heading="Menu">
  <IcTreeItem label="Coffee" href="#" />
  <IcTreeItem label="Tea" selected href="#" />
  <IcTreeItem label="Hot chocolate" disabled href="#" />
</IcTreeView>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLink}>
  <div style={{ width: "250px" }}>
    <IcTreeView heading="Menu">
      <IcTreeItem label="Coffee" href="#" />
      <IcTreeItem label="Tea" selected href="#" />
      <IcTreeItem label="Hot chocolate" disabled href="#" />
    </IcTreeView>
  </div>
</ComponentPreview>

---

# Data table

URL: https://design.sis.gov.uk/components/data-table/code
Status: CANARY
Subtitle: Use a data table to organise and display large quantities of related data.


import { IcDataTable, IcDataTableTitleBar } from "@ukic/canary-react";
import {
  IcEmptyState,
  IcButton,
  IcLink,
  SlottedSVG,
  IcTypography,
} from "@ukic/react";
import { useRef } from "react";
import { mdiImage, mdiCakeVariantOutline } from "@mdi/js";
import {
  COLUMNS,
  DATA,
  LONG_COLUMNS,
  LONG_DATA,
  ROW_HEADER_COLUMNS,
  ROW_HEADER_DATA,
  COLUMN_OVERRIDES,
  ROW_OVERRIDES_DATA,
  CELL_OVERRIDES_DATA,
  COLUMNS_ELEMENTS,
  DATA_ELEMENTS,
  ICON_COLUMNS,
  ICON_DATA,
  LOADING_DATA,
  TRUNCATION_COLUMNS,
  TRUNCATION_DATA,
} from "./story-data";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Basic Table"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Basic" columns={columns} data={data} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcDataTable caption="Basic" columns={COLUMNS} data={DATA} />
</ComponentPreview>

## Data table details

{
  "props": [
    {
      "name": "caption",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "caption",
      "reflectToAttr": false,
      "docs": "The title for the table only visible to screen readers.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "columnHeaderTruncation",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "column-header-truncation",
      "reflectToAttr": false,
      "docs": "Determines whether the column header should be truncated and display a tooltip. Default is `false`.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "columns",
      "type": "IcDataTableColumnObject[]",
      "complexType": {
        "original": "IcDataTableColumnObject[]",
        "resolved": "IcDataTableColumnObject[]",
        "references": {
          "IcDataTableColumnObject": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableColumnObject"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The column headers for the table.",
      "docsTags": [],
      "values": [
        {
          "type": "IcDataTableColumnObject[]"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "data",
      "type": "IcDataTableDataType[]",
      "complexType": {
        "original": "IcDataTableDataType[]",
        "resolved": "IcDataTableDataType[]",
        "references": {
          "IcDataTableDataType": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDataType"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The row content for the table.",
      "docsTags": [],
      "values": [
        {
          "type": "IcDataTableDataType[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "density",
      "type": "\"default\" | \"dense\" | \"spacious\"",
      "complexType": {
        "original": "IcDataTableDensityOptions",
        "resolved": "\"default\" | \"dense\" | \"spacious\"",
        "references": {
          "IcDataTableDensityOptions": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableDensityOptions"
          }
        }
      },
      "mutable": true,
      "attr": "density",
      "reflectToAttr": false,
      "docs": "Set the density of the table including font and padding.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "dense",
          "type": "string"
        },
        {
          "value": "spacious",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableAutoSort",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-auto-sort",
      "reflectToAttr": false,
      "docs": "If `true`, the built in sort functionality will be disabled. For example, if rows will already be sorted from an external source.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "embedded",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "embedded",
      "reflectToAttr": false,
      "docs": "Applies a border to the table container.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "globalRowHeight",
      "type": "\"auto\" | number",
      "complexType": {
        "original": "IcDataTableRowHeights",
        "resolved": "\"auto\" | number",
        "references": {
          "IcDataTableRowHeights": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights"
          }
        }
      },
      "mutable": true,
      "attr": "global-row-height",
      "reflectToAttr": false,
      "docs": "Sets the row height on all rows in the table that aren't set using the `variableRowHeight` method.",
      "docsTags": [],
      "default": "\"auto\"",
      "values": [
        {
          "value": "auto",
          "type": "string"
        },
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "height",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "height",
      "reflectToAttr": false,
      "docs": "Sets the table height. Can be set to `auto` or a specific value in `px`, `rem`, or `%`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideColumnHeaders",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-column-headers",
      "reflectToAttr": false,
      "docs": "If `true`, column headers will not be visible.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "highlightSelectedRow",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "highlight-selected-row",
      "reflectToAttr": false,
      "docs": "If `true`, the selected row is highlighted using a background colour.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "When set to `true`, the full table will show a loading state, featuring a radial indicator.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingOptions",
      "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; label?: string; labelDuration?: number; max?: number; min?: number; progress?: number; showBackground?: boolean; overlay?: boolean; }",
      "complexType": {
        "original": "{\n    appearance?: IcThemeForegroundNoDefault;\n    description?: string;\n    label?: string;\n    labelDuration?: number;\n    max?: number;\n    min?: number;\n    progress?: number;\n    showBackground?: boolean;\n    overlay?: boolean;\n  }",
        "resolved": "{ appearance?: IcThemeForegroundNoDefault; description?: string; label?: string; labelDuration?: number; max?: number; min?: number; progress?: number; showBackground?: boolean; overlay?: boolean; }",
        "references": {
          "IcThemeForegroundNoDefault": {
            "location": "import",
            "path": "@ukic/web-components/dist/types/utils/types",
            "id": "../web-components/dist/types/utils/types.d.ts::IcThemeForegroundNoDefault"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Sets the props for the circular loading indicator used in the loading state.",
      "docsTags": [],
      "values": [
        {
          "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; label?: string; labelDuration?: number; max?: number; min?: number; progress?: number; showBackground?: boolean; overlay?: boolean; }"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "maxWidth",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "max-width",
      "reflectToAttr": false,
      "docs": "Sets the maximum width of the data table. Can be set in `px`, `rem`, or `%`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "minWidth",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "min-width",
      "reflectToAttr": false,
      "docs": "Sets the minimum width of the data table. Can be set in `px`, `rem`, or `%`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "minimumLoadingDisplayDuration",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "minimum-loading-display-duration",
      "reflectToAttr": false,
      "docs": "The minimum amount of time the `loading` state displays for before showing the data. Used to prevent flashing in the component.",
      "docsTags": [],
      "default": "1000",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "paginationBarOptions",
      "type": "IcPaginationBarOptions",
      "complexType": {
        "original": "IcPaginationBarOptions",
        "resolved": "IcPaginationBarOptions",
        "references": {
          "IcPaginationBarOptions": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcPaginationBarOptions"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Sets the props for the built-in pagination bar. If the `pagination-bar` slot is used then this prop is ignored.",
      "docsTags": [],
      "default": "{\n    alignment: \"right\",\n    appearance: \"default\",\n    hideAllFromItemsPerPage: false,\n    hideRangeLabel: false,\n    itemLabel: \"Item\",\n    itemsPerPageOptions: [\n      { label: \"10\", value: \"10\" },\n      { label: \"25\", value: \"25\" },\n      { label: \"50\", value: \"50\" },\n    ],\n    pageLabel: \"Page\",\n    rangeLabelType: \"page\",\n    selectedItemsPerPage: 10,\n    setToFirstPageOnPaginationChange: false,\n    showGoToPageControl: true,\n    showItemsPerPageControl: true,\n    type: \"simple\",\n  }",
      "values": [
        {
          "type": "IcPaginationBarOptions"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showPagination",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-pagination",
      "reflectToAttr": false,
      "docs": "If `true`, adds a pagination bar to the bottom of the table.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "sortOptions",
      "type": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string; }",
      "complexType": {
        "original": "{\n    sortOrders: IcDataTableSortOrderOptions[];\n    defaultColumn?: string;\n  }",
        "resolved": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string; }",
        "references": {
          "IcDataTableSortOrderOptions": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableSortOrderOptions"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Sets the order columns will be sorted in and allows for 'default' sorts to be added.",
      "docsTags": [],
      "default": "{\n    sortOrders: [\"unsorted\", \"ascending\", \"descending\"],\n    defaultColumn: \"\",\n  }",
      "values": [
        {
          "type": "{ sortOrders: IcDataTableSortOrderOptions[]; defaultColumn?: string; }"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "sortable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "sortable",
      "reflectToAttr": false,
      "docs": "If `true`, allows table columns to be sorted using applied sort buttons.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "stickyColumnHeaders",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "sticky-column-headers",
      "reflectToAttr": false,
      "docs": "If `true`, column headers will remain at the top of the table when scrolling vertically.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "stickyRowHeaders",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "sticky-row-headers",
      "reflectToAttr": false,
      "docs": "If `true`, row headers will remain to the left when scrolling horizontally.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "tableLayout",
      "type": "\"auto\" | \"fixed\"",
      "complexType": {
        "original": "\"fixed\" | \"auto\"",
        "resolved": "\"auto\" | \"fixed\"",
        "references": {}
      },
      "mutable": false,
      "attr": "table-layout",
      "reflectToAttr": false,
      "docs": "Sets the layout of the table",
      "docsTags": [],
      "default": "\"fixed\"",
      "values": [
        {
          "value": "auto",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "truncationPattern",
      "type": "\"show-hide\" | \"tooltip\"",
      "complexType": {
        "original": "IcDataTableTruncationTypes",
        "resolved": "\"show-hide\" | \"tooltip\"",
        "references": {
          "IcDataTableTruncationTypes": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableTruncationTypes"
          }
        }
      },
      "mutable": false,
      "attr": "truncation-pattern",
      "reflectToAttr": false,
      "docs": "Sets the method used to truncate long text in cells where textWrap is `false`. The `tooltip` truncation pattern allows the overflowing text to be seen in a tooltip. The `show-hide` truncation pattern allows the overflowing text to be shown and hidden using the ic-typography \"See more\"/\"See less\" buttons.",
      "docsTags": [],
      "values": [
        {
          "value": "show-hide",
          "type": "string"
        },
        {
          "value": "tooltip",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "updating",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "updating",
      "reflectToAttr": false,
      "docs": "If `true`, the table displays a linear loading indicator below the header row to indicate an updating state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "updatingOptions",
      "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; max?: number; min?: number; progress?: number; }",
      "complexType": {
        "original": "{\n    appearance?: IcThemeForegroundNoDefault;\n    description?: string;\n    max?: number;\n    min?: number;\n    progress?: number;\n  }",
        "resolved": "{ appearance?: IcThemeForegroundNoDefault; description?: string; max?: number; min?: number; progress?: number; }",
        "references": {
          "IcThemeForegroundNoDefault": {
            "location": "import",
            "path": "@ukic/web-components/dist/types/utils/types",
            "id": "../web-components/dist/types/utils/types.d.ts::IcThemeForegroundNoDefault"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Sets the props for the linear loading indicator used in the updating state.",
      "docsTags": [],
      "values": [
        {
          "type": "{ appearance?: IcThemeForegroundNoDefault; description?: string; max?: number; min?: number; progress?: number; }"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variableRowHeight",
      "type": "(params: { [key: string]: any; index: number; }) => IcDataTableRowHeights",
      "complexType": {
        "original": "(params: {\n    [key: string]: any;\n    index: number;\n  }) => IcDataTableRowHeights | null",
        "resolved": "(params: { [key: string]: any; index: number; }) => IcDataTableRowHeights",
        "references": {
          "IcDataTableRowHeights": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcDataTableRowHeights"
          }
        }
      },
      "mutable": true,
      "reflectToAttr": false,
      "docs": "Allows for custom setting of row heights on individual rows based on an individual value from the `data` prop and the row index.\nIf the function returns `null`, that row's height will be set to the `globalRowHeight` property.",
      "docsTags": [],
      "values": [
        {
          "type": "(params: { [key: string]: any; index: number; }) => IcDataTableRowHeights"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "width",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "width",
      "reflectToAttr": false,
      "docs": "Sets the table width. Can be set to `auto` or a specific value in `px`, `rem`, or `%`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "empty-state",
      "docs": "Content is slotted below the table header when there is no data and the table is not loading."
    },
    {
      "name": "pagination-bar",
      "docs": "A custom ic-pagination-bar can be slotted below the data to provide enhanced control over how the data is interacted with when being fetched externally."
    },
    {
      "name": "title-bar",
      "docs": "A custom ic-data-table-title-bar can be slotted above the column headers to display additional information about the table."
    },
    {
      "name": "{COLUMN_KEY}-column-icon",
      "docs": "The icon slot for a column header."
    },
    {
      "name": "{COLUMN_KEY}-{ROW_INDEX}[-icon]",
      "docs": "Each cell should have its own slot, named using the column tag and the row index, allowing for custom elements to be displayed. Include `-icon` at the end for that cell's icon slot."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "icRowHeightChange",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the `globalRowHeight` or `variableRowHeight` properties change in the data table.",
      "docsTags": []
    },
    {
      "event": "icSelectedRowChange",
      "detail": "object",
      "bubbles": true,
      "complexType": {
        "original": "object",
        "resolved": "object",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the selected row changes in the data table.",
      "docsTags": []
    },
    {
      "event": "icSortChange",
      "detail": "IcSortEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcSortEventDetail",
        "resolved": "IcSortEventDetail",
        "references": {
          "IcSortEventDetail": {
            "location": "import",
            "path": "./ic-data-table.types",
            "id": "src/components/ic-data-table/ic-data-table.types.tsx::IcSortEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a column sort button is clicked.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "resetRowHeights",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(rowHeight?: number | \"auto\") => Promise<void>",
        "parameters": [
          {
            "name": "rowHeight",
            "type": "number | \"auto\"",
            "docs": ""
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "resetRowHeights(rowHeight?: number | \"auto\") => Promise<void>",
      "parameters": [
        {
          "name": "rowHeight",
          "type": "number | \"auto\"",
          "docs": ""
        }
      ],
      "docs": "Resets the `globalRowHeight` prop to number or auto and sets the `variableRowHeight` prop to `null`.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "typographyTruncationExpandToggle",
      "capture": false,
      "passive": false
    },
    {
      "event": "icPageChange",
      "capture": false,
      "passive": false
    },
    {
      "event": "icItemsPerPageChange",
      "capture": false,
      "passive": false
    },
    {
      "event": "icTableDensityUpdate",
      "capture": false,
      "passive": false
    },
    {
      "event": "click",
      "target": "window",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Embedded

export const snippetsEmbedded = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Embedded Table" embedded="true"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Embedded"
  columns={columns}
  data={data}
  embedded
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsEmbedded}>
  <IcDataTable caption="Embedded" columns={COLUMNS} data={DATA} embedded />
</ComponentPreview>

### Dense

export const snippetsDense = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Dense Table" density="dense"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Dense"
  columns={columns}
  data={data}
  density="dense"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDense}>
  <IcDataTable caption="Dense" columns={COLUMNS} data={DATA} density="dense" />
</ComponentPreview>

### Spacious

export const snippetsSpacious = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Spacious Table" density="spacious"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Spacious"
  columns={columns}
  data={data}
  density="spacious"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSpacious}>
  <IcDataTable
    caption="Spacious"
    columns={COLUMNS}
    data={DATA}
    density="spacious"
  />
</ComponentPreview>

### Sticky column headers

export const snippetsStickyColumnHeaders = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table
  caption="Sticky header Table"
  sticky-column-headers="true"
></ic-data-table>`,
      long: `ic-data-table {
    height: 9.375rem;
  }
</style>
<body>
  {shortCode}
  <script>
    const dataTable = document.querySelector("ic-data-table");
    const long_columns = [
      {
        key: "employeeNumber",
        title: "Employee number",
        dataType: "number",
        columnAlignment: { horizontal: "left" },
      },
      {
        key: "name",
        title: "Name",
        dataType: "string",
      },
      {
        key: "age",
        title: "Age",
        dataType: "number",
      },
    ];
    const long_data = [
      {
        employeeNumber: 1,
        name: "Joe Bloggs",
        age: 30,
      },
      {
        employeeNumber: 2,
        name: "Sarah Jones",
        age: 28,
      },
      {
        employeeNumber: 3,
        name: "Mark Owens",
        age: 45,
      },
      {
        employeeNumber: 4,
        name: "Naomi Thomas",
        age: 32,
      },
      {
        employeeNumber: 5,
        name: "Luke Ashford",
        age: 18,
      },
      {
        employeeNumber: 6,
        name: "Dave Smith",
        age: 33,
      },
      {
        employeeNumber: 7,
        name: "Amy Fox",
        age: 27,
      },
      {
        employeeNumber: 8,
        name: "Mary Cooper",
        age: 31,
      },
      {
        employeeNumber: 9,
        name: "Alice Cole",
        age: 38,
      },
      {
        employeeNumber: 10,
        name: "Ben Fields",
        age: 40,
      },
      {
        employeeNumber: 11,
        name: "Pete Norton",
        age: 32,
      },
      {
        employeeNumber: 12,
        name: "Ashley Langford",
        age: 29,
      },
      {
        employeeNumber: 13,
        name: "Michael Hall",
        age: 35,
      },
      {
        employeeNumber: 14,
        name: "David Frank",
        age: 28,
      },
      {
        employeeNumber: 15,
        name: "Mary Lincoln",
        age: 23,
      },
      {
        employeeNumber: 16,
        name: "Will Barns",
        age: 36,
      },
      {
        employeeNumber: 17,
        name: "Elizabeth Long",
        age: 43,
      },
      {
        employeeNumber: 18,
        name: "Keith Jones",
        age: 37,
      },
      {
        employeeNumber: 19,
        name: "Olivia Brown",
        age: 19,
      },
      {
        employeeNumber: 20,
        name: "Tim Green",
        age: 50,
      },
    ];
    dataTable.columns = long_columns;
    dataTable.data = long_data;
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  className={classes.dataTable}
  caption="Sticky Column Headers"
  columns={long_columns}
  data={long_data}
  stickyColumnHeaders
  ref={dataTableEl}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: ` const dataTableEl = useRef(null);
const stickHeader = (sticky: boolean) => {
  dataTableEl.current.stickyColumnHeaders = sticky;
};
const long_columns: IcDataTableColumnObject[] = [
  {
    key: "employeeNumber",
    title: "Employee number",
    dataType: "number",
    columnAlignment: { horizontal: "left" },
  },
  {
    key: "name",
    title: "Name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const long_data = [
  {
    employeeNumber: 1,
    name: "Joe Bloggs",
    age: 30,
  },
  {
    employeeNumber: 2,
    name: "Sarah Jones",
    age: 28,
  },
  {
    employeeNumber: 3,
    name: "Mark Owens",
    age: 45,
  },
  {
    employeeNumber: 4,
    name: "Naomi Thomas",
    age: 32,
  },
  {
    employeeNumber: 5,
    name: "Luke Ashford",
    age: 18,
  },
  {
    employeeNumber: 6,
    name: "Dave Smith",
    age: 33,
  },
  {
    employeeNumber: 7,
    name: "Amy Fox",
    age: 27,
  },
  {
    employeeNumber: 8,
    name: "Mary Cooper",
    age: 31,
  },
  {
    employeeNumber: 9,
    name: "Alice Cole",
    age: 38,
  },
  {
    employeeNumber: 10,
    name: "Ben Fields",
    age: 40,
  },
  {
    employeeNumber: 11,
    name: "Pete Norton",
    age: 32,
  },
  {
    employeeNumber: 12,
    name: "Ashley Langford",
    age: 29,
  },
  {
    employeeNumber: 13,
    name: "Michael Hall",
    age: 35,
  },
  {
    employeeNumber: 14,
    name: "David Frank",
    age: 28,
  },
  {
    employeeNumber: 15,
    name: "Mary Lincoln",
    age: 23,
  },
  {
    employeeNumber: 16,
    name: "Will Barns",
    age: 36,
  },
  {
    employeeNumber: 17,
    name: "Elizabeth Long",
    age: 43,
  },
  {
    employeeNumber: 18,
    name: "Keith Jones",
    age: 37,
  },
  {
    employeeNumber: 19,
    name: "Olivia Brown",
    age: 19,
  },
  {
    employeeNumber: 20,
    name: "Tim Green",
    age: 50,
  },
];
const useStyles = createUseStyles({
  dataTable: {
    height: "18.75rem",
  },
});
const classes = useStyles();
return (
  <>
    {shortCode}
    <IcButton onClick={() => stickHeader(true)}>Stick Header</IcButton>
    <IcButton onClick={() => stickHeader(false)}>Unstick Header</IcButton>
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const dataTableEl = useRef(null);
const stickHeader = (sticky) => {
  dataTableEl.current.stickyColumnHeaders = sticky;
};
const long_columns = [
  {
    key: "employeeNumber",
    title: "Employee number",
    dataType: "number",
    columnAlignment: { horizontal: "left" },
  },
  {
    key: "name",
    title: "Name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const long_data = [
  {
    employeeNumber: 1,
    name: "Joe Bloggs",
    age: 30,
  },
  {
    employeeNumber: 2,
    name: "Sarah Jones",
    age: 28,
  },
  {
    employeeNumber: 3,
    name: "Mark Owens",
    age: 45,
  },
  {
    employeeNumber: 4,
    name: "Naomi Thomas",
    age: 32,
  },
  {
    employeeNumber: 5,
    name: "Luke Ashford",
    age: 18,
  },
  {
    employeeNumber: 6,
    name: "Dave Smith",
    age: 33,
  },
  {
    employeeNumber: 7,
    name: "Amy Fox",
    age: 27,
  },
  {
    employeeNumber: 8,
    name: "Mary Cooper",
    age: 31,
  },
  {
    employeeNumber: 9,
    name: "Alice Cole",
    age: 38,
  },
  {
    employeeNumber: 10,
    name: "Ben Fields",
    age: 40,
  },
  {
    employeeNumber: 11,
    name: "Pete Norton",
    age: 32,
  },
  {
    employeeNumber: 12,
    name: "Ashley Langford",
    age: 29,
  },
  {
    employeeNumber: 13,
    name: "Michael Hall",
    age: 35,
  },
  {
    employeeNumber: 14,
    name: "David Frank",
    age: 28,
  },
  {
    employeeNumber: 15,
    name: "Mary Lincoln",
    age: 23,
  },
  {
    employeeNumber: 16,
    name: "Will Barns",
    age: 36,
  },
  {
    employeeNumber: 17,
    name: "Elizabeth Long",
    age: 43,
  },
  {
    employeeNumber: 18,
    name: "Keith Jones",
    age: 37,
  },
  {
    employeeNumber: 19,
    name: "Olivia Brown",
    age: 19,
  },
  {
    employeeNumber: 20,
    name: "Tim Green",
    age: 50,
  },
];
const useStyles = createUseStyles({
  dataTable: {
    height: "18.75rem",
  },
});
const classes = useStyles();
return (
  <>
    {shortCode}
    <IcButton onClick={() => stickHeader(true)}>Stick Header</IcButton>
    <IcButton onClick={() => stickHeader(false)}>Unstick Header</IcButton>
  </>
)`,
        },
      ],
    },
  },
];

export const StickyColumnHeaders = () => {
  const dataTableEl = useRef(null);
  const stickHeader = (sticky) => {
    dataTableEl.current.stickyColumnHeaders = sticky;
  };
  return (
    <>
      <IcDataTable
        style={{ height: "18.75rem" }}
        ref={dataTableEl}
        caption="Sticky Column Headers"
        columns={LONG_COLUMNS}
        data={LONG_DATA}
      />
      <IcButton onClick={() => stickHeader(true)}>Stick Header</IcButton>
      <IcButton onClick={() => stickHeader(false)}>Unstick Header</IcButton>
    </>
  );
};

<ComponentPreview snippets={snippetsStickyColumnHeaders}>
  <StickyColumnHeaders />
</ComponentPreview>

### Row headers

export const snippetsRowHeaders = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Row headers"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "header",
      title: "Job type",
      dataType: "string",
    },
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
  ];
  const data = [
    {
      // Each data row requires a 'header' key/value pair like below
      header: { title: 'Employee' },
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
    caption="Row Headers"
    columns={columns}
    data={data}
  />`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsRowHeaders}>
  <IcDataTable
    caption="Row Headers"
    columns={ROW_HEADER_COLUMNS}
    data={ROW_HEADER_DATA}
  />
</ComponentPreview>

### Sortable

export const snippetsSortable = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Sort" sortable="true"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  dataTable.addEventListener("icSortChange", (event: CustomEvent) => {
    console.log("Sort changed", event.detail);
  });
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Sort"
  columns={columns}
  data={data}
  sortable
  onIcSortChange={(e) => console.log("Sort changed", e.detail)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSortable}>
  <IcDataTable
    caption="Sortable"
    columns={COLUMNS}
    data={DATA}
    sortable
    onIcSortChange={(e) => console.log("Sort changed", e.detail)}
  />
</ComponentPreview>

### Sort options

export const snippetsSortOptions = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Sort Options" sortable="true"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  dataTable.sortOptions = {
    sortOrders: ['descending', 'unsorted'],
    defaultColumn: 'firstName'
  };
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Sort Options"
  columns={columns}
  data={data}
  sortable
  sortOptions={{
    sortOrders: ["descending", "unsorted"],
    defaultColumn: "firstName",
  }}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSortOptions}>
  <IcDataTable
    caption="Sort Options"
    columns={COLUMNS}
    data={DATA}
    sortable
    sortOptions={{
      sortOrders: ["descending", "unsorted"],
      defaultColumn: "firstName",
    }}
  />
</ComponentPreview>

### Pagination

export const snippetsPagination = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Pagination" show-pagination="true"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  dataTable.paginationOptions = {
    itemsPerPage: [
      { label: "5", value: "5" },
      { label: "10", value: "10" },
      { label: "15", value: "15" },
    ],
    itemsPerPageControl: true,
  };
  const long_columns = [
    {
      key: "employeeNumber",
      title: "Employee number",
      dataType: "number",
      columnAlignment: { horizontal: "left" },
    },
    {
      key: "name",
      title: "Name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const long_data = [
    {
      employeeNumber: 1,
      name: "Joe Bloggs",
      age: 30,
    },
    {
      employeeNumber: 2,
      name: "Sarah Jones",
      age: 28,
    },
    {
      employeeNumber: 3,
      name: "Mark Owens",
      age: 45,
    },
    {
      employeeNumber: 4,
      name: "Naomi Thomas",
      age: 32,
    },
    {
      employeeNumber: 5,
      name: "Luke Ashford",
      age: 18,
    },
    {
      employeeNumber: 6,
      name: "Dave Smith",
      age: 33,
    },
    {
      employeeNumber: 7,
      name: "Amy Fox",
      age: 27,
    },
    {
      employeeNumber: 8,
      name: "Mary Cooper",
      age: 31,
    },
    {
      employeeNumber: 9,
      name: "Alice Cole",
      age: 38,
    },
    {
      employeeNumber: 10,
      name: "Ben Fields",
      age: 40,
    },
    {
      employeeNumber: 11,
      name: "Pete Norton",
      age: 32,
    },
    {
      employeeNumber: 12,
      name: "Ashley Langford",
      age: 29,
    },
    {
      employeeNumber: 13,
      name: "Michael Hall",
      age: 35,
    },
    {
      employeeNumber: 14,
      name: "David Frank",
      age: 28,
    },
    {
      employeeNumber: 15,
      name: "Mary Lincoln",
      age: 23,
    },
    {
      employeeNumber: 16,
      name: "Will Barns",
      age: 36,
    },
    {
      employeeNumber: 17,
      name: "Elizabeth Long",
      age: 43,
    },
    {
      employeeNumber: 18,
      name: "Keith Jones",
      age: 37,
    },
    {
      employeeNumber: 19,
      name: "Olivia Brown",
      age: 19,
    },
    {
      employeeNumber: 20,
      name: "Tim Green",
      age: 50,
    },
  ];
  dataTable.columns = long_columns;
  dataTable.data = long_data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Pagination"
  columns={long_columns}
  data={long_data}
  showPagination
  paginationOptions={{
    itemsPerPage: [
      { label: "5", value: "5" },
      { label: "10", value: "10" },
      { label: "15", value: "15" },
    ],
    itemsPerPageControl: true,
  }}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const long_columns: IcDataTableColumnObject[] = [
  {
    key: "employeeNumber",
    title: "Employee number",
    dataType: "number",
    columnAlignment: { horizontal: "left" },
  },
  {
    key: "name",
    title: "Name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const long_data = [
  {
    employeeNumber: 1,
    name: "Joe Bloggs",
    age: 30,
  },
  {
    employeeNumber: 2,
    name: "Sarah Jones",
    age: 28,
  },
  {
    employeeNumber: 3,
    name: "Mark Owens",
    age: 45,
  },
  {
    employeeNumber: 4,
    name: "Naomi Thomas",
    age: 32,
  },
  {
    employeeNumber: 5,
    name: "Luke Ashford",
    age: 18,
  },
  {
    employeeNumber: 6,
    name: "Dave Smith",
    age: 33,
  },
  {
    employeeNumber: 7,
    name: "Amy Fox",
    age: 27,
  },
  {
    employeeNumber: 8,
    name: "Mary Cooper",
    age: 31,
  },
  {
    employeeNumber: 9,
    name: "Alice Cole",
    age: 38,
  },
  {
    employeeNumber: 10,
    name: "Ben Fields",
    age: 40,
  },
  {
    employeeNumber: 11,
    name: "Pete Norton",
    age: 32,
  },
  {
    employeeNumber: 12,
    name: "Ashley Langford",
    age: 29,
  },
  {
    employeeNumber: 13,
    name: "Michael Hall",
    age: 35,
  },
  {
    employeeNumber: 14,
    name: "David Frank",
    age: 28,
  },
  {
    employeeNumber: 15,
    name: "Mary Lincoln",
    age: 23,
  },
  {
    employeeNumber: 16,
    name: "Will Barns",
    age: 36,
  },
  {
    employeeNumber: 17,
    name: "Elizabeth Long",
    age: 43,
  },
  {
    employeeNumber: 18,
    name: "Keith Jones",
    age: 37,
  },
  {
    employeeNumber: 19,
    name: "Olivia Brown",
    age: 19,
  },
  {
    employeeNumber: 20,
    name: "Tim Green",
    age: 50,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const long_columns = [
  {
    key: "employeeNumber",
    title: "Employee number",
    dataType: "number",
    columnAlignment: { horizontal: "left" },
  },
  {
    key: "name",
    title: "Name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const long_data = [
  {
    employeeNumber: 1,
    name: "Joe Bloggs",
    age: 30,
  },
  {
    employeeNumber: 2,
    name: "Sarah Jones",
    age: 28,
  },
  {
    employeeNumber: 3,
    name: "Mark Owens",
    age: 45,
  },
  {
    employeeNumber: 4,
    name: "Naomi Thomas",
    age: 32,
  },
  {
    employeeNumber: 5,
    name: "Luke Ashford",
    age: 18,
  },
  {
    employeeNumber: 6,
    name: "Dave Smith",
    age: 33,
  },
  {
    employeeNumber: 7,
    name: "Amy Fox",
    age: 27,
  },
  {
    employeeNumber: 8,
    name: "Mary Cooper",
    age: 31,
  },
  {
    employeeNumber: 9,
    name: "Alice Cole",
    age: 38,
  },
  {
    employeeNumber: 10,
    name: "Ben Fields",
    age: 40,
  },
  {
    employeeNumber: 11,
    name: "Pete Norton",
    age: 32,
  },
  {
    employeeNumber: 12,
    name: "Ashley Langford",
    age: 29,
  },
  {
    employeeNumber: 13,
    name: "Michael Hall",
    age: 35,
  },
  {
    employeeNumber: 14,
    name: "David Frank",
    age: 28,
  },
  {
    employeeNumber: 15,
    name: "Mary Lincoln",
    age: 23,
  },
  {
    employeeNumber: 16,
    name: "Will Barns",
    age: 36,
  },
  {
    employeeNumber: 17,
    name: "Elizabeth Long",
    age: 43,
  },
  {
    employeeNumber: 18,
    name: "Keith Jones",
    age: 37,
  },
  {
    employeeNumber: 19,
    name: "Olivia Brown",
    age: 19,
  },
  {
    employeeNumber: 20,
    name: "Tim Green",
    age: 50,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsPagination}>
  <IcDataTable
    caption="Pagination"
    columns={LONG_COLUMNS}
    data={LONG_DATA}
    showPagination
    paginationOptions={{
      itemsPerPage: [
        { label: "5", value: "5" },
        { label: "10", value: "10" },
        { label: "15", value: "15" },
      ],
      itemsPerPageControl: true,
    }}
  />
</ComponentPreview>

### Column overrides

export const snippetsColumnOverrides = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Column Overrides"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
      columnAlignment: { horizontal: 'center', vertical: 'middle'},
      emphasis: 'high',
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Column overrides"
  columns={columns}
  data={data}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
    columnAlignment: { horizontal: 'center', vertical: 'middle'},
    emphasis: 'high',
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
    columnAlignment: { horizontal: 'center', vertical: 'middle'},
    emphasis: 'high',
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsColumnOverrides}>
  <IcDataTable
    caption="Column overrides"
    columns={COLUMN_OVERRIDES}
    data={DATA}
  />
</ComponentPreview>

### Row overrides

export const snippetsRowOverrides = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Row Overrides"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "header",
      title: "Job Title",
      dataType: "string",
    },
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      header: { title: "Employee" },
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      header: { title: "Employee" },
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      header: { title: "Manager" },
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Row overrides"
  columns={columns}
  data={data}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "header",
    title: "Job Title",
    dataType: "string",
  },
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    header: { title: "Employee" },
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    header: { title: "Employee" },
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    header: { title: "Manager" },
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "header",
    title: "Job Title",
    dataType: "string",
  },
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    header: { title: "Employee" },
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    header: { title: "Employee" },
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    header: { title: "Manager" },
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsRowOverrides}>
  <IcDataTable
    caption="Row overrides"
    columns={ROW_HEADER_COLUMNS}
    data={ROW_OVERRIDES_DATA}
  />
</ComponentPreview>

### Cell overrides

export const snippetsCellOverrides = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Cell Overrides"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: {
        data: "Joe",
        cellAlignment: { horizontal: "center", vertical: "middle" },
        emphasis: "high",
      },
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Cell overrides"
  columns={columns}
  data={data}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: {
      data: "Joe",
      cellAlignment: { horizontal: "center", vertical: "middle" },
      emphasis: "high",
    },
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: {
      data: "Joe",
      cellAlignment: { horizontal: "center", vertical: "middle" },
      emphasis: "high",
    },
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCellOverrides}>
  <IcDataTable
    caption="Cell overrides"
    columns={COLUMNS}
    data={CELL_OVERRIDES_DATA}
  />
</ComponentPreview>

### Default Empty State

export const snippetsDefaultEmptyState = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Default Empty State"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  dataTable.columns = columns;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Default Empty State" columns={columns} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefaultEmptyState}>
  <IcDataTable caption="Default Empty State" columns={COLUMNS} />
</ComponentPreview>

### Slotted Empty State

export const snippetsSlottedEmptyState = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table id="data-table" caption="Slotted Empty State">
  <ic-empty-state
    aligned="left"
    heading="Data source error"
    body="Error loading new data"
  >
    <ic-button slot="actions">Retry</ic-button>
  </ic-empty-state>
</ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  dataTable.columns = columns;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Slotted Empty State"
  columns={columns}
>
  <IcEmptyState slot="empty-state" aligned="left" heading="Data source error" body="Error loading new data">
    <IcButton slot="actions">Retry</IcButton>
  </IcEmptyState>
</IcDataTable>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSlottedEmptyState}>
  <IcDataTable caption="Slotted Empty State" columns={COLUMNS}>
    <IcEmptyState
      slot="empty-state"
      aligned="left"
      heading="Data source error"
      body="Error loading new data"
    >
      <IcButton slot="actions">Retry</IcButton>
    </IcEmptyState>
  </IcDataTable>
</ComponentPreview>

### Loading state

export const snippetsLoadingState = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table id="data-table" caption="Loading State"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
    {
      firstName: "Naomi",
      lastName: "Thomas",
      age: 32,
    },
    {
      firstName: "Luke",
      lastName: "Ashford",
      age: 18,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
  dataTable.loading = true;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Loading state"
  columns={columns}
  data={data}
  loading
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
  {
    firstName: "Naomi",
    lastName: "Thomas",
    age: 32,
  },
  {
    firstName: "Luke",
    lastName: "Ashford",
    age: 18,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
{
    firstName: "Naomi",
    lastName: "Thomas",
    age: 32,
  },
  {
    firstName: "Luke",
    lastName: "Ashford",
    age: 18,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLoadingState}>
  <IcDataTable
    caption="Loading state"
    columns={COLUMNS}
    data={LOADING_DATA}
    loading
    style={{ height: "250px" }}
  />
</ComponentPreview>

### Updating state

export const snippetsUpdatingState = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table id="data-table" caption="Updating State"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Updating state"
  columns={columns}
  data={data}
  updating
  updatingOptions={{ progress: 30 }}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    // dataType types: "string" | "number" | "address" | "element" | "date";
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsUpdatingState}>
  <IcDataTable
    caption="Updating state"
    columns={COLUMNS}
    data={DATA}
    updating
    updatingOptions={{ progress: 30 }}
  />
</ComponentPreview>

### Links and Elements in data

export const snippetsElements = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Links and Elements in data"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
    {
      key: "actions",
      title: "Actions",
      dataType: "element",
      columnAlignment: { horizontal: "center" },
    },
  ];
  const data = [
    {
      firstName: {
        data: "Joe",
        href: "#",
      },
      lastName: "Bloggs",
      age: 30,
      actions: \`<ic-button variant='destructive' onClick='this.closest("tr").remove()'>Delete</ic-button>\`,
    },
    {
      firstName: 'Sarah',
      lastName: 'Smith',
      age: 28,
      actions: \`<ic-button variant='destructive' onClick='this.closest("tr").remove()'>Delete</ic-button>\`,
    },
    {
      firstName: 'Mark',
      lastName: 'Owens',
      age: 45,
      actions: \`<ic-button variant='destructive' onClick='this.closest("tr").remove()'>Delete</ic-button>\`,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Links and Elements in data"
  columns={columns}
  data={data}
>
  {data.map((_, index) => (
    <IcButton
      key={index}
      slot={\`actions-\${index}\`}
      variant="destructive"
      onClick={() => _.closest('Delete')}
    >
      Delete
    </IcButton>
  ))}
</IcDataTable>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
  {
    key: "actions",
    title: "Actions",
    dataType: "element",
    columnAlignment: { horizontal: "center" },
  },
];
const data = [
  {
    firstName: {
      data: "Joe",
      href: "#",
    },
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: 'Sarah',
    lastName: 'Smith',
    age: 28,
  },
  {
    firstName: 'Mark',
    lastName: 'Owens',
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
  {
    key: "actions",
    title: "Actions",
    dataType: "element",
    columnAlignment: { horizontal: "center" },
  },
];
const data = [
  {
    firstName: {
      data: "Joe",
      href: "#",
    },
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: 'Sarah',
    lastName: 'Smith',
    age: 28,
  },
  {
    firstName: 'Mark',
    lastName: 'Owens',
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsElements}>
  <IcDataTable
    caption="Links and Elements in data"
    columns={COLUMNS_ELEMENTS}
    data={DATA_ELEMENTS}
  >
    {DATA_ELEMENTS.map((_, index) => (
      <IcButton
        // eslint-disable-next-line react/no-array-index-key
        key={`actions-${index}`}
        slot={`actions-${index}`}
        variant="destructive"
        onClick={() => console.log("Delete")}
      >
        Delete
      </IcButton>
    ))}
  </IcDataTable>
</ComponentPreview>

### Custom icons

export const snippetsCustomIcons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table id="data-table" caption="Custom Icons">
  <svg
    slot="age-column-icon"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
  >
    <path
      d="M12 6C13.11 6 14 5.1 14 4C14 3.62 13.9 3.27 13.71 2.97L12 0L10.29 2.97C10.1 3.27 10 3.62 10 4C10 5.1 10.9 6 12 6M18 9H13V7H11V9H6C4.34 9 3 10.34 3 12V21C3 21.55 3.45 22 4 22H20C20.55 22 21 21.55 21 21V12C21 10.34 19.66 9 18 9M19 20H5V17C5.9 17 6.76 16.63 7.4 16L8.5 14.92L9.56 16C10.87 17.3 13.15 17.29 14.45 16L15.53 14.92L16.6 16C17.24 16.63 18.1 17 19 17V20M19 15.5C18.5 15.5 18 15.3 17.65 14.93L15.5 12.8L13.38 14.93C12.64 15.67 11.35 15.67 10.61 14.93L8.5 12.8L6.34 14.93C6 15.29 5.5 15.5 5 15.5V12C5 11.45 5.45 11 6 11H18C18.55 11 19 11.45 19 12V15.5Z"
    />
  </svg>
</ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const accountSVG = \`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z" /></svg>\`;
  const columns = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
      cellAlignment: "right",
      columnAlignment: { horizontal: "right", vertical: "middle" },
      icon: {
        icon: \`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" /></svg>\`,
        onAllCells: true,
        hideOnHeader: true,
      },
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
      cellAlignment: "center",
      columnAlignment: { horizontal: "center", vertical: "bottom" },
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: {
        data: "Joe",
        icon: accountSVG,
      },
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: {
        data: "Mark",
        icon: accountSVG,
      },
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Custom icons" columns={columns} data={data}>
  <SlottedSVG slot="age-column-icon" path={mdiCakeVariantOutline} />
</IcDataTable>`,
      long: [
        {
          language: "Typescript",
          snippet: `const accountSVG = \`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z" /></svg>\`;
const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
    cellAlignment: "right",
    columnAlignment: { horizontal: "right", vertical: "middle" },
    icon: {
      icon: \`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" /></svg>\`,
      onAllCells: true,
      hideOnHeader: true,
    },
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
    cellAlignment: "center",
    columnAlignment: { horizontal: "center", vertical: "bottom" },
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: {
      data: "Joe",
      icon: accountSVG,
    },
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: {
      data: "Mark",
      icon: accountSVG,
    },
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const accountSVG = \`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z" /></svg>\`;
const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
    cellAlignment: "right",
    columnAlignment: { horizontal: "right", vertical: "middle" },
    icon: {
      icon: \`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" /></svg>\`,
      onAllCells: true,
      hideOnHeader: true,
    },
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
    cellAlignment: "center",
    columnAlignment: { horizontal: "center", vertical: "bottom" },
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: {
      data: "Joe",
      icon: accountSVG,
    },
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: {
      data: "Mark",
      icon: accountSVG,
    },
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCustomIcons}>
  <IcDataTable caption="Custom icons" columns={ICON_COLUMNS} data={ICON_DATA}>
    <SlottedSVG slot="age-column-icon" path={mdiCakeVariantOutline} />
  </IcDataTable>
</ComponentPreview>

### Custom row heights

export const snippetsRowHeights = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table id="data-table" caption="Custom Row Heights"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
  dataTable.globalRowHeight = 80;
  dataTable.variableRowHeight = ({ firstName, lastName }) => firstName === "Joe" || lastName === "Owens" ? 200 : null;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable
  caption="Custom Row Heights"
  columns={columns}
  data={data}
  globalRowHeight={80}
  variableRowHeight={rowHeightFunc}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
const rowHeightFunc = ({ firstName, lastName }) => firstName === "Joe" || lastName === "Owens" ? 200 : null;
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
const rowHeightFunc = ({ firstName, lastName }) => firstName === "Joe" || lastName === "Owens" ? 200 : null;
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const rowHeightFunc = ({ firstName, lastName }) =>
  firstName === "Joe" || lastName === "Owens" ? 200 : null;

<ComponentPreview snippets={snippetsRowHeights}>
  <IcDataTable
    caption="Custom Row Heights"
    columns={COLUMNS}
    data={DATA}
    globalRowHeight={80}
    variableRowHeight={rowHeightFunc}
  />
</ComponentPreview>

### Custom title bar

export const snippetsTitleBar = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table id="data-table" caption="Custom Title Bar">
  <ic-data-table-title-bar
    description="Data table description that describes the purpose of the table."
    metadata="128 items | 32gb | Updated: 01/02/03"
  >
    <ic-button slot="primary-action">Primary</ic-button>
    <ic-button slot="custom-actions" variant="icon" aria-label="Icon 1">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 -960 960 960"
        width="24"
      >
        <path
          d="M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z"
        />
      </svg>
    </ic-button>
    <ic-button slot="custom-actions" variant="icon" aria-label="Icon 2">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 -960 960 960"
        width="24"
      >
        <path
          d="M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z"
        />
      </svg>
    </ic-button>
    <ic-button slot="custom-actions" variant="icon" aria-label="Icon 3">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 -960 960 960"
        width="24"
      >
        <path
          d="M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h600q24 0 42 18t18 42v600q0 24-18 42t-42 18H180Zm0-60h600v-600H180v600Zm56-97h489L578-473 446-302l-93-127-117 152Zm-56 97v-600 600Z"
        />
      </svg>
    </ic-button>
    <ic-typography slot="description" variant="body">
      <p>
        This is some text and{' '}
        <ic-link href="#">this is an inline link</ic-link> within the text.
      </p>
    </ic-typography>
  </ic-data-table-title-bar>
</ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "age",
      title: "Age",
      dataType: "number",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      age: 30,
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      age: 28,
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      age: 45,
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Custom Title Bar" columns={columns} data={data}>
  <IcDataTableTitleBar
    slot="title-bar"
    description="Data table description that describes the purpose of the table."
    metadata="128 items | 32gb | Updated: 01/02/03"
  >
    <IcButton slot="primary-action">Primary</IcButton>
    <IcButton slot="custom-actions" variant="icon" aria-label="Icon 1">
      <SlottedSVG path={mdiImage} viewBox="0 0 24 24" />
    </IcButton>
    <IcButton slot="custom-actions" variant="icon" aria-label="Icon 2">
      <SlottedSVG path={mdiImage} viewBox="0 0 24 24" />
    </IcButton>
    <IcButton slot="custom-actions" variant="icon" aria-label="Icon 3">
      <SlottedSVG path={mdiImage} viewBox="0 0 24 24" />
    </IcButton>
    <IcTypography slot="description" variant="body">
      <p>
        This is some text and{' '}
        <IcLink href="#">this is an inline link</IcLink> within the text.
      </p>
    </IcTypography>
  </IcDataTableTitleBar>
</IcDataTable>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "age",
    title: "Age",
    dataType: "number",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    age: 30,
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    age: 28,
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    age: 45,
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsTitleBar}>
  <IcDataTable caption="Custom Title Bar" columns={COLUMNS} data={DATA}>
    <IcDataTableTitleBar
      slot="title-bar"
      description="Data table description that describes the purpose of the table."
      metadata="128 items | 32gb | Updated: 01/02/03"
    >
      <IcButton slot="primary-action">Primary</IcButton>
      <IcButton slot="custom-actions" variant="icon" aria-label="Icon 1">
        <SlottedSVG path={mdiImage} viewBox="0 0 24 24" />
      </IcButton>
      <IcButton slot="custom-actions" variant="icon" aria-label="Icon 2">
        <SlottedSVG path={mdiImage} viewBox="0 0 24 24" />
      </IcButton>
      <IcButton slot="custom-actions" variant="icon" aria-label="Icon 3">
        <SlottedSVG path={mdiImage} viewBox="0 0 24 24" />
      </IcButton>
      <IcTypography slot="description" variant="body">
        <p>
          This is some text and <IcLink href="#">this is an inline link</IcLink>{" "}
          within the text.
        </p>
      </IcTypography>
    </IcDataTableTitleBar>
  </IcDataTable>
</ComponentPreview>

### Truncation - tooltip

export const snippetsTooltip = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Data table truncation - tooltip" truncation-pattern="tooltip"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      jobTitle: "Senior Software Developer, Site Reliability Engineering",
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      jobTitle: "Junior developer",
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      jobTitle: "Team lead",
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
  dataTable.globalRowHeight = 40;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Data table truncation - tooltip" columns={columns} data={data} truncationPattern="tooltip" globalRowHeight={40}/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
    },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    jobTitle: "Senior Software Developer, Site Reliability Engineering",
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    jobTitle: "Junior developer",
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    jobTitle: "Team lead",
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "jobTitle",
    title: "Job title",
    dataType: "string",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    jobTitle: "Senior Software Developer, Site Reliability Engineering",
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    jobTitle: "Junior developer",
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    jobTitle: "Team lead",
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsTooltip}>
  <IcDataTable
    caption="Data table truncation - tooltip"
    columns={TRUNCATION_COLUMNS}
    data={TRUNCATION_DATA}
    truncationPattern="tooltip"
    globalRowHeight={40}
  />
</ComponentPreview>

### Truncation - show/hide

export const snippetsShowHide = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Data table truncation - show/hide" truncation-pattern="show-hide"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      jobTitle: "Senior Software Developer, Site Reliability Engineering",
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      jobTitle: "Junior developer",
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      jobTitle: "Team lead",
    },
  ];
  dataTable.columns = columns;
  dataTable.data = data;
  dataTable.globalRowHeight = 40;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Data table truncation - show/hide" columns={columns} data={data} truncationPattern="show-hide" globalRowHeight={40}/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
    },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    jobTitle: "Senior Software Developer, Site Reliability Engineering",
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    jobTitle: "Junior developer",
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    jobTitle: "Team lead",
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
    key: "firstName",
    title: "First name",
    dataType: "string",
  },
  {
    key: "lastName",
    title: "Last name",
    dataType: "string",
  },
  {
    key: "jobTitle",
    title: "Job title",
    dataType: "string",
  },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    jobTitle: "Senior Software Developer, Site Reliability Engineering",
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    jobTitle: "Junior developer",
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    jobTitle: "Team lead",
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsShowHide}>
  <IcDataTable
    caption="Data table truncation - show/hide"
    columns={TRUNCATION_COLUMNS}
    data={TRUNCATION_DATA}
    truncationPattern="show-hide"
    globalRowHeight={40}
  />
</ComponentPreview>

### Text wrap

export const snippetsTextWrap = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-table caption="Data table text wrap"></ic-data-table>`,
      long: `{shortCode}
<script>
  const dataTable = document.querySelector("ic-data-table");
  const columns = [
    {
      key: "firstName",
      title: "First name",
      // dataType types: "string" | "number" | "address" | "element" | "date";
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
      textWrap: true,
    },
  ];
  const data = [
    {
      firstName: "Joe",
      lastName: "Bloggs",
      jobTitle: "Senior Software Developer, Site Reliability Engineering",
    },
    {
      firstName: "Sarah",
      lastName: "Smith",
      jobTitle: "Junior developer",
    },
    {
      firstName: "Mark",
      lastName: "Owens",
      jobTitle: "Team lead",
    },
  ];
  dataTable.globalRowHeight = 40;
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataTable caption="Data table text wrap" columns={columns} data={data} globalRowHeight={40}/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const columns: IcDataTableColumnObject[] = [
    {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
      textWrap: true,
    },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    jobTitle: "Senior Software Developer, Site Reliability Engineering",
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    jobTitle: "Junior developer",
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    jobTitle: "Team lead",
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const columns = [
  {
      key: "firstName",
      title: "First name",
      dataType: "string",
    },
    {
      key: "lastName",
      title: "Last name",
      dataType: "string",
    },
    {
      key: "jobTitle",
      title: "Job title",
      dataType: "string",
      textWrap: true,
    },
];
const data = [
  {
    firstName: "Joe",
    lastName: "Bloggs",
    jobTitle: "Senior Software Developer, Site Reliability Engineering",
  },
  {
    firstName: "Sarah",
    lastName: "Smith",
    jobTitle: "Junior developer",
  },
  {
    firstName: "Mark",
    lastName: "Owens",
    jobTitle: "Team lead",
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsTextWrap}>
  <IcDataTable
    caption="Data table text wrap"
    columns={TRUNCATION_COLUMNS}
    data={TRUNCATION_DATA}
    globalRowHeight={40}
  />
</ComponentPreview>

---

# Select

URL: https://design.sis.gov.uk/components/select/code
Status: BETA
Subtitle: Select allows users to select one or more values from a list of options.


import { IcSelect } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option..." 
  label="What is your favourite coffee?"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect
  placeholder="Select an option..." 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExample = () => (
  <IcSelect
    placeholder="Select an option..."
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippets}>
  <SelectExample />
</ComponentPreview>

## Select details

{
  "props": [
    {
      "name": "charactersUntilSuggestions",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "characters-until-suggestions",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore."
        }
      ],
      "default": "0",
      "deprecation": "This prop should not be used anymore.",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFilter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-filter",
      "reflectToAttr": false,
      "docs": "If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": true,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "emptyOptionListText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "empty-option-list-text",
      "reflectToAttr": false,
      "docs": "The text displayed when there are no options in the option list.",
      "docsTags": [],
      "default": "\"No results found\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "form",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "form",
      "reflectToAttr": false,
      "docs": "The <form> element to associate the select with.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formaction",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formaction",
      "reflectToAttr": false,
      "docs": "The URL that processes the information submitted by the select. It overrides the action attribute of the select's form owner. Does nothing if there is no form owner.\nThis prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formenctype",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formenctype",
      "reflectToAttr": false,
      "docs": "The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formmethod",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formmethod",
      "reflectToAttr": false,
      "docs": "The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formnovalidate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "formnovalidate",
      "reflectToAttr": false,
      "docs": "If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formtarget",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formtarget",
      "reflectToAttr": false,
      "docs": "The place to display the response from submitting the form. It overrides the target attribute of the select's form owner.\nThis prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "includeDescriptionsInSearch",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "include-descriptions-in-search",
      "reflectToAttr": false,
      "docs": "If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "includeGroupTitlesInSearch",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "include-group-titles-in-search",
      "reflectToAttr": false,
      "docs": "If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the select.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "If `true`, the loading state will be triggered when fetching options asynchronously.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingErrorLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "loading-error-label",
      "reflectToAttr": false,
      "docs": "The message displayed when external loading times out.",
      "docsTags": [],
      "default": "\"Loading Error\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "loading-label",
      "reflectToAttr": false,
      "docs": "The message displayed whilst the options are being loaded externally.",
      "docsTags": [],
      "default": "\"Loading...\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "options",
      "type": "IcMenuOption[]",
      "complexType": {
        "original": "IcMenuOption[]",
        "resolved": "IcMenuOption[]",
        "references": {
          "IcMenuOption": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcMenuOption"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The possible selection options.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "IcMenuOption[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "The placeholder value to be displayed.",
      "docsTags": [],
      "default": "\"Select an option\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": false,
      "docs": "If `true`, the readonly state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the select will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "searchMatchPosition",
      "type": "\"anywhere\" | \"start\"",
      "complexType": {
        "original": "IcSearchMatchPositions",
        "resolved": "\"anywhere\" | \"start\"",
        "references": {
          "IcSearchMatchPositions": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSearchMatchPositions"
          }
        }
      },
      "mutable": false,
      "attr": "search-match-position",
      "reflectToAttr": false,
      "docs": "Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.",
      "docsTags": [],
      "default": "\"anywhere\"",
      "values": [
        {
          "value": "anywhere",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "searchable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "searchable",
      "reflectToAttr": false,
      "docs": "If `true`, a searchable variant of the select will be displayed which can be typed in to filter options.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selectOnEnter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "select-on-enter",
      "reflectToAttr": false,
      "docs": "If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showClearButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-clear-button",
      "reflectToAttr": false,
      "docs": "If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the select component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "timeout",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "timeout",
      "reflectToAttr": false,
      "docs": "If using external filtering, set a timeout for when loading takes too long.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": false,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation status - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the select, reflected by the value of the currently selected option. For the searchable variant, the value is also reflected by the user input.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "icon",
      "docs": "Content will be placed to the left of the select text input."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-menu",
      "annotation": "prop",
      "docs": "z-index of select menu"
    },
    {
      "name": "--input-width",
      "annotation": "prop",
      "docs": "Width of the input field"
    }
  ],
  "events": [
    {
      "event": "icBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select loses focus.",
      "docsTags": []
    },
    {
      "event": "icChange",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value changes.",
      "docsTags": []
    },
    {
      "event": "icClear",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the clear button is clicked.",
      "docsTags": []
    },
    {
      "event": "icClose",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select options menu is closed.",
      "docsTags": []
    },
    {
      "event": "icFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select gains focus.",
      "docsTags": []
    },
    {
      "event": "icInput",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a keyboard input occurred.",
      "docsTags": []
    },
    {
      "event": "icOpen",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select options menu is opened.",
      "docsTags": []
    },
    {
      "event": "icOptionSelect",
      "detail": "IcOptionSelectEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcOptionSelectEventDetail",
        "resolved": "IcOptionSelectEventDetail",
        "references": {
          "IcOptionSelectEventDetail": {
            "location": "import",
            "path": "../ic-menu/ic-menu.types",
            "id": "src/components/ic-menu/ic-menu.types.ts::IcOptionSelectEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when an option is highlighted within the menu.\nHighlighting a menu item will also trigger an `icChange/onIcChange` due to the value being updated.",
      "docsTags": []
    },
    {
      "event": "icRetryLoad",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the 'retry loading' button is clicked for a searchable variant.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the input box.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Variants

### With clear button, descriptions, helper text and custom placeholder

export const snippetsWithExtras = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  label="What is your favourite coffee?" 
  placeholder="Select an option..." 
  helper-text="Select one option from the list" 
  show-clear-button="true" 
  searchable="true"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Cappuccino", value: "cappuccino", description: "Coffee frothed up with pressurised steam" },
    { label: "Americano", value: "americano", description: "Espresso coffee diluted with hot water" },
    { label: "Mocha", value: "mocha", description: "Coffee with chocolate" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  label="What is your favourite coffee?"
  options={options}
  placeholder="Select an option…"
  helperText="Select one option from the list"
  showClearButton
  searchable
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino", description: "Coffee frothed up with pressurised steam" },
  { label: "Americano", value: "americano", description: "Espresso coffee diluted with hot water" },
  { label: "Mocha", value: "mocha", description: "Coffee with chocolate" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino", description: "Coffee frothed up with pressurised steam" },
  { label: "Americano", value: "americano", description: "Espresso coffee diluted with hot water" },
  { label: "Mocha", value: "mocha", description: "Coffee with chocolate" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleWithExtras = () => (
  <IcSelect
    label="What is your favourite coffee?"
    options={[
      {
        label: "Cappuccino",
        value: "cappuccino",
        description: "Coffee frothed up with pressurised steam",
      },
      {
        label: "Americano",
        value: "americano",
        description: "Espresso coffee diluted with hot water",
      },
      {
        label: "Mocha",
        value: "mocha",
        description: "Coffee with chocolate",
      },
    ]}
    placeholder="Select an option…"
    helperText="Select one option from the list"
    showClearButton
    searchable
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsWithExtras}>
  <SelectExampleWithExtras />
</ComponentPreview>

### Disabled

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?" 
  disabled="true"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  options={options}
  disabled
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleDisabled = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
    disabled
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsDisabled}>
  <SelectExampleDisabled />
</ComponentPreview>

### Options disabled

export const snippetsOptionDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano", disabled: true },
    { label: "Mocha", value: "mocha" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano", disabled: true },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano", disabled: true },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleOptionsDisabled = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano", disabled: true },
      { label: "Mocha", value: "mocha" },
    ]}
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsOptionDisabled}>
  <SelectExampleOptionsDisabled />
</ComponentPreview>

### With icon

export const snippetsWithIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  label="What is your favourite coffee?" 
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
  </svg>
</ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Cappuccino", value: "cappuccino", description: "Coffee frothed up with pressurised steam" },
    { label: "Americano", value: "americano", description: "Espresso coffee diluted with hot water" },
    { label: "Mocha", value: "mocha", description: "Coffee with chocolate" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
  </SlottedSVG>
</IcSelect>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino", description: "Coffee frothed up with pressurised steam" },
  { label: "Americano", value: "americano", description: "Espresso coffee diluted with hot water" },
  { label: "Mocha", value: "mocha", description: "Coffee with chocolate" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Cappuccino", value: "cappuccino", description: "Coffee frothed up with pressurised steam" },
  { label: "Americano", value: "americano", description: "Espresso coffee diluted with hot water" },
  { label: "Mocha", value: "mocha", description: "Coffee with chocolate" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleWithIcon = () => (
  <IcSelect
    label="What is your favourite coffee?"
    options={[
      {
        label: "Cappuccino",
        value: "cappuccino",
        description: "Coffee frothed up with pressurised steam",
      },
      {
        label: "Americano",
        value: "americano",
        description: "Espresso coffee diluted with hot water",
      },
      {
        label: "Mocha",
        value: "mocha",
        description: "Coffee with chocolate",
      },
    ]}
    onIcChange={(event) => console.log(event.detail.value)}
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
    </svg>
  </IcSelect>
);

<ComponentPreview snippets={snippetsWithIcon}>
  <SelectExampleWithIcon />
</ComponentPreview>

### Size small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  label="What is your favourite coffee?" 
  size="small"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  size="small"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleSmall = () => (
  <IcSelect
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
    onIcChange={(event) => console.log(event.detail.value)}
    size="small"
  />
);

<ComponentPreview snippets={snippetsSmall}>
  <SelectExampleSmall />
</ComponentPreview>

### Hidden label

export const snippetsHideLabel = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?" 
  hide-label="true"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  options={options}
  hideLabel
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleHideLabel = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
    ]}
    hideLabel
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsHideLabel}>
  <SelectExampleHideLabel />
</ComponentPreview>

### Groups

export const snippetsGroups = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    {
      label: "Fancy",
      children: [
        { label: "Cappuccino", value: "Cap" },
        { label: "Flat white", value: "Flat" },
      ],
    },
    {
      label: "Boring",
      children: [
        { label: "Filter", value: "Fil" },
        { label: "Latte", value: "Lat" },
      ],
    },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  {
    label: "Fancy",
    children: [
      { label: "Cappuccino", value: "Cap" },
      { label: "Flat white", value: "Flat" },
    ],
  },
  {
    label: "Boring",
    children: [
      { label: "Filter", value: "Fil" },
      { label: "Latte", value: "Lat" },
    ],
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  {
    label: "Fancy",
    children: [
      { label: "Cappuccino", value: "Cap" },
      { label: "Flat white", value: "Flat" },
    ],
  },
  {
    label: "Boring",
    children: [
      { label: "Filter", value: "Fil" },
      { label: "Latte", value: "Lat" },
    ],
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleGroups = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      {
        label: "Fancy",
        children: [
          { label: "Cappuccino", value: "Cap" },
          { label: "Flat white", value: "Flat" },
        ],
      },
      {
        label: "Boring",
        children: [
          { label: "Filter", value: "Fil" },
          { label: "Latte", value: "Lat" },
        ],
      },
    ]}
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsGroups}>
  <SelectExampleGroups />
</ComponentPreview>

### Recommended

export const snippetsRecommended = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso", recommended: true },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano", recommended: true },
    { label: "Mocha", value: "mocha" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso", recommended: true },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano", recommended: true },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso", recommended: true },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano", recommended: true },
  { label: "Mocha", value: "mocha" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SelectExampleRecommended = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      {
        label: "Double Espresso",
        value: "doubleespresso",
        recommended: true,
      },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano", recommended: true },
      { label: "Mocha", value: "mocha" },
    ]}
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsRecommended}>
  <SelectExampleRecommended />
</ComponentPreview>

### Validation

export const snippetsValidation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?" 
  validation-status="success" 
  validation-text="Coffee available"
  value="americano"
  id="1"
></ic-select>
<ic-select
  placeholder="Select an option…"
  label="What is your favourite coffee?"
  validation-status="warning" 
  validation-text="Only a few left"
  value="cappuccino"
  id="2"
></ic-select>
<ic-select 
  placeholder="Select an option…" 
  label="What is your favourite coffee?" 
  validation-status="error" 
  validation-text="Coffee unavailable"
  value="mocha"
  id="3"
></ic-select>`,
      long: `{shortCode}
<script>
  const select1 = document.querySelector("#1");
  const select2 = document.querySelector("#2");
  const select3 = document.querySelector("#3");
  select1.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
  select2.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
  select3.options = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappuccino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  value="americano"
  options={options}
  validationStatus="success"
  validationText="Coffee available"
  onIcChange={(event) => console.log(event.detail.value)}
/>
<IcSelect 
  placeholder="Select an option…"
  label="What is your favourite coffee?"
  value="cappuccino"
  options={options}
  validationStatus="warning" 
  validationText="Only a few left"
  onIcChange={(event) => console.log(event.detail.value)}
/>
<IcSelect 
  placeholder="Select an option…" 
  label="What is your favourite coffee?"
  value="mocha"
  options={options}
  validationStatus="error" 
  validationText="Coffee unavailable"
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const SelectExampleValidation = () => (
  <div>
    <IcSelect
      placeholder="Select an option…"
      label="What is your favourite coffee?"
      value="americano"
      options={[
        { label: "Espresso", value: "espresso" },
        { label: "Double Espresso", value: "doubleespresso" },
        { label: "Flat White", value: "flatwhite" },
        { label: "Cappuccino", value: "cappuccino" },
        { label: "Americano", value: "americano" },
        { label: "Mocha", value: "mocha" },
      ]}
      validationStatus="success"
      validationText="Coffee available"
      onIcChange={(event) => console.log(event.detail.value)}
    />
    <IcSelect
      placeholder="Select an option…"
      label="What is your favourite coffee?"
      value="cappuccino"
      options={[
        { label: "Espresso", value: "espresso" },
        { label: "Double Espresso", value: "doubleespresso" },
        { label: "Flat White", value: "flatwhite" },
        { label: "Cappuccino", value: "cappuccino" },
        { label: "Americano", value: "americano" },
        { label: "Mocha", value: "mocha" },
      ]}
      validationStatus="warning"
      validationText="Only a few left"
      onIcChange={(event) => console.log(event.detail.value)}
    />
    <IcSelect
      placeholder="Select an option…"
      label="What is your favourite coffee?"
      value="mocha"
      options={[
        { label: "Espresso", value: "espresso" },
        { label: "Double Espresso", value: "doubleespresso" },
        { label: "Flat White", value: "flatwhite" },
        { label: "Cappuccino", value: "cappuccino" },
        { label: "Americano", value: "americano" },
        { label: "Mocha", value: "mocha" },
      ]}
      validationStatus="error"
      validationText="Coffee unavailable"
      onIcChange={(event) => console.log(event.detail.value)}
    />
  </div>
);

<ComponentPreview snippets={snippetsValidation}>
  <SelectExampleValidation />
</ComponentPreview>

### Custom elements in options

export const snippetsCustomElements = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option..." 
  label="What is your favourite coffee?"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  select.options = [
   { 
      label: "Cappuccino", 
      value: "Cap", 
    },
   { 
      label: "Latte", 
      value: "Lat",
      element: {
        component: '<ic-status-tag label="Neutral status"></ic-status-tag>',
        ariaLabel: "Neutral status tag",
      }
    },
   { 
      label: "Americano", 
      value: "Ame",
      icon: '<svg aria-labelledby="warning-title" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#000000"><g id="warning"><path id="Vector" d="M4.47 20.5037H19.53C21.07 20.5037 22.03 18.8337 21.26 17.5037L13.73 4.49375C12.96 3.16375 11.04 3.16375 10.27 4.49375L2.74 17.5037C1.97 18.8337 2.93 20.5037 4.47 20.5037ZM12 13.5037C11.45 13.5037 11 13.0537 11 12.5037V10.5037C11 9.95375 11.45 9.50375 12 9.50375C12.55 9.50375 13 9.95375 13 10.5037V12.5037C13 13.0537 12.55 13.5037 12 13.5037ZM13 17.5037H11V15.5037H13V17.5037Z" /></g></svg>'
    },
 ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option..." 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { 
    label: "Cappuccino", 
    value: "Cap", 
  },
  { 
    label: "Latte", 
    value: "Lat",
    element: {
      component: '<ic-status-tag label="Neutral status"></ic-status-tag>',
      ariaLabel: "Neutral status tag",
    }
  },
  { 
    label: "Americano", 
    value: "Ame",
    icon: '<svg aria-labelledby="warning-title" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#000000"><g id="warning"><path id="Vector" d="M4.47 20.5037H19.53C21.07 20.5037 22.03 18.8337 21.26 17.5037L13.73 4.49375C12.96 3.16375 11.04 3.16375 10.27 4.49375L2.74 17.5037C1.97 18.8337 2.93 20.5037 4.47 20.5037ZM12 13.5037C11.45 13.5037 11 13.0537 11 12.5037V10.5037C11 9.95375 11.45 9.50375 12 9.50375C12.55 9.50375 13 9.95375 13 10.5037V12.5037C13 13.0537 12.55 13.5037 12 13.5037ZM13 17.5037H11V15.5037H13V17.5037Z" /></g></svg>'
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { 
    label: "Cappuccino", 
    value: "Cap", 
  },
  { 
    label: "Latte", 
    value: "Lat",
    element: {
      component: '<ic-status-tag label="Neutral status"></ic-status-tag>',
      ariaLabel: "Neutral status tag",
    }
  },
  { 
    label: "Americano", 
    value: "Ame",
    icon: '<svg aria-labelledby="warning-title" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#000000"><g id="warning"><path id="Vector" d="M4.47 20.5037H19.53C21.07 20.5037 22.03 18.8337 21.26 17.5037L13.73 4.49375C12.96 3.16375 11.04 3.16375 10.27 4.49375L2.74 17.5037C1.97 18.8337 2.93 20.5037 4.47 20.5037ZM12 13.5037C11.45 13.5037 11 13.0537 11 12.5037V10.5037C11 9.95375 11.45 9.50375 12 9.50375C12.55 9.50375 13 9.95375 13 10.5037V12.5037C13 13.0537 12.55 13.5037 12 13.5037ZM13 17.5037H11V15.5037H13V17.5037Z" /></g></svg>'
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const optionsWithCustomElements = [
  {
    label: "Cappuccino",
    value: "Cap",
  },
  {
    label: "Latte",
    value: "Lat",
    element: {
      component: `<ic-status-tag label="Neutral status"></ic-status-tag>`,
      ariaLabel: "Neutral status tag",
    },
  },
  {
    label: "Americano",
    value: "Ame",
    icon: `<svg aria-labelledby="warning-title" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#000000"><g id="warning"><path id="Vector" d="M4.47 20.5037H19.53C21.07 20.5037 22.03 18.8337 21.26 17.5037L13.73 4.49375C12.96 3.16375 11.04 3.16375 10.27 4.49375L2.74 17.5037C1.97 18.8337 2.93 20.5037 4.47 20.5037ZM12 13.5037C11.45 13.5037 11 13.0537 11 12.5037V10.5037C11 9.95375 11.45 9.50375 12 9.50375C12.55 9.50375 13 9.95375 13 10.5037V12.5037C13 13.0537 12.55 13.5037 12 13.5037ZM13 17.5037H11V15.5037H13V17.5037Z" /></g></svg>`,
  },
];

<ComponentPreview snippets={snippetsCustomElements}>
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={optionsWithCustomElements}
    onIcChange={(event) => console.log(event.detail.value)}
  />
</ComponentPreview>

### Searchable

export const snippetsSearchable = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select 
  placeholder="Select an option…"
  label="What is your favourite coffee?" 
  searchable="true"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Cappuccino", value: "Cap" },
    { label: "Latte", value: "Lat" },
    { label: "Americano", value: "Ame" },
    { label: "Flat white", value: "Fla" },
    { label: "Mocha", value: "Moc" },
    { label: "Macchiato", value: "Mac" },
    { label: "Café au lait", value: "Caf" },
    { label: "Espresso", value: "Esp" },
    { label: "Cortado", value: "Cor" },
    { label: "Latte macchiato", value: "Lam" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…"
  label="What is your favourite coffee?"
  options={options}
  searchable
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
  { label: "Café au lait", value: "Caf" },
  { label: "Espresso", value: "Esp" },
  { label: "Cortado", value: "Cor" },
  { label: "Latte macchiato", value: "Lam" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
  { label: "Café au lait", value: "Caf" },
  { label: "Espresso", value: "Esp" },
  { label: "Cortado", value: "Cor" },
  { label: "Latte macchiato", value: "Lam" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SearchableSelectExample = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
      { label: "Café au lait", value: "Caf" },
      { label: "Espresso", value: "Esp" },
      { label: "Cortado", value: "Cor" },
      { label: "Latte macchiato", value: "Lam" },
    ]}
    searchable
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsSearchable}>
  <SearchableSelectExample />
</ComponentPreview>

### Searchable &ndash; with descriptions included in search

export const snippetsSearchableWithDescriptions = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select
  placeholder="Select an option…"
  label="What is your favourite coffee?" 
  searchable="true" 
  include-description-in-search="true"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    { label: "Cappuccino", value: "Cap", description: "Coffee frothed up with pressurised steam" },
    { label: "Americano", value: "Ame", description: "Espresso coffee diluted with hot water" },
    { label: "Mocha", value: "Moc", description: "Coffee with chocolate" },
    { label: "Latte", value: "Lat", description: "Milky coffee with one or two shots of espresso" },
    { label: "Flat white", value: "Fla", description: "Coffee with frothed milk poured over espresso" },
    { label: "Macchiato", value: "Mac", description: "Espresso coffee topped with steamed milk" },
    { label: "Café au lait", value: "Caf", description: "Brewed coffee with steamed milk" },
    { label: "Espresso", value: "Esp", description: "Concentrated form of coffee" },
    { label: "Cortado", value: "Cor", description: "Coffee cut with milk" },
    { label: "Latte macchiato", value: "Lam", description: "Espresso coffee with milk and a spoonful of foamed milk" },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…"
  label="What is your favourite coffee?"
  options={options}
  searchable
  includeDescriptionsInSearch
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Cappuccino", value: "Cap", description: "Coffee frothed up with pressurised steam" },
  { label: "Americano", value: "Ame", description: "Espresso coffee diluted with hot water" },
  { label: "Mocha", value: "Moc", description: "Coffee with chocolate" },
  { label: "Latte", value: "Lat", description: "Milky coffee with one or two shots of espresso" },
  { label: "Flat white", value: "Fla", description: "Coffee with frothed milk poured over espresso" },
  { label: "Macchiato", value: "Mac", description: "Espresso coffee topped with steamed milk" },
  { label: "Café au lait", value: "Caf", description: "Brewed coffee with steamed milk" },
  { label: "Espresso", value: "Esp", description: "Concentrated form of coffee" },
  { label: "Cortado", value: "Cor", description: "Coffee cut with milk" },
  { label: "Latte macchiato", value: "Lam", description: "Espresso coffee with milk and a spoonful of foamed milk" },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Cappuccino", value: "Cap", description: "Coffee frothed up with pressurised steam" },
  { label: "Americano", value: "Ame", description: "Espresso coffee diluted with hot water" },
  { label: "Mocha", value: "Moc", description: "Coffee with chocolate" },
  { label: "Latte", value: "Lat", description: "Milky coffee with one or two shots of espresso" },
  { label: "Flat white", value: "Fla", description: "Coffee with frothed milk poured over espresso" },
  { label: "Macchiato", value: "Mac", description: "Espresso coffee topped with steamed milk" },
  { label: "Café au lait", value: "Caf", description: "Brewed coffee with steamed milk" },
  { label: "Espresso", value: "Esp", description: "Concentrated form of coffee" },
  { label: "Cortado", value: "Cor", description: "Coffee cut with milk" },
  { label: "Latte macchiato", value: "Lam", description: "Espresso coffee with milk and a spoonful of foamed milk" },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SearchableSelectWithDescriptionsExample = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      {
        label: "Cappuccino",
        value: "Cap",
        description: "Coffee frothed up with pressurised steam",
      },
      {
        label: "Americano",
        value: "Ame",
        description: "Espresso coffee diluted with hot water",
      },
      { label: "Mocha", value: "Moc", description: "Coffee with chocolate" },
      {
        label: "Latte",
        value: "Lat",
        description: "Milky coffee with one or two shots of espresso",
      },
      {
        label: "Flat white",
        value: "Fla",
        description: "Coffee with frothed milk poured over espresso",
      },
      {
        label: "Macchiato",
        value: "Mac",
        description: "Espresso coffee topped with steamed milk",
      },
      {
        label: "Café au lait",
        value: "Caf",
        description: "Brewed coffee with steamed milk",
      },
      {
        label: "Espresso",
        value: "Esp",
        description: "Concentrated form of coffee",
      },
      { label: "Cortado", value: "Cor", description: "Coffee cut with milk" },
      {
        label: "Latte macchiato",
        value: "Lam",
        description: "Espresso coffee with milk and a spoonful of foamed milk",
      },
    ]}
    searchable
    includeDescriptionsInSearch
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsSearchableWithDescriptions}>
  <SearchableSelectWithDescriptionsExample />
</ComponentPreview>

### Searchable &ndash; with group titles included in search

export const snippetsSearchableWithGroups = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select
  placeholder="Select an option…"
  label="What is your favourite coffee?" 
  searchable="true" 
  include-group-titles-in-search="true"
></ic-select>`,
      long: `{shortCode}
<script>
  const select = document.querySelector("ic-select");
  let option = "Cappuccino";
  select.options = [
    {
      label: "Fancy",
      children: [
        { label: "Cappuccino", value: "Cap" },
        { label: "Flat white", value: "Flat" },
        { label: "Mocha", value: "Moc" },
        { label: "Macchiato", value: "Mac" },
        { label: "Cortado", value: "Cor" },
        { label: "Latte macchiato", value: "Lam" },
      ],
    },
    {
      label: "Boring",
      children: [
        { label: "Filter", value: "Fil" },
        { label: "Latte", value: "Lat" },
        { label: "Americano", value: "Ame" },
        { label: "Espresso", value: "Esp" },
      ],
    },
  ];
  select.addEventListener("icChange", function (event) {
    console.log(event.detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
  placeholder="Select an option…"
  label="What is your favourite coffee?"
  options={options}
  searchable
  includeGroupTitlesInSearch
  onIcChange={(event) => console.log(event.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  {
    label: "Fancy",
    children: [
      { label: "Cappuccino", value: "Cap" },
      { label: "Flat white", value: "Flat" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
      { label: "Cortado", value: "Cor" },
      { label: "Latte macchiato", value: "Lam" },
    ],
  },
  {
    label: "Boring",
    children: [
      { label: "Filter", value: "Fil" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Espresso", value: "Esp" },
    ],
  },
];
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  {
    label: "Fancy",
    children: [
      { label: "Cappuccino", value: "Cap" },
      { label: "Flat white", value: "Flat" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
      { label: "Cortado", value: "Cor" },
      { label: "Latte macchiato", value: "Lam" },
    ],
  },
  {
    label: "Boring",
    children: [
      { label: "Filter", value: "Fil" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Espresso", value: "Esp" },
    ],
  },
];
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

export const SearchableSelectWithGroupsExample = () => (
  <IcSelect
    placeholder="Select an option…"
    label="What is your favourite coffee?"
    options={[
      {
        label: "Fancy",
        children: [
          { label: "Cappuccino", value: "Cap" },
          { label: "Flat white", value: "Flat" },
          { label: "Mocha", value: "Moc" },
          { label: "Macchiato", value: "Mac" },
          { label: "Cortado", value: "Cor" },
          { label: "Latte macchiato", value: "Lam" },
        ],
      },
      {
        label: "Boring",
        children: [
          { label: "Filter", value: "Fil" },
          { label: "Latte", value: "Lat" },
          { label: "Americano", value: "Ame" },
          { label: "Espresso", value: "Esp" },
        ],
      },
    ]}
    searchable
    includeGroupTitlesInSearch
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview snippets={snippetsSearchableWithGroups}>
  <SearchableSelectWithGroupsExample />
</ComponentPreview>

## Custom filtering example

This example shows how to filter data asynchronously when the value in the select field changes. The data is mocked and displayed after a one second delay, but could be replaced with a call to an API or database.

export const customFiltering = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select
  placeholder="Select an option…"
  label="What is your favourite coffee?"
  searchable="true"
  debounce="300"
  disable-filter="true"
  id="external-filter-select"
  characters-until-suggestions="2"
></ic-select>`,
      long: `{shortCode}
<script>
  const mockData = [
    { label: "Espresso", value: "Esp" },
    { label: "Double Espresso", value: "Dou" },
    { label: "Cappuccino", value: "Cap" },
    { label: "Latte", value: "Lat" },
    { label: "Americano", value: "Ame" },
    { label: "Filter", value: "Fil" },
    { label: "Flat white", value: "Fla" },
    { label: "Mocha", value: "Moc" },
    { label: "Macchiato", value: "Mac" },
  ];
  const select = document.querySelector("#external-filter-select");
  let selectedValue = "";
  select.addEventListener("icClear", function (event) {
    select.options = [];
  });
  select.addEventListener("icOptionSelect", function (event) {
    selectedValue = event.detail.value;
  });
  select.addEventListener("icChange", function (event) {
    const value = event.detail.value;
    console.log(value);
    if (value !== selectedValue) {
      if (value && value.length > 1) {
        mockAPI = (query) => {
          filteredResults = mockData.filter((item) =>
            item.label.toLowerCase().includes(query.toLowerCase())
          );
          return new Promise((resolve) =>
            setTimeout(() => resolve(filteredResults), 1000)
          );
        };
        mockAPI(value).then((results) => {
          select.options = results;
        });
      } else {
        select.options = [];
      }
    }
  });            
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelect 
   placeholder="Select an option…"
   label="What is your favourite coffee?"
   debounce={300}
   searchable
   disableFilter
   options={results} 
   onIcOptionSelect={(event) => setSelectedValue(event.detail.value)}
   onIcClear={() => setResults([])}
   onIcChange={changeHandler}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const mockData = [
  { label: "Espresso", value: "Esp" },
  { label: "Double Espresso", value: "Dou" },
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
const [results, setResults] = useState([]);
const [selectedValue, setSelectedValue] = useState("");
const changeHandler = (event) => {
  const newValue = event.detail.value;
  console.log(newValue);
  if (newValue !== selectedValue) {
    if (newValue && newValue.length > 1) {
      const mockAPI = (query) => {
        const filteredResults = mockData.filter((item) => 
          item.label.toLowerCase().includes(query.toLowerCase()));
        return new Promise(resolve => { 
          setTimeout(() => resolve(filteredResults), 1000)
        });
      };
      mockAPI(newValue).then((results) => setResults(results));
    } else {
      setResults([]);
    }
  }  
}
return(
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const mockData = [
  { label: "Espresso", value: "Esp" },
  { label: "Double Espresso", value: "Dou" },
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
const [results, setResults] = useState([]);
const [selectedValue, setSelectedValue] = useState("");
const changeHandler = (event) => {
  const newValue = event.detail.value;
  console.log(newValue);
  if (newValue !== selectedValue) {
    if (newValue && newValue.length > 1) {
      const mockAPI = (query) => {
        const filteredResults = mockData.filter((item) => 
          item.label.toLowerCase().includes(query.toLowerCase()));
        return new Promise(resolve => { 
          setTimeout(() => resolve(filteredResults), 1000)
        });
      };
      mockAPI(newValue).then((results) => setResults(results));
    } else {
      setResults([]);
    }
  }  
}
return(
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const CustomFilterExample = () => {
  const mockData = [
    { label: "Espresso", value: "Esp" },
    { label: "Double Espresso", value: "Dou" },
    { label: "Cappuccino", value: "Cap" },
    { label: "Latte", value: "Lat" },
    { label: "Americano", value: "Ame" },
    { label: "Filter", value: "Fil" },
    { label: "Flat white", value: "Fla" },
    { label: "Mocha", value: "Moc" },
    { label: "Macchiato", value: "Mac" },
  ];
  const [results, setResults] = React.useState([]);
  const [selectedValue, setSelectedValue] = React.useState("");
  const changeHandler = (event) => {
    const newValue = event.detail.value;
    console.log(newValue);
    if (newValue !== selectedValue) {
      if (newValue && newValue.length > 1) {
        const mockAPI = (query) => {
          const filteredResults = mockData.filter((item) =>
            item.label.toLowerCase().includes(query.toLowerCase())
          );
          return new Promise((resolve) => {
            setTimeout(() => resolve(filteredResults), 1000);
          });
        };
        mockAPI(newValue).then((newResults) => setResults(newResults));
      } else {
        setResults([]);
      }
    }
  };
  return (
    <IcSelect
      placeholder="Select an option…"
      label="What is your favourite coffee?"
      debounce="300"
      searchable
      disableFilter
      charactersUntilSuggestions="2"
      options={results}
      onIcOptionSelect={(event) => setSelectedValue(event.detail.value)}
      onIcClear={() => setResults([])}
      onIcChange={changeHandler}
    />
  );
};

<ComponentPreview snippets={customFiltering}>
  <CustomFilterExample />
</ComponentPreview>

---

# Testing the components

URL: https://design.sis.gov.uk/get-started/test-components
Subtitle: Test the UI Kit components within the shadow DOM using a testing framework.


import { IcAlert } from "@ukic/react";

<IcAlert
  variant="info"
  heading="Issues with Mocha"
  message="We're aware of some issues around testing the components with Mocha. For the time being, we advise using one of the testing frameworks we provide guidance on."
  dismissible
/>

## How we've built the components

<p>
  Typically, components sit in the DOM, also known as the{" "}
  <ic-link
    target="_blank"
    href="https://www.codecademy.com/resources/blog/what-is-dom/"
    rel="noreferer noopener nofollow"
  >
    'light DOM'
  </ic-link>
  . DOM stands for 'Document Object Model'. The light DOM represents the structure
  of a webpage as a tree, where each DOM object is a node.
</p>

At the core, the UI Kit components are based off the web components specification, which utilises the shadow DOM. This makes it possible to encapsulate each component’s markup structure, styling and functionality.

<p>
  According to{" "}
  <ic-link
    target="_blank"
    href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"
    rel="noreferer noopener nofollow"
  >
    Mozilla
  </ic-link>
  , the "shadow DOM allows hidden DOM trees to be attached to elements in the regular
  DOM tree — this shadow DOM tree starts with a shadow root, underneath which you
  can attach any element, in the same way as the normal DOM."
</p>

Therefore, testing components within the shadow DOM can be problematic because elements inside a shadow root technically do not exist in the main DOM, and can prevent testing frameworks from selecting internal elements.

## Testing the components

To ease the process of testing, here are guides to testing our UI Kit components in different testing frameworks.

- [Jest and React Testing Library](/get-started/test-components/testing-with-jest-and-rtl)
- [Cypress](/get-started/test-components/testing-with-cypress)

---

# Top navigation

URL: https://design.sis.gov.uk/components/top-navigation/code
Status: BETA
Subtitle: Top navigation sits across the top of the page. It includes the app name, search bar, main navigation and secondary links.


import {
  IcTopNavigation,
  IcSearchBar,
  IcNavigationButton,
  IcNavigationItem,
  IcNavigationGroup,
  SlottedSVG,
  IcBadge,
  IcButton,
} from "@ukic/react";

import { MemoryRouter, NavLink } from "react-router-dom";
import { useState } from "react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-top-navigation app-title="ICDS" status="alpha" version="v0.0.7">
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-button label="Notifications" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="Get started"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Accessibility"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Styles"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Components"
    href="#"
    selected="true"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Patterns"
    href="#"
  ></ic-navigation-item>
</ic-top-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcSearchBar slot="search" placeholder="Search" label="Search" />
  <IcNavigationButton label="Notifications" slot="buttons">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z" />
    </SlottedSVG>
  </IcNavigationButton>
  <IcNavigationItem slot="navigation" label="Get started" href="#" />
  <IcNavigationItem slot="navigation" label="Accessibility" href="#" />
  <IcNavigationItem slot="navigation" label="Styles" href="#" />
  <IcNavigationItem slot="navigation" label="Components" href="#" selected />
  <IcNavigationItem slot="navigation" label="Patterns" href="#" />
</IcTopNavigation>`,
      long: [
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
    <SlottedSVG
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </SlottedSVG>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationButton label="Notifications" slot="buttons">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z" />
      </SlottedSVG>
    </IcNavigationButton>
    <IcNavigationItem
      slot="navigation"
      label="Get started"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Accessibility"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Styles"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Components"
      href="#"
      onClick={(e) => e.preventDefault()}
      selected
    />
    <IcNavigationItem
      slot="navigation"
      label="Patterns"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcTopNavigation>
</ComponentPreview>

## Top navigation details

{
  "props": [
    {
      "name": "appTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "app-title",
      "reflectToAttr": false,
      "docs": "The app title to be displayed. This is required, unless a slotted app title link is used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "contentAligned",
      "type": "\"center\" | \"full-width\" | \"left\"",
      "complexType": {
        "original": "IcAlignment",
        "resolved": "\"center\" | \"full-width\" | \"left\"",
        "references": {
          "IcAlignment": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "content-aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the top navigation content.",
      "docsTags": [],
      "default": "\"full-width\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "full-width",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "customMobileBreakpoint",
      "type": "0 | 1200 | 576 | 768 | 992",
      "complexType": {
        "original": "IcDeviceSizes",
        "resolved": "0 | 1200 | 576 | 768 | 992",
        "references": {
          "IcDeviceSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcDeviceSizes"
          }
        }
      },
      "mutable": false,
      "attr": "custom-mobile-breakpoint",
      "reflectToAttr": false,
      "docs": "Can set a custom breakpoint for the top navigation to switch to mobile mode.\nMust be one of our specified breakpoints in px: `0`, `576`, `768`, `992`, `1200`.",
      "docsTags": [],
      "default": "DEVICE_SIZES.L",
      "values": [
        {
          "value": "0",
          "type": "number"
        },
        {
          "value": "1200",
          "type": "number"
        },
        {
          "value": "576",
          "type": "number"
        },
        {
          "value": "768",
          "type": "number"
        },
        {
          "value": "992",
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL to navigate to when the app title is clicked.",
      "docsTags": [],
      "default": "\"/\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "inline",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "inline",
      "reflectToAttr": false,
      "docs": "If `true`, the flyout navigation menu on small devices will be contained by the parent element.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "shortAppTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "short-app-title",
      "reflectToAttr": false,
      "docs": "The short title of the app to be displayed at small screen sizes in place of the app title.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "status",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "status",
      "reflectToAttr": false,
      "docs": "The status info to be displayed.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "version",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "version",
      "reflectToAttr": false,
      "docs": "The version info to be displayed.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "app-icon",
      "docs": "Content will be rendered to left of app title. Anything that is slotted here will be hidden from screen readers."
    },
    {
      "name": "app-title",
      "docs": "Handle routing by nesting a route in the app title."
    },
    {
      "name": "buttons",
      "docs": "Content will be rendered to right of search bar."
    },
    {
      "name": "navigation",
      "docs": "Content will be rendered in navigation panel."
    },
    {
      "name": "search",
      "docs": "Content will be rendered in search area to left of buttons."
    },
    {
      "name": "short-app-title",
      "docs": "Handle routing by nesting a route in the short app title (to be displayed in place of app title on small screen sizes)."
    },
    {
      "name": "toggle-icon",
      "docs": "Icon to be displayed on the button to toggle search slot content on smaller devices"
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "topNavResized",
      "detail": "{ size: number; }",
      "bubbles": true,
      "complexType": {
        "original": "{ size: number }",
        "resolved": "{ size: number; }",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the top navigation is resized.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "icNavigationMenuClose",
      "capture": false,
      "passive": false
    },
    {
      "event": "icSearchBarBlur",
      "capture": false,
      "passive": false
    },
    {
      "event": "icChange",
      "capture": false,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Navigation group details

{
  "props": [
    {
      "name": "expandable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "expandable",
      "reflectToAttr": false,
      "docs": "If `true`, the group will be expandable in the side menu.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to display on the group.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-navigation-item",
      "annotation": "prop",
      "docs": "z-index of navigation group item"
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the nav item.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "childBlur",
      "capture": false,
      "passive": false
    },
    {
      "event": "navItemClicked",
      "capture": false,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Navigation item details

{
  "props": [
    {
      "name": "download",
      "type": "boolean | string",
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "If `true`, the user can save the linked URL instead of navigating to it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The destination of the navigation item.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label of the navigation item.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selected",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "selected",
      "reflectToAttr": false,
      "docs": "If `true`, the navigation item will be set in a selected state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the icon."
    },
    {
      "name": "icon",
      "docs": "Content will be displayed to the left of the label for expanded navigation items, and in replacement of the label for collapsed navigation items."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-navigation-item",
      "annotation": "prop",
      "docs": "z-index of navigation item"
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the nav item.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Navigation button details

{
  "props": [
    {
      "name": "download",
      "type": "boolean | string",
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "If `true`, the user can save the linked URL instead of navigating to it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the link points to. This will render the button as an \"a\" tag.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label info to display.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the button."
    },
    {
      "name": "icon",
      "docs": "Content will be placed to the left of the button label."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `button`.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "icNavigationMenuOpened",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "icNavigationMenuClosed",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Grouped links

export const snippetsGroupedLinks = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-top-navigation app-title="ICDS" status="alpha" version="v0.0.7">
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-group slot="navigation" label="Get started">
    <ic-navigation-item label="Tests" href="#"></ic-navigation-item>
    <ic-navigation-item label="Theme" href="#"></ic-navigation-item>
    <ic-navigation-item label="Design" href="#"></ic-navigation-item>
  </ic-navigation-group>
  <ic-navigation-group
    slot="navigation"
    label="Accessibility"
    expandable="true"
  >
    <ic-navigation-item label="Introduction" href="#"></ic-navigation-item>
    <ic-navigation-item
      label="Accessibility Statement"
      href="#"
    ></ic-navigation-item>
  </ic-navigation-group>
</ic-top-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcSearchBar slot="search" placeholder="Search" label="Search" />
  <IcNavigationGroup slot="navigation" label="Get started">
    <IcNavigationItem label="Tests" href="#" />
    <IcNavigationItem label="Theme" href="#" />
    <IcNavigationItem label="Design" href="#" />
  </IcNavigationGroup>
  <IcNavigationGroup slot="navigation" label="Accessibility" expandable>
    <IcNavigationItem label="Introduction" href="#" />
    <IcNavigationItem label="Accessibility statement" href="#" />
  </IcNavigationGroup>
</IcTopNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsGroupedLinks} style={{ zIndex: "1" }}>
  <IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </svg>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationGroup slot="navigation" label="Get started">
      <IcNavigationItem
        label="Tests"
        href="#"
        onClick={(e) => e.preventDefault()}
      />
      <IcNavigationItem
        label="Theme"
        href="#"
        onClick={(e) => e.preventDefault()}
      />
      <IcNavigationItem
        label="Design"
        href="#"
        onClick={(e) => e.preventDefault()}
      />
    </IcNavigationGroup>
    <IcNavigationGroup slot="navigation" label="Accessibility">
      <IcNavigationItem
        label="Introduction"
        href="#"
        onClick={(e) => e.preventDefault()}
      />
      <IcNavigationItem
        label="Accessibility statement"
        href="#"
        onClick={(e) => e.preventDefault()}
      />
    </IcNavigationGroup>
  </IcTopNavigation>
</ComponentPreview>

### Centre aligned

export const snippetsCentreAligned = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-top-navigation
  app-title="ICDS"
  status="alpha"
  version="v0.0.7"
  content-aligned="center"
>
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-navigation-button
    label="Test button"
    slot="buttons"
    onclick="alert('test')"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="Get started"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Accessibility"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Styles"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Components"
    href="/"
    selected="true"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Patterns"
    href="/"
  ></ic-navigation-item>
</ic-top-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation
  appTitle="ICDS"
  status="alpha"
  version="v0.0.7"
  contentAligned="center"
>
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcNavigationButton
    label="Test button"
    slot="buttons"
    onClick={() => alert('test')}
  >
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </SlottedSVG>
  </IcNavigationButton>
  <IcNavigationItem slot="navigation" label="Get started" href="/" />
  <IcNavigationItem slot="navigation" label="Accessibility" href="/" />
  <IcNavigationItem slot="navigation" label="Styles" href="/" />
  <IcNavigationItem
    slot="navigation"
    label="Components"
    href="/"
    selected
  />
  <IcNavigationItem slot="navigation" label="Patterns" href="/" />
</IcTopNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCentreAligned}>
  <IcTopNavigation
    appTitle="ICDS"
    status="alpha"
    version="v0.0.7"
    contentAligned="center"
  >
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </svg>
    <IcNavigationButton
      label="Test button"
      slot="buttons"
      onclick="alert('test')"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </svg>
    </IcNavigationButton>
    <IcNavigationItem
      slot="navigation"
      label="Get started"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Accessibility"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Styles"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Components"
      href="#"
      onClick={(e) => e.preventDefault()}
      selected
    />
    <IcNavigationItem
      slot="navigation"
      label="Patterns"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcTopNavigation>
</ComponentPreview>

### Left aligned

export const snippetsLeftAligned = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-top-navigation
  app-title="ICDS"
  status="alpha"
  version="v0.0.7"
  content-aligned="left"
>
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-button
    label="Test button"
    slot="buttons"
    onclick="alert('test')"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="Get started"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Accessibility"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Styles"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Components"
    href="/"
    selected="true"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Patterns"
    href="/"
  ></ic-navigation-item>
</ic-top-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation
  appTitle="ICDS"
  status="alpha"
  version="v0.0.7"
  contentAligned="left"
>
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcSearchBar slot="search" placeholder="Search" label="Search" />
  <IcNavigationButton
    label="Test button"
    slot="buttons"
    onClick={() => alert('test')}
  >
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </SlottedSVG>
  </IcNavigationButton>
  <IcNavigationItem slot="navigation" label="Get started" href="/" />
  <IcNavigationItem slot="navigation" label="Accessibility" href="/" />
  <IcNavigationItem slot="navigation" label="Styles" href="/" />
  <IcNavigationItem
    slot="navigation"
    label="Components"
    href="/"
    selected
  />
  <IcNavigationItem slot="navigation" label="Patterns" href="/" />
</IcTopNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLeftAligned}>
  <IcTopNavigation
    appTitle="ICDS"
    status="alpha"
    version="v0.0.7"
    contentAligned="left"
  >
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </svg>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationButton
      label="Test button"
      slot="buttons"
      onclick="alert('test')"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </svg>
    </IcNavigationButton>
    <IcNavigationItem
      slot="navigation"
      label="Get started"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Accessibility"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Styles"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Components"
      href="#"
      onClick={(e) => e.preventDefault()}
      selected
    />
    <IcNavigationItem
      slot="navigation"
      label="Patterns"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcTopNavigation>
</ComponentPreview>

### With badge on navigation button

export const snippetsBadge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-top-navigation app-title="ICDS" status="alpha" version="v0.0.7">
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-button label="Notifications" slot="buttons">
    <ic-badge
      text-label="4"
      slot="badge"
      variant="light"
      position="near"
    ></ic-badge>
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="Get started"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Accessibility"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Styles"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Components"
    href="#"
    selected="true"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Patterns"
    href="#"
  ></ic-navigation-item>
</ic-top-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcSearchBar slot="search" placeholder="Search" label="Search" />
  <IcNavigationButton label="Notifications" slot="buttons">
    <IcBadge textLabel="4" slot="badge" variant="light" position="near" />
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z" />
    </SlottedSVG>
  </IcNavigationButton>
  <IcNavigationItem slot="navigation" label="Get started" href="#" />
  <IcNavigationItem slot="navigation" label="Accessibility" href="#" />
  <IcNavigationItem slot="navigation" label="Styles" href="#" />
  <IcNavigationItem
    slot="navigation"
    label="Components"
    href="#"
    selected
  />
  <IcNavigationItem slot="navigation" label="Patterns" href="#" />
</IcTopNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsBadge}>
  <IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
    <SlottedSVG
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </SlottedSVG>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationButton label="Notifications" slot="buttons">
      <IcBadge textLabel="4" slot="badge" variant="light" position="near" />
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z" />
      </SlottedSVG>
    </IcNavigationButton>
    <IcNavigationItem
      slot="navigation"
      label="Get started"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Accessibility"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Styles"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Components"
      href="#"
      onClick={(e) => e.preventDefault()}
      selected
    />
    <IcNavigationItem
      slot="navigation"
      label="Patterns"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcTopNavigation>
</ComponentPreview>

### With short app title

View on a small screen size to display the short title in place of the app title.

export const snippetsShortTitle = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-top-navigation
  app-title="Intelligence Community Design System"
  short-app-title="ICDS"
  status="alpha"
  version="v0.0.7"
>
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-navigation-item
    slot="navigation"
    label="Get started"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Accessibility"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Styles"
    href="/"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Components"
    href="/"
    selected="true"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="Patterns"
    href="/"
  ></ic-navigation-item>
</ic-top-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation
  appTitle="Intelligence Community Design System"
  shortAppTitle="ICDS"
  status="alpha"
  version="v0.0.7"
>
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcNavigationItem slot="navigation" label="Get started" href="#" />
  <IcNavigationItem slot="navigation" label="Accessibility" href="#" />
  <IcNavigationItem slot="navigation" label="Styles" href="#" />
  <IcNavigationItem
    slot="navigation"
    label="Components"
    href="#"
    selected
  />
  <IcNavigationItem slot="navigation" label="Patterns" href="#" />
</IcTopNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsShortTitle}>
  <IcTopNavigation
    appTitle="Intelligence Community Design System"
    status="alpha"
    version="v0.0.7"
    shortAppTitle="ICDS"
  >
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </svg>
    <IcNavigationItem
      slot="navigation"
      label="Get started"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Accessibility"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Styles"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Components"
      href="#"
      onClick={(e) => e.preventDefault()}
      selected
    />
    <IcNavigationItem
      slot="navigation"
      label="Patterns"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcTopNavigation>
</ComponentPreview>

### Conditional tabs

export const ConditionalTabsExample = () => {
  const [showTabs, setShowTabs] = useState(false);
  return (
    <>
      <IcTopNavigation
        appTitle="ApplicationName"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg"
          height="24"
          viewBox="0 0 24 24"
          width="24"
          fill="#000000"
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcNavigationItem
          label="One"
          href="/"
          selected="true"
          slot="navigation"
        />
        <IcNavigationItem label="Two" href="/" slot="navigation" />
        <IcNavigationItem label="Three" href="/" slot="navigation" />
        {showTabs && (
          <>
            <IcNavigationItem label="Four" href="/" slot="navigation" />
            <IcNavigationItem label="Five" href="/" slot="navigation" />
          </>
        )}
      </IcTopNavigation>
      <IcButton onClick={() => setShowTabs(!showTabs)}>Show/Hide tabs</IcButton>
    </>
  );
};

export const conditionalTabs = [
  {
    technology: "React",
    snippets: {
      short: `<IcTopNavigation
  appTitle="ApplicationName"
  status="alpha"
  version="v0.0.7"
>
  <SlottedSVG
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
  </SlottedSVG>
  <IcNavigationItem label="One" href="/" selected slot="navigation" />
  <IcNavigationItem label="Two" href="/" slot="navigation" />
  <IcNavigationItem label="Three" href="/" slot="navigation" />
  {showNavItems && (
    <>
      <IcNavigationItem label="Four" href="/" slot="navigation" />
      <IcNavigationItem label="Five" href="/" slot="navigation" />
    </>
  )}
</IcTopNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [showNavItems, setShowNavItems] = useState<boolean>(false);
return (
  <>
    {shortCode}
    <IcButton onClick={() => setShowNavItems(!showNavItems)}>Show/Hide nav items</IcButton>
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [showNavItems, setShowNavItems] = useState(false);
return (
  <>
    {shortCode}
    <IcButton onClick={() => setShowNavItems(!showNavItems)}>Show/Hide nav items</IcButton>
  </>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={conditionalTabs}
  style={{ display: "flex", flexDirection: "column" }}
>
  <ConditionalTabsExample />
</ComponentPreview>

### With React Router (using slots)

The following examples also demonstrate using a slotted link for app title, short app title and app icon.

To guarantee the correct styling for non-svg content slotted into app-icon, set `width`, `height` and `fill` to `inherit`.

export const withReactRouter = [
  {
    technology: "React",
    snippets: {
      short: `<MemoryRouter initialEntries={["/"]}>
  <IcTopNavigation version="v0.0.7">
    <NavLink to="/" slot="app-title">
      ICDS Title
    </NavLink>
    <NavLink to="/" slot="short-app-title">
      ICDS
    </NavLink>
    <NavLink to="/" slot="app-icon">
      <SlottedSVG
        xmlns="http://www.w3.org/2000/svg"
        height="inherit"
        viewBox="0 0 24 24"
        width="inherit"
        fill="inherit"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </SlottedSVG>
    </NavLink>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationButton
      label="Test button"
      slot="buttons"
      onClick={() => alert("test")}
    >
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </SlottedSVG>
    </IcNavigationButton>
    <IcNavigationItem slot="navigation">
      <NavLink to="/" slot="navigation-item">
        Get started
      </NavLink>
    </IcNavigationItem>
    <IcNavigationItem slot="navigation">
      <NavLink to="/accessibility" slot="navigation-item">
        Accessibility
      </NavLink>
    </IcNavigationItem>
  </IcTopNavigation>
  <main>
    <IcSectionContainer className={classes.sectionContainer}>
      <Routes>
        <Route
          path="/"
          element={
            <IcTypography>This is the get started page</IcTypography>
          }
        />
        <Route
          path="/accessibility"
          element={
            <IcTypography>This page is about accessibility</IcTypography>
          }
        />
      </Routes>
    </IcSectionContainer>
  </main>
</MemoryRouter>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withReactRouter}
  style={{ display: "flex", flexDirection: "column" }}
>
  <MemoryRouter initialEntries={["/"]}>
    <IcTopNavigation version="v0.0.7">
      <NavLink to="/" slot="app-title">
        ICDS Title
      </NavLink>
      <NavLink to="/" slot="short-app-title">
        ICDS
      </NavLink>
      <NavLink to="/" slot="app-icon">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          height="inherit"
          viewBox="0 0 24 24"
          width="inherit"
          fill="inherit"
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </svg>
      </NavLink>
      <IcSearchBar slot="search" placeholder="Search" label="Search" />
      <IcNavigationButton
        label="Test button"
        slot="buttons"
        onClick={() => alert("test")}
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          height="24"
          viewBox="0 0 24 24"
          width="24"
          fill="#000000"
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </svg>
      </IcNavigationButton>
      <IcNavigationItem slot="navigation">
        <NavLink to="/" slot="navigation-item">
          Get started
        </NavLink>
      </IcNavigationItem>
      <IcNavigationItem slot="navigation">
        <NavLink to="/accessibility" slot="navigation-item">
          Accessibility
        </NavLink>
      </IcNavigationItem>
    </IcTopNavigation>
  </MemoryRouter>
</ComponentPreview>

## Layout example

For full screen examples, see [top navigation patterns](/patterns/navigation-patterns/top-navigation-layout).

---

# Side navigation

URL: https://design.sis.gov.uk/components/side-navigation/code
Status: BETA
Subtitle: Side navigation provides an app's main navigation and is fixed on the left-hand side of the app. It includes the app's name, main navigation and optional secondary links.


import {
  IcSideNavigation,
  IcNavigationItem,
  IcNavigationGroup,
  IcDivider,
  SlottedSVG,
  IcBadge,
} from "@ukic/react";

import {
  mdiHome,
  mdiCoffeeOutline,
  mdiMagnify,
  mdiCoffeeMakerOutline,
  mdiCogOutline,
  mdiTeaOutline,
} from "@mdi/js";

import { MemoryRouter, NavLink } from "react-router-dom";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-side-navigation app-title="ACME coffee shop" version="v0.0.7" status="Alpha">
  <svg slot="app-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <ic-navigation-item slot="primary-navigation" href="#" label="Home">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </svg> 
  </ic-navigation-item>
  <ic-divider slot="primary-navigation"></ic-divider>
  <ic-navigation-item slot="primary-navigation" href="#" label="Search">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Drinks">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Equipment">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="secondary-navigation" href="#" label="Settings">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </svg>
  </ic-navigation-item>
</ic-side-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSideNavigation appTitle="ACME coffee shop" version="v0.0.7" status="Alpha">
  <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcNavigationItem slot="primary-navigation" href="#" label="Home">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </SlottedSVG> 
  </IcNavigationItem>
  <IcDivider slot="primary-navigation"></IcDivider>
  <IcNavigationItem slot="primary-navigation" href="#" label="Search">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </SlottedSVG>
  </IcNavigationItem>
</IcSideNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsDefault}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.7"
    status="Alpha"
    disableAutoParentStyling
    inline
  >
    <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcNavigationItem slot="primary-navigation" href="#" label="Home">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>home</title>
        <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcDivider slot="primary-navigation" />
    <IcNavigationItem slot="primary-navigation" href="#" label="Search">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>magnify</title>
        <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-outline</title>
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-maker-outline</title>
        <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>cog-outline</title>
        <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
      </SlottedSVG>
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

## Side navigation details

{
  "props": [
    {
      "name": "appTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "app-title",
      "reflectToAttr": false,
      "docs": "The app title to be displayed. This is required, unless a slotted app title link is used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "collapsedIconLabels",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "collapsed-icon-labels",
      "reflectToAttr": false,
      "docs": "If `true`, the icon and label will appear when side navigation is collapsed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disableAutoParentStyling",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-auto-parent-styling",
      "reflectToAttr": false,
      "docs": "If `true`, automatic parent wrapper styling will be disabled.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disableTopBarBehaviour",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-top-bar-behaviour",
      "reflectToAttr": false,
      "docs": "If `true`, the side navigation will not display as a top bar on small devices.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "expanded",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "expanded",
      "reflectToAttr": false,
      "docs": "If `true`, the side navigation will display in an expanded state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the app title link points to.",
      "docsTags": [],
      "default": "\"/\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "shortAppTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "short-app-title",
      "reflectToAttr": false,
      "docs": "The short title of the app to be displayed at small screen sizes in place of the app title.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "static",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "static",
      "reflectToAttr": false,
      "docs": "If `true`, the menu expand button will be removed (PLEASE NOTE: This takes effect on screen sizes 992px and above).",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "status",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "status",
      "reflectToAttr": false,
      "docs": "The status of the app to be displayed.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "version",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "version",
      "reflectToAttr": false,
      "docs": "The version of the app to be displayed.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "app-icon",
      "docs": "Content will be rendered adjacent to the app title at the very top of the side navigation."
    },
    {
      "name": "app-title",
      "docs": "Handle routing by nesting a route in the app title."
    },
    {
      "name": "primary-navigation",
      "docs": "Content will be rendered at the top of the side navigation."
    },
    {
      "name": "secondary-navigation",
      "docs": "Content will be rendered at the bottom of the side navigation."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-side-navigation",
      "annotation": "prop",
      "docs": "z-index of side navigation panel"
    }
  ],
  "events": [
    {
      "event": "sideNavExpanded",
      "detail": "IcExpandedDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcExpandedDetail",
        "resolved": "IcExpandedDetail",
        "references": {
          "IcExpandedDetail": {
            "location": "import",
            "path": "./ic-side-navigation.types",
            "id": "src/components/ic-side-navigation/ic-side-navigation.types.ts::IcExpandedDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the side navigation is collapsed and expanded.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Navigation group details

{
  "props": [
    {
      "name": "expandable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "expandable",
      "reflectToAttr": false,
      "docs": "If `true`, the group will be expandable in the side menu.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to display on the group.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-navigation-item",
      "annotation": "prop",
      "docs": "z-index of navigation group item"
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the nav item.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "childBlur",
      "capture": false,
      "passive": false
    },
    {
      "event": "navItemClicked",
      "capture": false,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Navigation item details

{
  "props": [
    {
      "name": "download",
      "type": "boolean | string",
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "If `true`, the user can save the linked URL instead of navigating to it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The destination of the navigation item.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label of the navigation item.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selected",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "selected",
      "reflectToAttr": false,
      "docs": "If `true`, the navigation item will be set in a selected state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the icon."
    },
    {
      "name": "icon",
      "docs": "Content will be displayed to the left of the label for expanded navigation items, and in replacement of the label for collapsed navigation items."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-navigation-item",
      "annotation": "prop",
      "docs": "z-index of navigation item"
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the nav item.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Static

export const snippetsStatic = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-side-navigation app-title="ACME coffee shop" version="v0.0.7" status="Alpha" static="true">
  <svg slot="app-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <ic-navigation-item slot="primary-navigation" href="#" label="Home">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </svg> 
  </ic-navigation-item>
  <ic-divider slot="primary-navigation"></ic-divider>
  <ic-navigation-item slot="primary-navigation" href="#" label="Search">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Drinks">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Equipment">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="secondary-navigation" href="#" label="Settings">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </svg>
  </ic-navigation-item>
</ic-side-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSideNavigation appTitle="ACME coffee shop" version="v0.0.7" status="Alpha" static>
  <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcNavigationItem slot="primary-navigation" href="#" label="Home">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </SlottedSVG> 
  </IcNavigationItem>
  <IcDivider slot="primary-navigation"></IcDivider>
  <IcNavigationItem slot="primary-navigation" href="#" label="Search">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </SlottedSVG>
  </IcNavigationItem>
</IcSideNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsStatic}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.7"
    status="Alpha"
    disableAutoParentStyling
    inline
    static
  >
    <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcNavigationItem slot="primary-navigation" href="#" label="Home">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>home</title>
        <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcDivider slot="primary-navigation" />
    <IcNavigationItem slot="primary-navigation" href="#" label="Search">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>magnify</title>
        <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-outline</title>
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-maker-outline</title>
        <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>cog-outline</title>
        <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
      </SlottedSVG>
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

### Expanded by default

export const snippetsExpanded = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-side-navigation
  app-title="ACME coffee shop"
  version="v0.0.7"
  status="Alpha"
  expanded
>
  <svg slot="app-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <ic-navigation-item slot="primary-navigation" href="#" label="Home">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </svg> 
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Search">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Drinks">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Equipment">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="secondary-navigation" href="#" label="Settings">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </svg>
  </ic-navigation-item>
</ic-side-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSideNavigation
  appTitle="ACME coffee shop"
  version="v0.0.7"
  status="Alpha"
  expanded
>
  <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcNavigationItem slot="primary-navigation" href="#" label="Home">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>home</title><path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </SlottedSVG> 
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Search">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </SlottedSVG>
  </IcNavigationItem>
</IcSideNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsExpanded}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.7"
    status="Alpha"
    expanded
    disableAutoParentStyling
    inline
  >
    <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcNavigationItem slot="primary-navigation" href="#" label="Home">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>home</title>
        <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Search">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>magnify</title>
        <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-outline</title>
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-maker-outline</title>
        <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>cog-outline</title>
        <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
      </SlottedSVG>
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

### Collapsed labels

export const snippetsCollapsed = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-side-navigation app-title="ACME coffee shop" version="v0.0.0" status="Alpha" collapsed-icon-labels="true">
  <svg slot="app-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <ic-navigation-item slot="primary-navigation" href="#" label="Home">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </svg> 
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Search">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Drinks">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Equipment">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="secondary-navigation" href="#" label="Settings">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </svg>
  </ic-navigation-item>
</ic-side-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSideNavigation appTitle="ACME coffee shop" version="v0.0.7" status="Alpha" collapsedIconLabels>
  <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcNavigationItem slot="primary-navigation" href="#" label="Home">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </SlottedSVG> 
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Search">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </SlottedSVG>
  </IcNavigationItem>
</IcSideNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsCollapsed}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.0"
    status="Alpha"
    collapsedIconLabels
    inline
  >
    <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcNavigationItem slot="primary-navigation" href="#" label="Home">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>home</title>
        <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Search">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>magnify</title>
        <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-outline</title>
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-maker-outline</title>
        <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>cog-outline</title>
        <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
      </SlottedSVG>
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

### With badges on navigation items

export const snippetsBadge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-side-navigation app-title="ACME coffee shop" version="v0.0.7" status="Alpha">
  <svg slot="app-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <ic-navigation-item slot="primary-navigation" href="#" label="Home">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </svg> 
  </ic-navigation-item>
  <ic-divider slot="primary-navigation"></ic-divider>
  <ic-navigation-item slot="primary-navigation" href="#" label="Search">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Drinks">
    <ic-badge type="dot" slot="badge" variant="error" position="far" size="large"></ic-badge>
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="primary-navigation" href="#" label="Equipment">
    <ic-badge type="dot" slot="badge" variant="success" position="far" size="large"></ic-badge>
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </svg>
  </ic-navigation-item>
  <ic-navigation-item slot="secondary-navigation" href="#" label="Settings">
    <svg xmlns="http://www.w3.org/2000/svg" slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </svg>
  </ic-navigation-item>
</ic-side-navigation>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSideNavigation appTitle="ACME coffee shop" version="v0.0.7" status="Alpha">
  <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
    <title>coffee-outline</title>
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcNavigationItem slot="primary-navigation" href="#" label="Home">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>home</title>
      <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
    </SlottedSVG> 
  </IcNavigationItem>
  <IcDivider slot="primary-navigation"></IcDivider>
  <IcNavigationItem slot="primary-navigation" href="#" label="Search">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>magnify</title>
      <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
    <IcBadge type="dot" slot="badge" variant="error" position="far" size="large"/>
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
    <IcBadge type="dot" slot="badge" variant="success" position="far" size="large"/>
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>coffee-maker-outline</title>
      <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
    </SlottedSVG>
  </IcNavigationItem>
  <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
    <SlottedSVG slot='icon' viewBox="0 0 24 24">
      <title>cog-outline</title>
      <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
    </SlottedSVG>
  </IcNavigationItem>
</IcSideNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsBadge}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.7"
    status="Alpha"
    disableAutoParentStyling
    inline
  >
    <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcNavigationItem slot="primary-navigation" href="#" label="Home">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>home</title>
        <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcDivider slot="primary-navigation" />
    <IcNavigationItem slot="primary-navigation" href="#" label="Search">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>magnify</title>
        <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
      <IcBadge
        type="dot"
        slot="badge"
        variant="error"
        position="far"
        size="large"
      />
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-outline</title>
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
      <IcBadge
        type="dot"
        slot="badge"
        variant="success"
        position="far"
        size="large"
      />
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>coffee-maker-outline</title>
        <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
      </SlottedSVG>
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
      <SlottedSVG slot="icon" viewBox="0 0 24 24">
        <title>cog-outline</title>
        <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
      </SlottedSVG>
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

### With Material Design icons in SlottedSVG

[MDI](https://pictogrammers.com/library/mdi/) can be imported from the `@mdi/js` package and used in `<SlottedSVG>`.
To scale the icons, use the ['viewBox' attribute](https://css-tricks.com/scale-svg/#aa-the-viewbox-attribute)

```bash
npm i @mdi/js
```

export const withMDIicons = [
  {
    technology: "React",
    snippets: {
      short: `<IcSideNavigation
  appTitle="ACME coffee Shop"
  version="v0.0.7"
  status="Alpha"
>
  <SlottedSVG slot="app-icon" path={mdiCoffeeOutline} viewBox="0 0 24 24" />
  <IcNavigationItem slot="primary-navigation" href="/" label="Home">
    <SlottedSVG slot="icon" path={mdiHome} viewBox="0 0 24 24" />
  </IcNavigationItem>
  <IcDivider slot="primary-navigation" />
  <IcNavigationItem slot="primary-navigation" href="/" label="Search">
    <SlottedSVG slot="icon" path={mdiMagnify} viewBox="0 0 24 24" />
  </IcNavigationItem>
  <IcNavigationGroup
    slot="primary-navigation"
    label="Teas"
    expandable
  >
    <IcNavigationItem label="English breakfast" href="/">
      <SlottedSVG slot="icon" path={mdiTeaOutline} viewBox="0 0 24 24" />
    </IcNavigationItem>
    <IcNavigationItem label="Chai" href="/">
      <SlottedSVG slot="icon" path={mdiTeaOutline} viewBox="0 0 24 24" />
    </IcNavigationItem>
  </IcNavigationGroup>
  <IcNavigationItem
    slot="primary-navigation"
    href="/"
    label="All other types of teas which you feel can be added."
  >
    <SlottedSVG slot="icon" path={mdiTeaOutline} viewBox="0 0 24 24" />
  </IcNavigationItem>
  <IcNavigationItem slot="primary-navigation" href="/" label="Equipment">
    <SlottedSVG
      slot="icon"
      path={mdiCoffeeMakerOutline}
      viewBox="0 0 24 24"
    />
  </IcNavigationItem>
  <IcNavigationItem slot="secondary-navigation" href="/" label="Settings">
    <SlottedSVG slot="icon" path={mdiCogOutline} viewBox="0 0 24 24" />
  </IcNavigationItem>
</IcSideNavigation>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withMDIicons}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.7"
    status="Alpha"
    disableAutoParentStyling
    inline
  >
    <SlottedSVG slot="app-icon" path={mdiCoffeeOutline} viewBox="0 0 24 24" />
    <IcNavigationItem slot="primary-navigation" href="/" label="Home">
      <SlottedSVG slot="icon" path={mdiHome} viewBox="0 0 24 24" />
    </IcNavigationItem>
    <IcDivider slot="primary-navigation" />
    <IcNavigationItem slot="primary-navigation" href="/" label="Search">
      <SlottedSVG slot="icon" path={mdiMagnify} viewBox="0 0 24 24" />
    </IcNavigationItem>
    <IcNavigationGroup slot="primary-navigation" label="Teas" expandable="true">
      <IcNavigationItem label="English breakfast" href="/">
        <SlottedSVG slot="icon" path={mdiTeaOutline} viewBox="0 0 24 24" />
      </IcNavigationItem>
      <IcNavigationItem label="Chai" href="/">
        <SlottedSVG slot="icon" path={mdiTeaOutline} viewBox="0 0 24 24" />
      </IcNavigationItem>
      <IcNavigationItem
        href="/"
        label="All other types of teas which can be added."
      >
        <SlottedSVG slot="icon" path={mdiTeaOutline} viewBox="0 0 24 24" />
      </IcNavigationItem>
    </IcNavigationGroup>
    <IcNavigationItem slot="primary-navigation" href="/" label="Equipment">
      <SlottedSVG
        slot="icon"
        path={mdiCoffeeMakerOutline}
        viewBox="0 0 24 24"
      />
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="/" label="Settings">
      <SlottedSVG slot="icon" path={mdiCogOutline} viewBox="0 0 24 24" />
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

### With React Router and Material Design Icons (using slots)

The following example also demonstrates using a slotted app title link.

export const withReactRouter = [
  {
    technology: "React",
    snippets: {
      short: `<MemoryRouter initialEntries={["/"]}>
  <div className={classes.divContainer}>
    <IcSideNavigation
    version="v0.0.7"
    status="Alpha"
    appTitle="ACME coffee shop"
    >
      <NavLink to="/" slot="app-title">ACME coffee shop</NavLink>
      <SlottedSVG slot="app-icon" path={mdiCoffeeOutline} viewBox="0 0 24 24" />
      <IcNavigationItem
        slot="primary-navigation"
      >
        <NavLink to="/" slot="navigation-item">
          <SlottedSVG slot="icon" path={mdiHome} viewBox="0 0 24 24" height="1.5rem" width="1.5rem" fill="currentcolor" />
          Home
        </NavLink>
      </IcNavigationItem>
      <IcNavigationItem slot="primary-navigation">
        <NavLink to="/search" slot="navigation-item">
          <SlottedSVG slot="icon" path={mdiMagnify} viewBox="0 0 24 24" height="1.5rem" width="1.5rem" fill="currentcolor" />
          Search
        </NavLink>
      </IcNavigationItem>
      <IcNavigationItem slot="primary-navigation">
        <NavLink to="/drinks" slot="navigation-item">
          <SlottedSVG slot="icon" path={mdiCoffeeOutline} viewBox="0 0 24 24" height="1.5rem" width="1.5rem" fill="currentcolor" />
          Drinks
        </NavLink>
      </IcNavigationItem>
      <IcNavigationItem slot="primary-navigation">
        <NavLink to="/coffee-maker" slot="navigation-item">
          <SlottedSVG slot="icon" path={mdiCoffeeMakerOutline} viewBox="0 0 24 24" height="1.5rem" width="1.5rem" fill="currentcolor" />
          Equipment
        </NavLink>
      </IcNavigationItem>
      <IcNavigationItem slot="secondary-navigation">
        <NavLink to="/settings" slot="navigation-item">
          <SlottedSVG slot="icon" path={mdiCogOutline} viewBox="0 0 24 24" height="1.5rem" width="1.5rem" fill="currentcolor" />
          Settings
        </NavLink>
      </IcNavigationItem>
    </IcSideNavigation>
    <main>
      <IcSectionContainer>
        <Routes>
          <Route path="/" element={<p>This is the Home page</p>} />
          <Route path="/search" element={<p>Search</p>} />
          <Route path="/drinks" element={<p>Drinks</p>} />
          <Route path="/coffee-maker" element={<p>Coffee Maker</p>} />
          <Route path="/settings" element={<p>Settings</p>} />
        </Routes>
      </IcSectionContainer>
    </main>
  </div>
</MemoryRouter>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  divContainer: {
    display: "flex",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  divContainer: {
    display: "flex",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withReactRouter}
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "flex-start",
    overflow: "hidden",
    position: "relative",
    padding: "0rem",
  }}
>
  <MemoryRouter initialEntries={["/"]}>
    <div style={{ display: "flex", flexDirection: "row" }}>
      <IcSideNavigation
        appTitle="ACME coffee shop"
        version="v0.0.7"
        status="Alpha"
      >
        <NavLink to="/" slot="app-title">
          ACME coffee shop
        </NavLink>
        <SlottedSVG
          slot="app-icon"
          path={mdiCoffeeOutline}
          viewBox="0 0 24 24"
        />
        <IcNavigationItem slot="primary-navigation">
          <NavLink to="/" slot="navigation-item">
            <SlottedSVG
              slot="icon"
              path={mdiHome}
              viewBox="0 0 24 24"
              height="1.5rem"
              width="1.5rem"
              fill="currentcolor"
            />
            Home
          </NavLink>
        </IcNavigationItem>
        <IcNavigationItem slot="primary-navigation">
          <NavLink to="/search" slot="navigation-item">
            <SlottedSVG
              slot="icon"
              path={mdiMagnify}
              viewBox="0 0 24 24"
              height="1.5rem"
              width="1.5rem"
              fill="currentcolor"
            />
            Search
          </NavLink>
        </IcNavigationItem>
        <IcNavigationItem slot="primary-navigation">
          <NavLink to="/drinks" slot="navigation-item">
            <SlottedSVG
              slot="icon"
              path={mdiCoffeeOutline}
              viewBox="0 0 24 24"
              height="1.5rem"
              width="1.5rem"
              fill="currentcolor"
            />
            Drinks
          </NavLink>
        </IcNavigationItem>
        <IcNavigationItem slot="primary-navigation">
          <NavLink to="/coffee-maker" slot="navigation-item">
            <SlottedSVG
              slot="icon"
              path={mdiCoffeeMakerOutline}
              viewBox="0 0 24 24"
              height="1.5rem"
              width="1.5rem"
              fill="currentcolor"
            />
            Equipment
          </NavLink>
        </IcNavigationItem>
        <IcNavigationItem slot="secondary-navigation">
          <NavLink to="/settings" slot="navigation-item">
            <SlottedSVG
              slot="icon"
              path={mdiCogOutline}
              viewBox="0 0 24 24"
              height="1.5rem"
              width="1.5rem"
              fill="currentcolor"
            />
            Settings
          </NavLink>
        </IcNavigationItem>
      </IcSideNavigation>
    </div>
  </MemoryRouter>
</ComponentPreview>

## Layout example

For full screen examples, see [side navigation patterns](/patterns/navigation-patterns/side-navigation-layout).

---

# How to contribute

URL: https://design.sis.gov.uk/community/contribute
Subtitle: Anyone can contribute to the Design System and UI Kit.


## Things to consider before contributing

- You can contribute more than just code! Please suggest new ideas or contribute to existing components or patterns.
- You can add written guidance to the website or designs in Figma.
- You should contribute in [StencilJS](https://stenciljs.com/) where you can. If that is not possible there will be a delay in the contribution.
- We’ve adopted the [Contributor Covenant](https://www.contributor-covenant.org/), as expanded on in our [Code of Conduct](https://github.com/mi6/ic-design-system/tree/main/CODE_OF_CONDUCT.md). The core team, Working Group and contributors should always keep it in mind.
- Read the [contribution criteria](/community/contribute-criteria).
- For internal users, you can talk to us on the internal platforms, or raise an issue on GitHub for either our [Design System](https://github.com/mi6/ic-design-system/issues) or [UI Kit](https://github.com/mi6/ic-ui-kit/issues).

## Raise a bug or suggest an improvement

Raise a bug or suggest improvements including brand new proposals to the UI Kit.

1. Raise a bug or suggest an improvement to the UI Kit through [GitHub issues](https://github.com/mi6/ic-design-system/issues) with as much information as possible.
2. Internal users can raise a bug or suggest an improvement to the UI Kit through our Service Desk.
3. The working group will triage your ticket and get back to you. The Working Group meet on a fortnightly basis to review new tickets, but important bugs will be reviewed sooner.

## Contribute code

You can help us speed up the development of our Design System by contributing new components and patterns or making improvements to existing ones.

1. Select a ticket from the [Design System](https://github.com/mi6/ic-design-system/issues) or the [UI Kit](https://github.com/mi6/ic-ui-kit/issues) backlog.
2. If a backlog ticket doesn’t exist for your contribution, you can suggest it through GitHub [Design System](https://github.com/mi6/ic-design-system/issues) or [UI Kit](https://github.com/mi6/ic-ui-kit/issues) issues, or our internal Service Desk.
3. If you're an internal user, we will arrange a kickoff meeting to discuss the scope, plan and agree any support. For any external users, we'll work with you through GitHub issues.
4. Refer to the technical instructions for [Design System](https://github.com/mi6/ic-design-system/tree/main/CONTRIBUTING.md) or the [UI Kit repository](https://github.com/mi6/ic-ui-kit/blob/main/CONTRIBUTING.md) coding standards and practices. If you're contributing a feature, we recommend reading through the [glossary of terms](/community/glossary-of-terms) to help with prop/slot naming.
5. Create a branch off `develop` to begin. Make sure that the 'copy main branch only' setting is unchecked when forking.
6. Create a pull request to the `develop` branch for review.

## Contribute to the Figma UI Kit

If you're an internal user, you can contribute to the Figma UI Kit directly. If you're an external user you can raise issues and include screenshots.

1. Select a design ticket from the [Design System](https://github.com/mi6/ic-design-system/issues) or the [UI Kit](https://github.com/mi6/ic-ui-kit/issues) backlog.
2. If a backlog ticket doesn’t exist for your contribution, you can suggest it through GitHub [Design System](https://github.com/mi6/ic-design-system/issues) or [UI Kit](https://github.com/mi6/ic-ui-kit/issues) issues, or our internal Service Desk.
3. If you're an internal user, we will arrange a kickoff meeting to discuss the scope, plan and agree any support.
4. Complete the Figma contribution template and finalise the contribution.
5. Let us know when your contribution is ready for review.

---

# Multi-select

URL: https://design.sis.gov.uk/components/multi-select
Status: CANARY
Subtitle: Use the multi-select component to allow users to select one or more values from a list of options.


import { IcAlert, IcLink } from "@ukic/react";
import { IcSelectWithMulti } from "@ukic/canary-react";

import { OPTIONS } from "./story-data";

<IcAlert
  heading="Canary component"
  variant="info"
  message="This component is new and its guidance will be updated over time."
/>

## Canary components

Canary components are unstable components that are released for testing purposes.

We value any feedback from users willing to try them in their applications.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

For more information on Canary components, read our approach to [releases and versions](/get-started/releases-versions).

<p>
  Additional details on the props and events for this component can be found in
  the{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-web-components/?path=/docs/web-components-multi-select--docs"
    target="_blank"
  >
    Canary web components
  </IcLink>{" "}
  and{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-react/?path=/docs/react-components-multi-select--docs"
    target="_blank"
  >
    Canary React
  </IcLink>{" "}
  storybooks.
</p>

## Single select

To view guidance and documentation relating to the single select component, check the [select page](/components/select).

## Component demo

<ComponentPreview>
  <IcSelectWithMulti
    label="What are your favourite types of coffee?"
    options={OPTIONS}
    multiple
  />
</ComponentPreview>

---

# Multi-select

URL: https://design.sis.gov.uk/components/multi-select/code
Status: CANARY
Subtitle: Use the multi-select component to allow users to select one or more values from a list of options.


import { IcSelectWithMulti } from "@ukic/canary-react";

import {
  OPTIONS,
  OPTIONS_WITH_DESCRIPTIONS,
  OPTIONS_WITH_DISABLED,
  GROUPED_OPTIONS,
  OPTIONS_WITH_RECOMMENDED,
} from "./story-data";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat", disabled: true },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil", disabled: true },
      { label: "Flat white", value: "Fla", disabled: true },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  onIcOptionSelect={(event) => console.log(event.detail.value)}
  onIcOptionDeselect={(event) => console.log(event.detail.value)}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcSelectWithMulti
    label="What are your favourite types of coffee?"
    options={OPTIONS}
    multiple
  />
</ComponentPreview>

## Select with multi details

{
  "props": [
    {
      "name": "charactersUntilSuggestions",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "characters-until-suggestions",
      "reflectToAttr": false,
      "docs": "**[DEPRECATED]** This prop should not be used anymore.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFilter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-filter",
      "reflectToAttr": false,
      "docs": "If `true`, the built in filtering will be disabled for a searchable variant. For example, if options will already be filtered from external source.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": true,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "emptyOptionListText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "empty-option-list-text",
      "reflectToAttr": false,
      "docs": "The text displayed when there are no options in the option list.",
      "docsTags": [],
      "default": "\"No results found\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "form",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "form",
      "reflectToAttr": false,
      "docs": "The <form> element to associate the select with.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formaction",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formaction",
      "reflectToAttr": false,
      "docs": "The URL that processes the information submitted by the select. It overrides the action attribute of the select's form owner. Does nothing if there is no form owner.\nThis prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formenctype",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formenctype",
      "reflectToAttr": false,
      "docs": "The way the submitted form data is encoded. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formmethod",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formmethod",
      "reflectToAttr": false,
      "docs": "The HTTP method used to submit the form. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formnovalidate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "formnovalidate",
      "reflectToAttr": false,
      "docs": "If `true`, the form will not be validated when submitted. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formtarget",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formtarget",
      "reflectToAttr": false,
      "docs": "The place to display the response from submitting the form. It overrides the target attribute of the select's form owner.\nThis prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "If `true`, the select element will fill the width of the container. This prop should only be used with searchable select and will only be applied if searchable is true.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "includeDescriptionsInSearch",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "include-descriptions-in-search",
      "reflectToAttr": false,
      "docs": "If `true`, descriptions of options will be included when filtering options in a searchable select. Only applies to built in filtering.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "includeGroupTitlesInSearch",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "include-group-titles-in-search",
      "reflectToAttr": false,
      "docs": "If `true`, group titles of grouped options will be included when filtering options in a searchable select. Only applies to built in filtering.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the select.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "If `true`, the loading state will be triggered when fetching options asynchronously.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingErrorLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "loading-error-label",
      "reflectToAttr": false,
      "docs": "The message displayed when external loading times out.",
      "docsTags": [],
      "default": "\"Loading Error\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "loading-label",
      "reflectToAttr": false,
      "docs": "The message displayed whilst the options are being loaded externally.",
      "docsTags": [],
      "default": "\"Loading...\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "multiple",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "multiple",
      "reflectToAttr": false,
      "docs": "If `true`, multiple options can be selected.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "options",
      "type": "IcMenuOption[]",
      "complexType": {
        "original": "IcMenuOption[]",
        "resolved": "IcMenuOption[]",
        "references": {
          "IcMenuOption": {
            "location": "import",
            "path": "@ukic/web-components/dist/types/utils/types",
            "id": "../web-components/dist/types/utils/types.d.ts::IcMenuOption"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The possible selection options.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "IcMenuOption[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "The placeholder value to be displayed.",
      "docsTags": [],
      "default": "\"Select an option\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": false,
      "docs": "If `true`, the readonly state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the select will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "searchMatchPosition",
      "type": "\"anywhere\" | \"start\"",
      "complexType": {
        "original": "IcSearchMatchPositions",
        "resolved": "\"anywhere\" | \"start\"",
        "references": {
          "IcSearchMatchPositions": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSearchMatchPositions"
          }
        }
      },
      "mutable": false,
      "attr": "search-match-position",
      "reflectToAttr": false,
      "docs": "Whether the search string of the searchable select should match the start of or anywhere in the options. Only applies to built in filtering.",
      "docsTags": [],
      "default": "\"anywhere\"",
      "values": [
        {
          "value": "anywhere",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "searchable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "searchable",
      "reflectToAttr": false,
      "docs": "If `true`, a searchable variant of the select will be displayed which can be typed in to filter options. This functionality is only available on the single-select variant of the select component.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selectOnEnter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "select-on-enter",
      "reflectToAttr": false,
      "docs": "If `true`, the icOptionSelect event will be fired on enter instead of ArrowUp and ArrowDown.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showClearButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-clear-button",
      "reflectToAttr": false,
      "docs": "If `true`, a button which clears the select input when clicked will be displayed. The button will always appear on the searchable select.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the select.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "**[DEPRECATED]** This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "timeout",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "timeout",
      "reflectToAttr": false,
      "docs": "If using external filtering, set a timeout for when loading takes too long.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": false,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation status - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string | string[]",
      "complexType": {
        "original": "string | string[]",
        "resolved": "string | string[]",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the select, reflected by the value of the currently selected option.\nFor the searchable variant, the value is also reflected by the user input.\nFor the multi-select variant, the value must be an array of option values.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "string[]"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-menu",
      "annotation": "prop",
      "docs": "z-index of select menu"
    },
    {
      "name": "--input-width",
      "annotation": "prop",
      "docs": "Width of the input field"
    },
    {
      "name": "--menu-width",
      "annotation": "prop",
      "docs": "Width of the dropdown menu"
    }
  ],
  "events": [
    {
      "event": "icBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select loses focus.",
      "docsTags": []
    },
    {
      "event": "icChange",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value changes.",
      "docsTags": []
    },
    {
      "event": "icClear",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the clear button is clicked.",
      "docsTags": []
    },
    {
      "event": "icFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select gains focus.",
      "docsTags": []
    },
    {
      "event": "icInput",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a keyboard input occurred.",
      "docsTags": []
    },
    {
      "event": "icOptionDeselect",
      "detail": "IcOptionSelectEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcOptionSelectEventDetail",
        "resolved": "IcOptionSelectEventDetail",
        "references": {
          "IcOptionSelectEventDetail": {
            "location": "import",
            "path": "@ukic/web-components/dist/types/components",
            "id": "../web-components/dist/types/components.d.ts::IcOptionSelectEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when `multiple` is `true` and an option is deselected.",
      "docsTags": []
    },
    {
      "event": "icOptionSelect",
      "detail": "IcOptionSelectEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcOptionSelectEventDetail",
        "resolved": "IcOptionSelectEventDetail",
        "references": {
          "IcOptionSelectEventDetail": {
            "location": "import",
            "path": "@ukic/web-components/dist/types/components",
            "id": "../web-components/dist/types/components.d.ts::IcOptionSelectEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when an option is selected.\nSelecting an option will also trigger an `icChange/onIcChange` due to the value being updated.",
      "docsTags": []
    },
    {
      "event": "icRetryLoad",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the 'retry loading' button is clicked for a searchable variant.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the input box.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Variants

### Default value

Show options as pre-selected by setting the `value` prop to an array containing the values of these options.

export const defaultValue = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.value = ["Ame", "Fil", "Moc"];
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.value = ["Cap", "Fla", "Moc"];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  value={["Ame", "Fil", "Moc"]}
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  onIcOptionSelect={(event) => console.log(event.detail.value)}
  onIcOptionDeselect={(event) => console.log(event.detail.value)}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={defaultValue}>
  <IcSelectWithMulti
    label="What are your favourite types of coffee?"
    value={["Ame", "Fil", "Moc"]}
    options={OPTIONS}
    multiple
  />
</ComponentPreview>

### With clear button

Display a clear button by using the `showClearButton` prop.

This will appear when the user has selected some options and allow them to easily clear their selection.

export const clear = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
  show-clear-button="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  onIcOptionSelect={(event) => console.log(event.detail.value)}
  onIcOptionDeselect={(event) => console.log(event.detail.value)}
  multiple
  showClearButton
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={clear}>
  <IcSelectWithMulti
    label="What are your favourite types of coffee?"
    showClearButton
    options={OPTIONS}
    multiple
  />
</ComponentPreview>

### With descriptions

Display extra information about the options by providing a description using the `description` property for each option.

export const desc = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      {
        label: "Cappuccino",
        value: "Cap",
        description: "Coffee frothed up with pressurised steam",
      },
      {
        label: "Latte",
        value: "Lat",
        description: "A milkier coffee than a cappuccino",
      },
      {
        label: "Americano",
        value: "Ame",
        description: "Espresso coffee diluted with hot water",
      },
      {
        label: "Filter",
        value: "Fil",
        description: "Coffee filtered using paper or a mesh",
      },
      {
        label: "Flat white",
        value: "Fla",
        description:
          "Coffee without froth made with espresso and hot steamed milk",
      },
      {
        label: "Mocha",
        value: "Moc",
        description: "A mixture of coffee and chocolate",
      },
      {
        label: "Macchiato",
        value: "Mac",
        description: "Espresso coffee with a dash of frothy steamed milk",
      },
    ];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  onIcOptionSelect={(event) => console.log(event.detail.value)}
  onIcOptionDeselect={(event) => console.log(event.detail.value)}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  {
    label: "Cappuccino",
    value: "Cap",
    description: "Coffee frothed up with pressurised steam",
  },
  {
    label: "Latte",
    value: "Lat",
    description: "A milkier coffee than a cappuccino",
  },
  {
    label: "Americano",
    value: "Ame",
    description: "Espresso coffee diluted with hot water",
  },
  {
    label: "Filter",
    value: "Fil",
    description: "Coffee filtered using paper or a mesh",
  },
  {
    label: "Flat white",
    value: "Fla",
    description:
      "Coffee without froth made with espresso and hot steamed milk",
  },
  {
    label: "Mocha",
    value: "Moc",
    description: "A mixture of coffee and chocolate",
  },
  {
    label: "Macchiato",
    value: "Mac",
    description: "Espresso coffee with a dash of frothy steamed milk",
  },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  {
    label: "Cappuccino",
    value: "Cap",
    description: "Coffee frothed up with pressurised steam",
  },
  {
    label: "Latte",
    value: "Lat",
    description: "A milkier coffee than a cappuccino",
  },
  {
    label: "Americano",
    value: "Ame",
    description: "Espresso coffee diluted with hot water",
  },
  {
    label: "Filter",
    value: "Fil",
    description: "Coffee filtered using paper or a mesh",
  },
  {
    label: "Flat white",
    value: "Fla",
    description:
      "Coffee without froth made with espresso and hot steamed milk",
  },
  {
    label: "Mocha",
    value: "Moc",
    description: "A mixture of coffee and chocolate",
  },
  {
    label: "Macchiato",
    value: "Mac",
    description: "Espresso coffee with a dash of frothy steamed milk",
  },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={desc}>
  <IcSelectWithMulti
    label="What are your favourite types of coffee?"
    options={OPTIONS_WITH_DESCRIPTIONS}
    multiple
  />
</ComponentPreview>

### Helper text

Display helper text to provide additional information by using the `helperText` prop.

export const helper = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  helper-text="Select some options from the list"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  helperText="Select some options from the list"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  onIcOptionSelect={(event) => console.log(event.detail.value)}
  onIcOptionDeselect={(event) => console.log(event.detail.value)}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={helper}>
  <IcSelectWithMulti
    label="What are your favourite types of coffee?"
    options={OPTIONS}
    multiple
    helperText="Select some options from the list"
  />
</ComponentPreview>

### Sizes

Set the size of the multi-select by using the `size` prop. This prop takes the values `small`, `default` or `large`.
Depending on the chosen size, the prop will apply styling to increase or decrease the amount of spacing within the component.
The `default` variant is seen in the first [default](#default) example.

export const sizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default-small"
  label="What are your favourite types of coffee?"
  multiple="true"
  size="small"
></ic-select-with-multi>
<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>
<ic-select-with-multi
  id="select-default-large"
  label="What are your favourite types of coffee?"
  multiple="true"
  size="large"
></ic-select-with-multi>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-md);
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  size="small"
/>
<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
/>
<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  size="large"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={sizes}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      options={OPTIONS}
      multiple
      size="small"
    />
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      options={OPTIONS}
      multiple
    />
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      options={OPTIONS}
      multiple
      size="large"
    />
  </div>
</ComponentPreview>

### Disabled

Disable the multi-select and prevent user interaction by using the `disabled` prop.

export const disabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  label="What are your favourite types of coffee?"
  multiple="true"
  disabled="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  multiple
  disabled
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disabled}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      disabled
    />
  </div>
</ComponentPreview>

### Disabled options

Disable certain options by setting the `disabled` property to `true` for each option.

export const disabledOptions = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat", disabled: true },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil", disabled: true },
      { label: "Flat white", value: "Fla", disabled: true },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  onIcChange={(event) => console.log(event.detail.value)}
  onIcOptionSelect={(event) => console.log(event.detail.value)}
  onIcOptionDeselect={(event) => console.log(event.detail.value)}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat", disabled: true },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil", disabled: true },
  { label: "Flat white", value: "Fla", disabled: true },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat", disabled: true },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil", disabled: true },
  { label: "Flat white", value: "Fla", disabled: true },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disabledOptions}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      options={OPTIONS_WITH_DISABLED}
      multiple
    />
  </div>
</ComponentPreview>

### Hide label

Hide the visible label for the multi-select by using the `hideLabel` prop.

export const hideLabel = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
  hide-label="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  hideLabel
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={hideLabel}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      hideLabel
      multiple
    />
  </div>
</ComponentPreview>

### Required

Inform the user that the multi-select is a required field by using the `required` prop.
This will display an asterisk next to the label and apply the `aria-required` attribute.

export const required = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
  required="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  required
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={required}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      required
      options={OPTIONS}
    />
  </div>
</ComponentPreview>

### Read-only

Make the multi-select read-only by using the `readonly` prop.
Use the `value` prop to set which options are selected and will be displayed when it is read-only.

export const read = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
  readonly="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.value = ["Cap", "Fla", "Moc"];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  value={["Cap", "Fla", "Moc"]}
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  readonly
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={read}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      readonly
      options={OPTIONS}
      value={["Cap", "Fla", "Moc"]}
    />
  </div>
</ComponentPreview>

### Groups

Display options in groups by passing an array of child options to the `children` property of a parent option.
The parent option will be rendered as the title of the group.

export const group = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      {
        label: "Fancy",
        children: [
          { label: "Cappuccino", value: "Cap" },
          { label: "Flat white", value: "Flat" },
        ],
      },
      {
        label: "Boring",
        children: [
          { label: "Filter", value: "Fil" },
          { label: "Latte", value: "Lat" },
        ],
      },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  {
    label: "Fancy",
    children: [
      { label: "Cappuccino", value: "Cap" },
      { label: "Flat white", value: "Flat" },
    ],
  },
  {
    label: "Boring",
    children: [
      { label: "Filter", value: "Fil" },
      { label: "Latte", value: "Lat" },
    ],
  },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  {
    label: "Fancy",
    children: [
      { label: "Cappuccino", value: "Cap" },
      { label: "Flat white", value: "Flat" },
    ],
  },
  {
    label: "Boring",
    children: [
      { label: "Filter", value: "Fil" },
      { label: "Latte", value: "Lat" },
    ],
  },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={group}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      options={GROUPED_OPTIONS}
    />
  </div>
</ComponentPreview>

### Recommended

Display certain options at the top of the option list by setting the `recommended` property to `true` on each option.
This will allow for quick access to these options.

export const recc = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame", recommended: true },
      { label: "Filter", value: "Fil" },
      { label: "Flat white", value: "Fla", recommended: true },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame", recommended: true },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla", recommended: true },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame", recommended: true },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla", recommended: true },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={recc}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      options={OPTIONS_WITH_RECOMMENDED}
    />
  </div>
</ComponentPreview>

### Validation

Display a validation status and message by using the `validation-status` and `validation-message` props.
The `validation-status` prop takes the values `success`, `warning` or `error`.

export const validation = [
  {
    technology: "Web component",
    snippets: {
      short: ` <ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
  validation-status="success"
  validation-text="Coffee available"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  validation-status="success"
  validation-text="Coffee available"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={validation}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      options={OPTIONS}
      validation-status="success"
      validation-text="Coffee available"
    />
  </div>
</ComponentPreview>

### Loading with error

Display the loading state by using the `loading` prop.
The multi-select will show a loading error after the amount of time specified using the `timeout` prop has elapsed.

export const loading = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-select-with-multi
  id="select-default"
  label="What are your favourite types of coffee?"
  multiple="true"
  loading="true"
  timeout="1000"
></ic-select-with-multi>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var select = document.querySelector("#select-default");
    select.options = [
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Filter", value: "Fil" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
    ];
    select.addEventListener("icChange", function (event) {
      console.log(event.detail.value);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSelectWithMulti
  label="What are your favourite types of coffee?"
  options={options}
  multiple
  loading
  timeout={1000}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
const options = [
  { label: "Cappuccino", value: "Cap" },
  { label: "Latte", value: "Lat" },
  { label: "Americano", value: "Ame" },
  { label: "Filter", value: "Fil" },
  { label: "Flat white", value: "Fla" },
  { label: "Mocha", value: "Moc" },
  { label: "Macchiato", value: "Mac" },
];
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={loading}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcSelectWithMulti
      label="What are your favourite types of coffee?"
      multiple
      loading
      timeout={1000}
      options={OPTIONS}
    />
  </div>
</ComponentPreview>

---

# Accordion

URL: https://design.sis.gov.uk/components/accordion/code
Status: BETA
Subtitle: Accordions are expandable and collapsible sections that are used to show and hide additional content.


import {
  IcAccordion,
  IcAccordionGroup,
  IcTypography,
  SlottedSVG,
} from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-accordion heading="English Breakfast">
  <ic-typography variant="body">
    A blend of different black teas.
  </ic-typography>
</ic-accordion>
<ic-accordion heading="Earl Grey">
  <ic-typography variant="body">
    A tea blend that has been flavoured with oil of bergamot.
  </ic-typography>
</ic-accordion>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAccordion heading="English Breakfast">
  <IcTypography variant="body">
    A blend of different black teas.
  </IcTypography>
</IcAccordion>
<IcAccordion heading="Earl Grey">
  <IcTypography variant="body">
    A tea blend that has been flavoured with oil of bergamot.
  </IcTypography>
</IcAccordion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ flexDirection: "column" }} snippets={snippets}>
  <IcAccordion heading="English Breakfast">
    <IcTypography variant="body">A blend of different black teas.</IcTypography>
  </IcAccordion>
  <IcAccordion heading="Earl Grey">
    <IcTypography variant="body">
      A tea blend that has been flavoured with oil of bergamot.
    </IcTypography>
  </IcAccordion>
</ComponentPreview>

## Accordion details

{
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the accordion will be disabled.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "expanded",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "expanded",
      "reflectToAttr": false,
      "docs": "If `true`, the accordion appears expanded.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The section header outlining section content.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "message",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "The main body message of the accordion.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the accordion.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "heading",
      "docs": "Content is placed as the accordion heading."
    },
    {
      "name": "icon",
      "docs": "Content is placed to the left of the heading."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on accordion heading.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Accordion group details

{
  "props": [
    {
      "name": "accessibleButtonLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "accessible-button-label",
      "reflectToAttr": false,
      "docs": "The accessible button label to provide more context to the 'See all/Hide all' button for screen reader users.",
      "docsTags": [],
      "default": "\"accordions\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the accordion group, e.g dark, or light.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "expanded",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "expanded",
      "reflectToAttr": false,
      "docs": "If `true`, the accordion will load in an expanded state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "groupTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "group-title",
      "reflectToAttr": false,
      "docs": "The header for the accordion group.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "singleExpansion",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "single-expansion",
      "reflectToAttr": false,
      "docs": "If `true`, only one accordion will open at a time.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the accordion.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "group-title",
      "docs": "Content is placed as the accordion group title."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets the focus on first focusable element in the accordion group. If the \"See/Hide all\" button is present, it will be focused.\nOtherwise, the first accordion will be focused.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "accordionClicked",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### With icon

export const withIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-accordion heading="English Breakfast">
  <svg
    slot="icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <ic-typography variant="body">
    A blend of different black teas.
  </ic-typography>
  </ic-accordion>
  <ic-accordion heading="Earl Grey">
    <svg
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  <ic-typography variant="body">
    A tea blend that has been flavoured with oil of bergamot.
  </ic-typography>
</ic-accordion>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAccordion heading="English Breakfast">
  <SlottedSVG
    slot="icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcTypography variant="body">
    A blend of different black teas.
  </IcTypography>
  </IcAccordion>
  <IcAccordion heading="Earl Grey">
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  <IcTypography variant="body">
    A tea blend that has been flavoured with oil of bergamot.
  </IcTypography>
</IcAccordion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withIcon} style={{ flexDirection: "column" }}>
  <IcAccordion heading="English Breakfast">
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcTypography variant="body">A blend of different black teas.</IcTypography>
  </IcAccordion>
  <IcAccordion heading="Earl Grey">
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <IcTypography variant="body">
      A tea blend that has been flavoured with oil of bergamot.
    </IcTypography>
  </IcAccordion>
</ComponentPreview>

### With group title and see all / hide all button

<ComponentPreview snippets={groupTitle} style={{ flexDirection: "column" }}>
  <IcAccordionGroup group-title="Coffee">
    <IcAccordion heading="Cappuccino">
      <IcTypography variant="body">
        An espresso-based drink that is traditionally prepared with steamed milk
        foam.
      </IcTypography>
    </IcAccordion>
    <IcAccordion heading="Americano">
      <IcTypography variant="body">
        An espresso-based drink that is diluted with hot water.
      </IcTypography>
    </IcAccordion>
  </IcAccordionGroup>
</ComponentPreview>

export const groupTitle = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-accordion-group group-title="Coffee">
  <ic-accordion heading="Cappuccino">
    <ic-typography variant="body">
      An espresso-based drink that is traditionally prepared with steamed milk foam.
    </ic-typography>
  </ic-accordion>
  <ic-accordion heading="Americano">
    <ic-typography variant="body">
      An espresso-based drink that is diluted with hot water.
    </ic-typography>
  </ic-accordion>
</ic-accordion-group>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAccordionGroup groupTitle="Coffee">
  <IcAccordion heading="Cappucino">
    <IcTypography variant="body">
      An espresso-based drink that is traditionally prepared with steamed milk foam.
    </IcTypography>
  </IcAccordion>
  <IcAccordion heading="Americano">
    <IcTypography variant="body">
      An espresso-based drink that is diluted with hot water.
    </IcTypography>
  </IcAccordion>
</IcAccordionGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

### With nested accordions

export const snippetsNested = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-accordion-group group-title="Coffee">
  <ic-accordion heading="Cappuccino">
    <ic-typography variant="body">
      An espresso-based drink that is traditionally prepared with steamed milk foam.
    </ic-typography>
  </ic-accordion>
  <ic-accordion heading="Other coffees">
    <ic-accordion heading="Americano">
      <ic-typography variant="body">
        An espresso-based drink that is diluted with hot water.
      </ic-typography>
    </ic-accordion>
    <ic-accordion heading="Latte">
      <ic-typography variant="body">
        A milkier coffee than a cappuccino.
      </ic-typography>
    </ic-accordion>
  </ic-accordion>
</ic-accordion-group>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAccordionGroup groupTitle="Coffee">
  <IcAccordion heading="Cappucino">
    <IcTypography variant="body">
      An espresso-based drink that is traditionally prepared with steamed milk foam.
    </IcTypography>
  </IcAccordion>
  <IcAccordion heading="Other coffees">
    <IcAccordion heading="Americano">
      <IcTypography variant="body">
        An espresso-based drink that is diluted with hot water.
      </IcTypography>
    </IcAccordion>
    <IcAccordion heading="Latte">
      <IcTypography variant="body">
        A milkier coffee than a cappuccino.
      </IcTypography>
    </IcAccordion>
  </IcAccordion>
</IcAccordionGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsNested} style={{ flexDirection: "column" }}>
  <IcAccordionGroup group-title="Coffee">
    <IcAccordion heading="Cappuccino">
      <IcTypography variant="body">
        An espresso-based drink that is traditionally prepared with steamed milk
        foam.
      </IcTypography>
    </IcAccordion>
    <IcAccordion heading="Other coffees">
      <IcAccordion heading="Americano">
        <IcTypography variant="body">
          An espresso-based drink that is diluted with hot water.
        </IcTypography>
      </IcAccordion>
      <IcAccordion heading="Latte">
        <IcTypography variant="body">
          A milkier coffee than a cappuccino.
        </IcTypography>
      </IcAccordion>
    </IcAccordion>
  </IcAccordionGroup>
</ComponentPreview>

---

# Alert

URL: https://design.sis.gov.uk/components/alert/code
Status: BETA
Subtitle: Alerts display a short important message in a way that attracts attention without interrupting the current task.


## Component demo

import { IcAlert, IcButton, IcLink } from "@ukic/react";

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert
  heading="Americano order"
  message="Preparation status is unavailable."
></ic-alert>
<ic-alert
  variant="info"
  heading="Did you know?"
  message="Coffee is a brewed drink prepared from roasted coffee beans."
></ic-alert>
<ic-alert
  variant="error"
  heading="Americano order error"
  message="Americano couldn't be made, we ran out of beans."
></ic-alert>
<ic-alert
  variant="warning"
  heading="Hot drink"
  message="Please be careful the drink is hot."
></ic-alert>
<ic-alert
  variant="success"
  heading="Americano order complete"
  message="Success, your coffee is good to go."
></ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert
  heading="Americano order"
  message="Preparation status is unavailable."
/>
<IcAlert
  variant="info"
  heading="Did you know?"
  message="Coffee is a brewed drink prepared from roasted coffee beans."
/>
<IcAlert
  variant="error"
  heading="Americano order error"
  message="Americano couldn't be made, we ran out of beans."
/>
<IcAlert
  variant="warning"
  heading="Hot drink"
  message="Please be careful the drink is hot."
/>
<IcAlert
  variant="success"
  heading="Americano order complete"
  message="Success, your coffee is good to go."
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ display: "block" }} snippets={snippetsDefault}>
  <IcAlert
    style={{ marginBottom: "1rem" }}
    heading="Americano order"
    message="Preparation status is unavailable."
  />
  <IcAlert
    style={{ marginBottom: "1rem" }}
    variant="info"
    heading="Did you know?"
    message="Coffee is a brewed drink prepared from roasted coffee beans."
  />
  <IcAlert
    style={{ marginBottom: "1rem" }}
    variant="error"
    heading="Americano order error"
    message="Americano couldn't be made, we ran out of beans."
  />
  <IcAlert
    style={{ marginBottom: "1rem" }}
    variant="warning"
    heading="Hot drink"
    message="Please be careful the drink is hot."
  />
  <IcAlert
    style={{ marginBottom: "1rem" }}
    variant="success"
    heading="Americano order complete"
    message="Success, your coffee is good to go."
  />
</ComponentPreview>

## Alert details

{
  "props": [
    {
      "name": "announced",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "announced",
      "reflectToAttr": false,
      "docs": "If `true`, the alert will have the 'alert' ARIA role and will be announced to screen readers.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dismissible",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "dismissible",
      "reflectToAttr": false,
      "docs": "If `true`, the alert will have a close icon at the end to dismiss it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The optional title to display at the start of the alert.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "message",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "The main body message of the alert.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showDefaultIcon",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-default-icon",
      "reflectToAttr": false,
      "docs": "If `true`, the default icon for the neutral variant will appear on the left of the alert.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "titleAbove",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "title-above",
      "reflectToAttr": false,
      "docs": "If `true`, the title and message will appear above and below instead of inline.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"error\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcStatusVariants",
        "resolved": "\"error\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
        "references": {
          "IcStatusVariants": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcStatusVariants"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the alert which will be rendered.",
      "docsTags": [],
      "default": "\"neutral\"",
      "values": [
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "info",
          "type": "string"
        },
        {
          "value": "neutral",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "action",
      "docs": "Content is placed to the right of the message."
    },
    {
      "name": "message",
      "docs": "Content is placed to the right of the title."
    },
    {
      "name": "neutral-icon",
      "docs": "A custom neutral icon is placed to the left of the title. This will override the default icon if used."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "dismiss",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icDismiss instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icDismiss instead."
    },
    {
      "event": "icDismiss",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Is emitted when the user dismisses the alert.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "icDismiss",
      "capture": true,
      "passive": false
    }
  ]
}


## Variants

### Dismissible

export const snippetsDismissible = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert
  heading="Americano order nearly ready"
  message="Your coffee is nearly ready. We'll send you another alert once it is complete."
  dismissible="true"
></ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert 
  heading="Americano order nearly ready" 
  message="Your coffee is nearly ready. We'll send you another alert once it is complete." 
  dismissible
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDismissible}>
  <IcAlert
    heading="Americano order nearly ready"
    message="Your coffee is nearly ready. We'll send you another alert once it is complete."
    dismissible
  />
</ComponentPreview>

### With action

export const snippetsWithAction = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert variant="info" heading="Did you know?" message="There is a new range of coffees to try.">
  <ic-button slot="action" variant="secondary" appearance="dark">View Drinks</ic-button></ic-alert>`,
      long: `{shortCode}
<script>
  const btn = document.querySelector('ic-button');
  btn.addEventListener('click', (ev) => {
    console.log(ev)
  })
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert 
  variant="info" 
  heading="Did you know?" 
  message="There is a new range of coffees to try."
>
  <IcButton 
    slot="action" 
    variant="secondary" 
    appearance="dark" 
    onClick={(ev) => console.log(ev)}
  >
    View Drinks
  </IcButton>
</IcAlert>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWithAction}>
  <IcAlert
    variant="info"
    heading="Did you know?"
    message="There is a new range of coffees to try."
  >
    <IcButton
      slot="action"
      variant="secondary"
      appearance="dark"
      onClick={(ev) => console.log(ev)}
    >
      View Drinks
    </IcButton>
  </IcAlert>
</ComponentPreview>

### Title above

export const snippetsTitleAbove = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert 
  heading="What is Coffee?" 
  message="Coffee is a brewed drink prepared from roasted coffee beans, the seeds of berries from certain flowering plants in the Coffea genus." 
  title-above="true" 
  variant="info"
></ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert 
  heading="What is Coffee?" 
  message="Coffee is a brewed drink prepared from roasted coffee beans, the seeds of berries from certain flowering plants in the Coffea genus." 
  titleAbove 
  variant="info"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsTitleAbove}>
  <IcAlert
    heading="What is Coffee?"
    message="Coffee is a brewed drink prepared from roasted coffee beans, the seeds of berries from certain flowering plants in the Coffea genus."
    titleAbove
    variant="info"
  />
</ComponentPreview>

### Responsive title

export const snippetsResponsiveTitle = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert 
  heading="Here you can find out lots more information about the world's favourite hot drink." 
  message="Coffee is a brewed drink prepared from roasted coffee beans, the seeds of berries from certain flowering plants in the Coffea genus. From the coffee fruit, the seeds are separated to produce a stable, raw product: unroasted green coffee."
  variant="info"
></ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert 
  heading="Here you can find out lots more information about the world's favourite hot drink." 
  message="Coffee is a brewed drink prepared from roasted coffee beans, the seeds of berries from certain flowering plants in the Coffea genus. From the coffee fruit, the seeds are separated to produce a stable, raw product: unroasted green coffee." 
  variant="info"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsResponsiveTitle}>
  <IcAlert
    heading="Here you can find out lots more information about the world's favourite hot drink."
    message="Coffee is a brewed drink prepared from roasted coffee beans, the seeds of berries from certain flowering plants in the Coffea genus. From the coffee fruit, the seeds are separated to produce a stable, raw product: unroasted green coffee."
    variant="info"
  />
</ComponentPreview>

### Custom message

export const snippetsCustomMessage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert variant="info" heading="Want to know more about our coffee?">
  <span slot="message"> Go to our <ic-link href="/">coffee page</ic-link> to learn more.</span></ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert variant="info" heading="Want to know more about our coffee?">
  <span slot="message"> Go to our <IcLink href="/">coffee page</IcLink> to learn more.</span>
</IcAlert>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCustomMessage}>
  <IcAlert variant="info" heading="Want to know more about our coffee?">
    <span
      slot="message"
      style={{
        font: "var(--ic-font-body)",
        letterSpacing: "var(--ic-font-letter-spacing-0pt005)",
      }}
    >
      Go to our{" "}
      <IcLink href="#" onClick={(e) => e.preventDefault()}>
        coffee page
      </IcLink>{" "}
      to learn more.
    </span>
  </IcAlert>
</ComponentPreview>

### With custom icon

export const snippetsCustomIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert 
  variant="neutral" 
  heading="Increased wait times" 
  message="Due to unprecedented coffee demand, wait times may be longer than usual."
>
  <svg
    slot="neutral-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
    >
    <path d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z"/>
  </svg>
</ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert 
  variant="neutral" 
  heading="Increased wait times" 
  message="Due to unprecedented coffee demand, wait times may be longer than usual."
>
  <SlottedSVG
    slot="neutral-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
    >
    <path d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z"/>
  </SlottedSVG>
</IcAlert>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCustomIcon}>
  <IcAlert
    variant="neutral"
    heading="Increased wait times"
    message="Due to unprecedented coffee demand, wait times may be longer than usual."
  >
    <svg
      slot="neutral-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z" />
    </svg>
  </IcAlert>
</ComponentPreview>

### With no icon

export const snippetsNoIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-alert 
  heading="Order queued" 
  show-default-icon="false"
  message="Your coffee order is in the queue. We'll notify you when it's ready to be picked up."
></ic-alert>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcAlert 
  heading="Order queued" 
  showDefaultIcon="false"
  message="Your coffee order is in the queue. We'll notify you when it's ready to be picked up."
></IcAlert>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsNoIcon}>
  <IcAlert
    heading="Order queued"
    showDefaultIcon="false"
    message="Your coffee order is in the queue. We'll notify you when it's ready to be picked up."
  />
</ComponentPreview>

---

# Back to top

URL: https://design.sis.gov.uk/components/back-to-top/code
Status: BETA
Subtitle: The back to top component helps people quickly return to the top of a long page.


import { IcButton } from "@ukic/react";

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-back-to-top target="main"></ic-back-to-top>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcBackToTop target="main" />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

## Component demo

A StackBlitz example of how the back to top component works in the context of other components can be seen in the [Top Navigation with Back to Top layout example](/patterns/navigation-patterns/top-navigation-layout#back-to-top).

<ComponentPreview snippets={snippets} showStackblitzBtn={false}>
  <IcButton
    variant="secondary"
    onClick={() => {
      window.scrollTo(0, document.body.scrollHeight);
    }}
  >
    Show Back to top
  </IcButton>
</ComponentPreview>

## Back to top details

{
  "props": [
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The ID of the element to jump back to when the link is clicked.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "variant",
      "type": "\"default\" | \"icon\"",
      "complexType": {
        "original": "IcBackToTopVariants",
        "resolved": "\"default\" | \"icon\"",
        "references": {
          "IcBackToTopVariants": {
            "location": "import",
            "path": "./ic-back-to-top.types",
            "id": "src/components/ic-back-to-top/ic-back-to-top.types.ts::IcBackToTopVariants"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the button to render",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "icon",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-back-to-top",
      "annotation": "prop",
      "docs": "z-index of back to top"
    }
  ],
  "events": [],
  "methods": [],
  "listeners": []
}


---

# Badge

URL: https://design.sis.gov.uk/components/badge/code
Status: BETA
Subtitle: Badges are attached to other components to provide an indication that something new is available, or that something has changed.


import {
  IcButton,
  IcBadge,
  SlottedSVG,
  IcChip,
  IcTab,
  IcTabPanel,
  IcTabContext,
  IcTabGroup,
} from "@ukic/react";
import { useState } from "react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="secondary">
  <ic-badge
    text-label="1000"
    max-number="99"
    slot="badge"
    variant="info"
  ></ic-badge>
  Coffee orders
</ic-button>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="secondary">
  <IcBadge textLabel="1000" maxNumber={99} slot="badge" variant="info"/>
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcButton variant="secondary">
    <IcBadge textLabel="1000" maxNumber={99} slot="badge" variant="info" />
    Coffee orders
  </IcButton>
</ComponentPreview>

## Badge details

{
  "props": [
    {
      "name": "accessibleLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "accessible-label",
      "reflectToAttr": false,
      "docs": "The accessible label of the badge component to provide context for screen reader users.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "customColor",
      "type": "`#${string}` | `rgb(${string})` | `rgba(${string})`",
      "complexType": {
        "original": "IcColor",
        "resolved": "`#${string}` | `rgb(${string})` | `rgba(${string})`",
        "references": {
          "IcColor": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcColor"
          }
        }
      },
      "mutable": false,
      "attr": "custom-color",
      "reflectToAttr": false,
      "docs": "The custom badge colour. This will only style the badge component if variant=\"custom\".\nCan be a hex value e.g. \"#ff0000\", RGB e.g. \"rgb(255, 0, 0)\", or RGBA e.g. \"rgba(255, 0, 0, 1)\".",
      "docsTags": [],
      "default": "null",
      "values": [
        {
          "type": "`#${string}`"
        },
        {
          "type": "`rgb(${string})`"
        },
        {
          "type": "`rgba(${string})`"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "maxNumber",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max-number",
      "reflectToAttr": false,
      "docs": "The maximum number shown on the badge appended with a +.\nThis will only be displayed if type=\"text\" and textLabel is not empty.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "position",
      "type": "\"far\" | \"inline\" | \"near\"",
      "complexType": {
        "original": "IcBadgePositions",
        "resolved": "\"far\" | \"inline\" | \"near\"",
        "references": {
          "IcBadgePositions": {
            "location": "import",
            "path": "./ic-badge.types",
            "id": "src/components/ic-badge/ic-badge.types.ts::IcBadgePositions"
          }
        }
      },
      "mutable": true,
      "attr": "position",
      "reflectToAttr": false,
      "docs": "The positioning of the badge in reference to the parent element.",
      "docsTags": [],
      "default": "\"far\"",
      "values": [
        {
          "value": "far",
          "type": "string"
        },
        {
          "value": "inline",
          "type": "string"
        },
        {
          "value": "near",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the badge to be displayed.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "textLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "text-label",
      "reflectToAttr": false,
      "docs": "The text displayed in the badge. This will only be displayed if type=\"text\".",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "type",
      "type": "\"dot\" | \"icon\" | \"text\"",
      "complexType": {
        "original": "IcBadgeTypes",
        "resolved": "\"dot\" | \"icon\" | \"text\"",
        "references": {
          "IcBadgeTypes": {
            "location": "import",
            "path": "./ic-badge.types",
            "id": "src/components/ic-badge/ic-badge.types.ts::IcBadgeTypes"
          }
        }
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of badge to be displayed.",
      "docsTags": [],
      "default": "\"text\"",
      "values": [
        {
          "value": "dot",
          "type": "string"
        },
        {
          "value": "icon",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"custom\" | \"error\" | \"info\" | \"light\" | \"neutral\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcBadgeVariants",
        "resolved": "\"custom\" | \"error\" | \"info\" | \"light\" | \"neutral\" | \"success\" | \"warning\"",
        "references": {
          "IcBadgeVariants": {
            "location": "import",
            "path": "./ic-badge.types",
            "id": "src/components/ic-badge/ic-badge.types.ts::IcBadgeVariants"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the badge to be displayed.",
      "docsTags": [],
      "default": "\"neutral\"",
      "values": [
        {
          "value": "custom",
          "type": "string"
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "info",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "neutral",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "visible",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "visible",
      "reflectToAttr": false,
      "docs": "If `true`, the badge will be displayed.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge-icon",
      "docs": "Icon will be rendered inside the badge if type is set to icon."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "hideBadge",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "hideBadge() => Promise<void>",
      "parameters": [],
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This method should not be used anymore. Use visible prop to set badge visibility."
        }
      ],
      "deprecation": "This method should not be used anymore. Use visible prop to set badge visibility."
    },
    {
      "name": "showBadge",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "showBadge() => Promise<void>",
      "parameters": [],
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This method should not be used anymore. Use visible prop to set badge visibility."
        }
      ],
      "deprecation": "This method should not be used anymore. Use visible prop to set badge visibility."
    }
  ],
  "listeners": [
    {
      "event": "icNavigationMenuOpened",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "icNavigationMenuClosed",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Sizes

export const snippetsSizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button size="small" variant="secondary">
  <ic-badge text-label="8" slot="badge" variant="info"></ic-badge>
  Coffee orders
</ic-button>
<ic-button variant="secondary">
  <ic-badge text-label="8" slot="badge" variant="info"></ic-badge>
  Coffee orders
</ic-button>
<ic-button size="large" variant="secondary">
  <ic-badge size="large" text-label="8" slot="badge" variant="info"></ic-badge>
  Coffee orders
</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton size="small" variant="secondary">
  <IcBadge size="small" textLabel="8" slot="badge" variant="info"/>
  Coffee orders
</IcButton>
<IcButton variant="secondary">
  <IcBadge textLabel="8" slot="badge" variant="info"/>
  Coffee orders
</IcButton>
<IcButton size="large" variant="secondary">
  <IcBadge size="large" textLabel="8" slot="badge" variant="info"/>
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({ 
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({ 
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSizes} style={{ gap: "1rem" }}>
  <IcButton size="small" variant="secondary">
    <IcBadge textLabel="8" slot="badge" variant="info" size="small" />
    Coffee orders
  </IcButton>
  <IcButton variant="secondary">
    <IcBadge textLabel="8" slot="badge" variant="info" size="default" />
    Coffee orders
  </IcButton>
  <IcButton size="large" variant="secondary">
    <IcBadge textLabel="8" slot="badge" variant="info" size="large" />
    Coffee orders
  </IcButton>
</ComponentPreview>

### Status

export const snippetsStatus = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="secondary">
  <ic-badge slot="badge" text-label="8" variant="neutral"></ic-badge>
  Coffee orders
</ic-button>
<ic-button variant="secondary">
  <ic-badge slot="badge" text-label="New" variant="info"></ic-badge>
  Coffee orders
</ic-button>
<ic-button variant="secondary">
  <ic-badge slot="badge" text-label="Unavailable" variant="error"></ic-badge>
  Coffee orders
</ic-button>
<ic-button variant="secondary">
  <ic-badge slot="badge" text-label="Available" variant="success"></ic-badge>
  Coffee orders
</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="secondary">
  <IcBadge slot="badge" textLabel="8" variant="neutral"/>
  Coffee orders
</IcButton>
<IcButton variant="secondary">
  <IcBadge slot="badge" textLabel="New" variant="info"/>
  Coffee orders
</IcButton>
<IcButton variant="secondary">
  <IcBadge slot="badge" textLabel="Unavailable" variant="error"/>
  Coffee orders
</IcButton>
<IcButton variant="secondary">
  <IcBadge slot="badge" textLabel="Available" variant="success"/>
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsStatus} style={{ gap: "1rem" }}>
  <IcButton variant="secondary">
    <IcBadge slot="badge" textLabel="8" variant="neutral" />
    Coffee orders
  </IcButton>
  <IcButton variant="secondary">
    <IcBadge slot="badge" textLabel="New" variant="info" />
    Coffee orders
  </IcButton>
  <IcButton variant="secondary">
    <IcBadge slot="badge" textLabel="Unavailable" variant="error" />
    Coffee orders
  </IcButton>
  <IcButton variant="secondary">
    <IcBadge slot="badge" textLabel="Available" variant="success" />
    Coffee orders
  </IcButton>
</ComponentPreview>

### Types

export const snippetsInformation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="secondary">
  <ic-badge slot="badge" type="text" text-label="8" variant="info"></ic-badge>
  Coffee orders
</ic-button>
<ic-button variant="secondary">
  <ic-badge slot="badge" type="dot" variant="info"></ic-badge>
  Coffee orders
</ic-button>
<ic-button variant="secondary">
<ic-badge type="icon" slot="badge" variant="info">
  <svg
    slot="badge-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    aria-label="retry"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
    />
  </svg>
</ic-badge> 
  Coffee orders
</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="secondary">
  <IcBadge slot="badge" type="text" textLabel="8" variant="info"/>
  Coffee orders
</IcButton>
<IcButton variant="secondary">
  <IcBadge slot="badge" type="dot" variant="info"/>
  Coffee orders
</IcButton>
<IcButton variant="secondary">
  <IcBadge type="icon" slot="badge" variant="info">
    <SlottedSVG
      slot="badge-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      aria-label="retry"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path
        d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
      />
    </SlottedSVG>
  </IcBadge>
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsInformation} style={{ gap: "1rem" }}>
  <IcButton variant="secondary">
    <IcBadge textLabel="8" slot="badge" type="text" variant="info" />
    Coffee orders
  </IcButton>
  <IcButton variant="secondary">
    <IcBadge type="dot" slot="badge" variant="info" />
    Coffee orders
  </IcButton>
  <IcButton variant="secondary">
    <IcBadge type="icon" slot="badge" variant="info">
      <SlottedSVG
        width="24"
        height="24"
        slot="badge-icon"
        viewBox="0 0 24 24"
        aria-label="retry"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
      </SlottedSVG>
    </IcBadge>
    Coffee orders
  </IcButton>
</ComponentPreview>

### Max number

export const snippetsMaxNumber = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="secondary">
  <ic-badge
    text-label="1000" 
    max-number="99" 
    slot="badge" 
    variant="info"
  ></ic-badge>
  Coffee orders
</ic-button>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="secondary">
  <IcBadge
    textLabel="1000"
    maxNumber={99}
    slot="badge"
    variant="info"
  />
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsMaxNumber}>
  <IcButton variant="secondary">
    <IcBadge textLabel="1000" maxNumber={99} slot="badge" variant="info" />
    Coffee orders
  </IcButton>
</ComponentPreview>

### Positioning

export const snippetsNear = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-chip label="Americano">
  <ic-badge type="icon" slot="badge" position="near" variant="success">
    <svg
      slot="badge-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      aria-label="success"
    >
      <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/>
    </svg> 
  </ic-badge>
</ic-chip>
<ic-chip label="Americano">
  <ic-badge type="icon" slot="badge" position="far" variant="success">
    <svg
      slot="badge-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      aria-label="success"
    >
      <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/>
    </svg> 
  </ic-badge>
</ic-chip>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcChip label="Americano">
  <IcBadge type="icon" slot="badge" position="near" variant="success">
    <SlottedSVG
      slot="badge-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      aria-label="success"
    >
      <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/>
    </SlottedSVG> 
  </IcBadge>
</IcChip>
  <IcChip label="Americano">
  <IcBadge type="icon" slot="badge" position="far" variant="success">
    <svg
      slot="badge-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      aria-label="success"
    >
      <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/>
    </svg>
  </IcBadge> 
</IcChip>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsNear} style={{ gap: "1rem" }}>
  <IcChip label="Americano">
    <IcBadge type="icon" slot="badge" position="near" variant="success">
      <SlottedSVG
        width="24"
        height="24"
        slot="badge-icon"
        viewBox="0 0 24 24"
        aria-label="success"
      >
        <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
      </SlottedSVG>
    </IcBadge>
  </IcChip>
  <IcChip label="Americano">
    <IcBadge type="icon" slot="badge" position="far" variant="success">
      <SlottedSVG
        width="24"
        height="24"
        slot="badge-icon"
        viewBox="0 0 24 24"
        aria-label="success"
      >
        <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
      </SlottedSVG>
    </IcBadge>
  </IcChip>
</ComponentPreview>

### Position inline

export const snippetsInline = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context>
  <ic-tab-group label="Example tab group">
    <ic-tab>
      About
    </ic-tab>
    <ic-tab>
      Ingredients
    </ic-tab>
    <ic-tab>
      <ic-badge
        text-label="8"
        slot="badge"
        position="inline"
        size="large"
        accessible-label="1 notification found"
        variant="info"
      ></ic-badge>
      Orders
    </ic-tab>
  </ic-tab-group>
  <ic-tab-panel>About page</ic-tab-panel>
  <ic-tab-panel>Ingredients page</ic-tab-panel>
  <ic-tab-panel>Orders page</ic-tab-panel>
</ic-tab-context>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext>
  <IcTabGroup label="Example tab group">
    <IcTab>
      About
    </IcTab>
    <IcTab>
      Ingredients
    </IcTab>
    <IcTab>
      <IcBadge
        textLabel="8"
        slot="badge"
        position="inline"
        size="large"
        accessibleLabel="1 notification found"
        variant="info"
      />
      Orders
    </IcTab>
  </IcTabGroup>
  <IcTabPanel>About page</IcTabPanel>
  <IcTabPanel>Ingredients page</IcTabPanel>
  <IcTabPanel>Orders page</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsInline}>
  <IcTabContext>
    <IcTabGroup label="Example tab group">
      <IcTab>About</IcTab>
      <IcTab>Ingredients</IcTab>
      <IcTab>
        Orders
        <IcBadge
          textLabel="8"
          slot="badge"
          position="inline"
          size="large"
          accessibleLabel="1 notification found"
          variant="info"
        />
      </IcTab>
    </IcTabGroup>
    <IcTabPanel>About page</IcTabPanel>
    <IcTabPanel>Ingredients page</IcTabPanel>
    <IcTabPanel>Orders page</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

### Hide and show badge

Click the button to hide and show the badge.

export const snippetsHideBadge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="secondary" onclick="showHideBadge()">
  <ic-badge text-label="8" slot="badge"></ic-badge>
  Coffee orders
</ic-button>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>    
  <script>
    function showHideBadge() {
      badge = document.querySelector("ic-badge");
      if (badge.classList.contains("show")) {
        badge.visible = false;
      } else {
        badge.visible = true;
      }
    }
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="secondary" onClick={handleShowHideBadge}>
  <IcBadge
    variant="info"
    textLabel="8"
    slot="badge"
    visible={showBadge}
  />
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [showBadge, setShowBadge] = useState<boolean>(false);
const handleShowHideBadge = () => {
  setShowBadge(!showBadge);
};
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [showBadge, setShowBadge] = useState(false);
const handleShowHideBadge = () => {
  setShowBadge(!showBadge);
};
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

export const ToggleBadge = () => {
  const [showBadge, setShowBadge] = useState(false);
  const handleShowHideBadge = () => {
    setShowBadge(!showBadge);
  };
  return (
    <div style={{ padding: "1rem" }}>
      <IcButton variant="secondary" onClick={handleShowHideBadge}>
        <IcBadge
          variant="info"
          textLabel="8"
          slot="badge"
          visible={showBadge}
        />
        Coffee orders
      </IcButton>
    </div>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
  snippets={snippetsHideBadge}
>
  <ToggleBadge />
</ComponentPreview>

### Accessible label

export const snippetsAccessibleLabel = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="secondary"> 
  <ic-badge
    text-label="8"
    slot="badge"
    size="large"
    variant="info"
    accessible-label="8 coffee orders found"
  >
  </ic-badge>
  Coffee orders
</ic-button>`,
      long: `.parent-container {
  padding: var(--ic-space-md);
}
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="secondary">
  <IcBadge
    textLabel="8"
    slot="badge"
    size="large"
    variant="info"
    accessibleLabel="8 coffee orders found"
  />
  Coffee orders
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsAccessibleLabel} style={{ gap: "1rem" }}>
  <IcButton variant="secondary">
    <IcBadge
      textLabel="8"
      slot="badge"
      size="large"
      accessibleLabel="8 coffee orders found"
      variant="info"
    />
    Coffee orders
  </IcButton>
</ComponentPreview>

---

# Breadcrumb

URL: https://design.sis.gov.uk/components/breadcrumb/code
Status: BETA
Subtitle: Breadcrumbs show someone where they are in an app’s hierarchy and provide a secondary method of navigating back to parent pages.


import { IcBreadcrumbGroup, IcBreadcrumb, IcLink } from "@ukic/react";

import { NavLink, MemoryRouter } from "react-router-dom";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-breadcrumb-group>
  <ic-breadcrumb page-title="Home" href="#"></ic-breadcrumb>
  <ic-breadcrumb page-title="Beverages" href="#"></ic-breadcrumb>
  <ic-breadcrumb 
    current="true" 
    page-title="Coffee" 
    href="#"
  >
  </ic-breadcrumb>
</ic-breadcrumb-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcBreadcrumbGroup>
  <IcBreadcrumb pageTitle="Home" href="#" />
  <IcBreadcrumb pageTitle="Beverages" href="#" />
  <IcBreadcrumb 
    current 
    pageTitle="Coffee"
    href="#"
  />
</IcBreadcrumbGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcBreadcrumbGroup>
    <IcBreadcrumb
      pageTitle="Home"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      pageTitle="Beverages"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      current
      pageTitle="Coffee"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcBreadcrumbGroup>
</ComponentPreview>

## Breadcrumb details

{
  "props": [
    {
      "name": "current",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "current",
      "reflectToAttr": false,
      "docs": "If `true`, aria-current will be set on the breadcrumb.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the breadcrumb link points to.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "pageTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "page-title",
      "reflectToAttr": false,
      "docs": "The title of the breadcrumb.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    }
  ],
  "slots": [
    {
      "name": "icon",
      "docs": "Content will be rendered to the left of the breadcrumb page title."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the breadcrumb.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Breadcrumb group details

{
  "props": [
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the breadcrumb group.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "backBreadcrumbOnly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "back-breadcrumb-only",
      "reflectToAttr": false,
      "docs": "If `true`, display only a single breadcrumb for the parent page with a back icon.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "collapsed",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "collapsed",
      "reflectToAttr": false,
      "docs": "If `true`, all breadcrumbs between the first and last breadcrumb will be collapsed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Back

export const back = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-breadcrumb-group back-breadcrumb-only="true">
  <ic-breadcrumb page-title="Home" href="#"></ic-breadcrumb>
  <ic-breadcrumb page-title="Beverages" href="#"></ic-breadcrumb>
  <ic-breadcrumb 
    current="true" 
    page-title="Coffee" 
    href="#"
  >
  </ic-breadcrumb>
</ic-breadcrumb-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcBreadcrumbGroup backBreadcrumbOnly>
  <IcBreadcrumb pageTitle="Home" href="#" />
  <IcBreadcrumb pageTitle="Beverages" href="#" />
  <IcBreadcrumb 
    current 
    pageTitle="Coffee"
    href="#"
  />
</IcBreadcrumbGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={back}>
  <IcBreadcrumbGroup backBreadcrumbOnly>
    <IcBreadcrumb
      pageTitle="Home"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      pageTitle="Beverages"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      current
      pageTitle="Coffee"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcBreadcrumbGroup>
</ComponentPreview>

### With icons

export const withIcons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-breadcrumb-group>
  <ic-breadcrumb page-title="Home" href="#">
    <svg
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
        fill="currentColor"
      />
    </svg>
  </ic-breadcrumb>
  <ic-breadcrumb page-title="Beverages" href="#">
    <svg
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M20 3H4v10c0 2.21 1.79 4 4 4h6c2.21 0 4-1.79 4-4v-3h2c1.11 0 2-.9 2-2V5c0-1.11-.89-2-2-2zm0 5h-2V5h2v3zM4 19h16v2H4z"
        fill="currentColor"
      />
    </svg>
  </ic-breadcrumb>
  <ic-breadcrumb 
    current="true" 
    page-title="Coffee" 
    href="#"
  >
    <svg
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M18.5 3H6c-1.1 0-2 .9-2 2v5.71c0 3.83 2.95 7.18 6.78 7.29 3.96.12 7.22-3.06 7.22-7v-1h.5c1.93 0 3.5-1.57 3.5-3.5S20.43 3 18.5 3zM16 5v3H6V5h10zm2.5 3H18V5h.5c.83 0 1.5.67 1.5 1.5S19.33 8 18.5 8zM4 19h16v2H4v-2z"
        fill="currentColor"
      />
    </svg>
  </ic-breadcrumb>
</ic-breadcrumb-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcBreadcrumbGroup>
  <IcBreadcrumb pageTitle="Home" href="#">
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
        fill="currentColor"
      />
    </SlottedSVG>
  </IcBreadcrumb>
  <IcBreadcrumb pageTitle="Beverages" href="#">
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M20 3H4v10c0 2.21 1.79 4 4 4h6c2.21 0 4-1.79 4-4v-3h2c1.11 0 2-.9 2-2V5c0-1.11-.89-2-2-2zm0 5h-2V5h2v3zM4 19h16v2H4z"
        fill="currentColor"
      />
    </SlottedSVG>
  </IcBreadcrumb>
  <IcBreadcrumb 
    pageTitle="Coffee" 
    current
    href="#"
  >
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M18.5 3H6c-1.1 0-2 .9-2 2v5.71c0 3.83 2.95 7.18 6.78 7.29 3.96.12 7.22-3.06 7.22-7v-1h.5c1.93 0 3.5-1.57 3.5-3.5S20.43 3 18.5 3zM16 5v3H6V5h10zm2.5 3H18V5h.5c.83 0 1.5.67 1.5 1.5S19.33 8 18.5 8zM4 19h16v2H4v-2z"
        fill="currentColor"
      />
    </SlottedSVG>
  </IcBreadcrumb>
</IcBreadcrumbGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withIcons}>
  <IcBreadcrumbGroup>
    <IcBreadcrumb pageTitle="Home" href="#" onClick={(e) => e.preventDefault()}>
      <svg
        slot="icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
          fill="currentColor"
        />
      </svg>
    </IcBreadcrumb>
    <IcBreadcrumb
      pageTitle="Beverages"
      href="#"
      onClick={(e) => e.preventDefault()}
    >
      <svg
        slot="icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M20 3H4v10c0 2.21 1.79 4 4 4h6c2.21 0 4-1.79 4-4v-3h2c1.11 0 2-.9 2-2V5c0-1.11-.89-2-2-2zm0 5h-2V5h2v3zM4 19h16v2H4z"
          fill="currentColor"
        />
      </svg>
    </IcBreadcrumb>
    <IcBreadcrumb
      pageTitle="Coffee"
      current
      href="#"
      onClick={(e) => e.preventDefault()}
    >
      <svg
        slot="icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M18.5 3H6c-1.1 0-2 .9-2 2v5.71c0 3.83 2.95 7.18 6.78 7.29 3.96.12 7.22-3.06 7.22-7v-1h.5c1.93 0 3.5-1.57 3.5-3.5S20.43 3 18.5 3zM16 5v3H6V5h10zm2.5 3H18V5h.5c.83 0 1.5.67 1.5 1.5S19.33 8 18.5 8zM4 19h16v2H4v-2z"
          fill="currentColor"
        />
      </svg>
    </IcBreadcrumb>
  </IcBreadcrumbGroup>
</ComponentPreview>

### Collapsed

export const collapsed = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-breadcrumb-group collapsed="true">
  <ic-breadcrumb page-title="Home" href="#"></ic-breadcrumb>
  <ic-breadcrumb page-title="Beverages" href="#"></ic-breadcrumb>
  <ic-breadcrumb 
    current="true" 
    page-title="Coffee" 
    href="#"
  >
  </ic-breadcrumb>
</ic-breadcrumb-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcBreadcrumbGroup collapsed>
  <IcBreadcrumb pageTitle="Home" href="#" />
  <IcBreadcrumb pageTitle="Beverages" href="#" />
  <IcBreadcrumb 
    pageTitle="Coffee" 
    current
    href="#"
  />
</IcBreadcrumbGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={collapsed}>
  <IcBreadcrumbGroup collapsed>
    <IcBreadcrumb
      pageTitle="Home"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      pageTitle="Beverages"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      pageTitle="Coffee"
      current
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcBreadcrumbGroup>
</ComponentPreview>

### With React Router

export const withReactRouter = [
  {
    technology: "React",
    snippets: {
      short: `<MemoryRouter initialEntries={["/"]}>
  <IcBreadcrumbGroup>
    <IcBreadcrumb pageTitle="Home">
      <IcLink>
        <NavLink slot="router-item" to="/">Home</NavLink>
      </IcLink>
    </IcBreadcrumb>
    <IcBreadcrumb pageTitle="Beverages">
      <IcLink>
        <NavLink slot="router-item" to="/">Beverages</NavLink>
      </IcLink>
    </IcBreadcrumb>
    <IcBreadcrumb pageTitle="Coffee" current>
      <IcLink>
        <NavLink to="/" slot="router-item">Coffee</NavLink>
      </IcLink>
    </IcBreadcrumb>
  </IcBreadcrumbGroup>
</MemoryRouter>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withReactRouter}>
  <MemoryRouter initialEntries={["/"]}>
    <IcBreadcrumbGroup>
      <IcBreadcrumb pageTitle="Home">
        <IcLink>
          <NavLink slot="router-item" to="/">
            Home
          </NavLink>
        </IcLink>
      </IcBreadcrumb>
      <IcBreadcrumb pageTitle="Beverages">
        <IcLink>
          <NavLink slot="router-item" to="/">
            Beverages
          </NavLink>
        </IcLink>
      </IcBreadcrumb>
      <IcBreadcrumb pageTitle="Coffee" current>
        <IcLink>
          <NavLink to="/" slot="router-item">
            Coffee
          </NavLink>
        </IcLink>
      </IcBreadcrumb>
    </IcBreadcrumbGroup>
  </MemoryRouter>
</ComponentPreview>

---

# Button

URL: https://design.sis.gov.uk/components/button/code
Status: BETA
Subtitle: Buttons are used to allow or encourage people to take an action.


import { IcButton, IcMenuGroup, IcMenuItem, IcPopoverMenu } from "@ukic/react";
import { useState } from "react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button id='my-button' variant="primary">Add to order</ic-button>
<ic-button variant="secondary">View coffees</ic-button>
<ic-button variant="tertiary">Find out more</ic-button>
<ic-button variant="destructive">Cancel order</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const btn = document.querySelector('#my-button');
    btn.addEventListener('click', (ev) => {
      console.log(ev);
    })
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="primary" onClick={(ev) => console.log(ev)}>
  Add to order
</IcButton>
<IcButton variant="secondary">View coffees</IcButton>
<IcButton variant="tertiary">Find out more</IcButton>
<IcButton variant="destructive">Cancel order</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsDefault}>
  <IcButton variant="primary" onClick={(ev) => console.log(ev)}>
    Add to order
  </IcButton>
  <IcButton variant="secondary">View coffees</IcButton>
  <IcButton variant="tertiary">Find out more</IcButton>
  <IcButton variant="destructive">Cancel order</IcButton>
</ComponentPreview>

## Button details

{
  "props": [
    {
      "name": "accept",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "accept",
      "reflectToAttr": false,
      "docs": "If `fileUpload` is set to `true`, this is the accepted list of file types.",
      "docsTags": [],
      "default": "\"*\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": true,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the button, e.g. dark, light, or the default.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableTooltip",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-tooltip",
      "reflectToAttr": false,
      "docs": "If `true`, the ic-tooltip which is shown for icon variant will be disabled. Title or aria-label must be set if this prop is not applied.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the button will be in disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "download",
      "type": "boolean | string",
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "If `true`, the user can save the linked URL instead of navigating to it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dropdown",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "dropdown",
      "reflectToAttr": false,
      "docs": "If `true`, the button will show a dropdown icon.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dropdownExpanded",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "dropdown-expanded",
      "reflectToAttr": true,
      "docs": "If `true`, the aria-expanded value will be set to true. This is only applied if the dropdown prop is also true.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fileInputName",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "file-input-name",
      "reflectToAttr": false,
      "docs": "The name of the control for the file input, which is submitted with the form data.",
      "docsTags": [],
      "default": "`ic-button-file-upload-input-${buttonIds++}`",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "fileUpload",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "file-upload",
      "reflectToAttr": false,
      "docs": "If `true`, when the button is clicked the native file explorer will be launched.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "form",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "form",
      "reflectToAttr": false,
      "docs": "The <form> element to associate the button with.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formaction",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formaction",
      "reflectToAttr": false,
      "docs": "The URL that processes the information submitted by the button. It overrides the action attribute of the button's form owner. Does nothing if there is no form owner.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formenctype",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formenctype",
      "reflectToAttr": false,
      "docs": "The way the submitted form data is encoded.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formmethod",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formmethod",
      "reflectToAttr": false,
      "docs": "The HTTP method used to submit the form.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formnovalidate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "formnovalidate",
      "reflectToAttr": false,
      "docs": "If `true`, the form will not be validated when submitted.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formtarget",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formtarget",
      "reflectToAttr": false,
      "docs": "The place to display the response from submitting the form. It overrides the target attribute of the button's form owner.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "If `true`, the button will fill the width of the container.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the link points to. This will render the button as an \"a\" tag.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "If `true`, the button will be in loading state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "multiple",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "multiple",
      "reflectToAttr": false,
      "docs": "If `fileUpload` is set to `true`, this boolean determines whether multiple files are accepted.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selectedFiles",
      "type": "FileList",
      "complexType": {
        "original": "FileList",
        "resolved": "FileList",
        "references": {
          "FileList": {
            "location": "global",
            "id": "global::FileList"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The list of the files that have been selected by a user.",
      "docsTags": [],
      "values": [
        {
          "type": "FileList"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the button to be displayed.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "tooltipPlacement",
      "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
      "complexType": {
        "original": "IcButtonTooltipPlacement",
        "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
        "references": {
          "IcButtonTooltipPlacement": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcButtonTooltipPlacement"
          }
        }
      },
      "mutable": false,
      "attr": "tooltip-placement",
      "reflectToAttr": false,
      "docs": "The position of the tooltip in relation to the button.",
      "docsTags": [],
      "default": "\"bottom\"",
      "values": [
        {
          "value": "bottom",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "transparentBackground",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "transparent-background",
      "reflectToAttr": false,
      "docs": "If `true`, the secondary variant of button will have a transparent background rather than white.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "complexType": {
        "original": "IcButtonTypes",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {
          "IcButtonTypes": {
            "location": "import",
            "path": "./ic-button.types",
            "id": "src/components/ic-button/ic-button.types.ts::IcButtonTypes"
          }
        }
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of the button.",
      "docsTags": [],
      "default": "\"button\"",
      "values": [
        {
          "value": "button",
          "type": "string"
        },
        {
          "value": "reset",
          "type": "string"
        },
        {
          "value": "submit",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"destructive\" | \"icon\" | \"icon-destructive\" | \"icon-primary\" | \"icon-secondary\" | \"icon-tertiary\" | \"primary\" | \"secondary\" | \"tertiary\"",
      "complexType": {
        "original": "IcButtonVariants",
        "resolved": "\"destructive\" | \"icon\" | \"icon-destructive\" | \"icon-primary\" | \"icon-secondary\" | \"icon-tertiary\" | \"primary\" | \"secondary\" | \"tertiary\"",
        "references": {
          "IcButtonVariants": {
            "location": "import",
            "path": "./ic-button.types",
            "id": "src/components/ic-button/ic-button.types.ts::IcButtonVariants"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the button to be displayed.",
      "docsTags": [],
      "default": "\"primary\"",
      "values": [
        {
          "value": "destructive",
          "type": "string"
        },
        {
          "value": "icon",
          "type": "string"
        },
        {
          "value": "icon-destructive",
          "type": "string"
        },
        {
          "value": "icon-primary",
          "type": "string"
        },
        {
          "value": "icon-secondary",
          "type": "string"
        },
        {
          "value": "icon-tertiary",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the button."
    },
    {
      "name": "icon",
      "docs": "Deprecated. This slot should not be used anymore. Use left-icon or right-icon slot instead."
    },
    {
      "name": "left-icon",
      "docs": "Content will be placed to the left of the button label."
    },
    {
      "name": "right-icon",
      "docs": "Content will be placed to the right of the button label."
    },
    {
      "name": "router-item",
      "docs": "Handle routing by nesting your routes in this slot. Setting loading to true will have no impact on this slot."
    },
    {
      "name": "top-icon",
      "docs": "Content will be placed above the button label."
    }
  ],
  "styles": [
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "The height of the button."
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the button."
    }
  ],
  "events": [
    {
      "event": "icBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when button has blur",
      "docsTags": []
    },
    {
      "event": "icFileSelection",
      "detail": "FileList",
      "bubbles": true,
      "complexType": {
        "original": "FileList",
        "resolved": "FileList",
        "references": {
          "FileList": {
            "location": "global",
            "id": "global::FileList"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "If `fileUpload` is set to `true`, this will be emitted when a file is selected in the native explorer.",
      "docsTags": []
    },
    {
      "event": "icFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when button has focus",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `button`.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "click",
      "capture": true,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Other states

export const snippetsOtherStates = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="primary" disabled="true">Add to order</ic-button>
<ic-button variant="secondary" loading="true">Loading button</ic-button>
<ic-button variant="primary" dropdown="true">Add to order</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="primary" disabled>Add to order</IcButton>
<IcButton variant="secondary" loading>Loading button</IcButton>
<IcButton variant="primary" dropdown>Add to order</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsOtherStates}>
  <IcButton variant="primary" disabled>
    Add to order
  </IcButton>
  <IcButton variant="secondary" loading>
    Loading button
  </IcButton>
  <IcButton variant="primary" dropdown>
    Add to order
  </IcButton>
</ComponentPreview>

### With icon

export const snippetsWithIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="primary">
  <svg
    slot="left-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
    >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
  Refresh order status
</ic-button>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="primary">
  <SlottedSVG
    slot="left-icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
    >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </SlottedSVG>
  Refresh order status
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsWithIcon}>
  <IcButton variant="primary">
    Refresh order status
    <svg
      slot="left-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </svg>
  </IcButton>
</ComponentPreview>

### Icon Button

When using an icon button, refer to the guidance of using [tooltips](/components/tooltip/#when-to-use). When disabling tooltips, provide a suitable `aria-label` or `title` to provide context to screen readers.

export const snippetsIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button 
  variant="icon-primary" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</ic-button>
<ic-button 
  variant="icon-secondary" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</ic-button>
<ic-button 
  variant="icon-tertiary" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</ic-button>
<ic-button 
  variant="icon-destructive" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</ic-button>
<ic-button
  variant="icon"
  aria-label="you can disable tooltips on icon buttons"
  disable-tooltip="true"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton 
  variant="icon-primary" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</IcButton>
<IcButton 
  variant="icon-secondary" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</IcButton>
<IcButton 
  variant="icon-tertiary" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</IcButton>
<IcButton 
  variant="icon-destructive" 
  aria-label="refresh"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
  </svg>
</IcButton>
<IcButton
  variant="icon"
  aria-label="you can disable tooltips on icon buttons"
  disableTooltip
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
    />
  </svg>
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsIcon}>
  <IcButton variant="icon-primary" aria-label="refresh">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </svg>
  </IcButton>
  <IcButton
    variant="icon-secondary"
    aria-label="you can disable tooltips on icon buttons"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </svg>
  </IcButton>
  <IcButton variant="icon-tertiary" aria-label="refresh">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </svg>
  </IcButton>
  <IcButton variant="icon-destructive" aria-label="refresh">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </svg>
  </IcButton>
  <IcButton
    variant="icon"
    aria-label="you can disable tooltips on icon buttons"
    disableTooltip
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </svg>
  </IcButton>
</ComponentPreview>

### Tooltip

export const snippetsTooltip = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="primary" title="We can add tooltips to text buttons">Button With Title</ic-button>
<ic-button
  variant="primary"
  title="the tooltipPlacement prop allows us to change the location of the tooltip"
  tooltip-placement="right"
>
  Different positions
</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="primary" title="We can add tooltips to text buttons">
  Button With Title
</IcButton>
<IcButton
  variant="primary"
  title="the tooltipPlacement prop allows us to change the location of the tooltip"
  tooltipPlacement="right"
>
  Different positions
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ gap: "var(--ic-space-xs)" }}
  snippets={snippetsTooltip}
>
  <IcButton variant="primary" title="We can add tooltips to text buttons">
    Button With Title
  </IcButton>
  <IcButton
    variant="primary"
    title="the tooltipPlacement prop allows us to change the location of the tooltip"
    tooltipPlacement="right"
  >
    Different positions
  </IcButton>
</ComponentPreview>

### Sizing

export const snippetsSizing = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="primary" size="small">Add to order</ic-button>
<ic-button variant="primary">Add to order</ic-button>
<ic-button variant="primary" size="large">Add to order</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="primary" size="small">Add to order</IcButton>
<IcButton variant="primary">Add to order</IcButton>
<IcButton variant="primary" size="large">Add to order</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsSizing}>
  <IcButton variant="primary" size="small">
    Add to order
  </IcButton>
  <IcButton variant="primary">Add to order</IcButton>
  <IcButton variant="primary" size="large">
    Add to order
  </IcButton>
</ComponentPreview>

### Colour variants

export const snippetsColour = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button variant="primary">Add to order</ic-button>
<ic-button variant="primary" appearance="dark">Add to order</ic-button>
<ic-button variant="primary" appearance="light">Add to order</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton variant="primary">Add to order</IcButton>
<IcButton variant="primary" appearance="dark">Add to order</IcButton>
<IcButton variant="primary" appearance="light">Add to order</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsColour}>
  <IcButton variant="primary">Add to order</IcButton>
  <IcButton variant="primary" appearance="dark">
    Add to order
  </IcButton>
  <IcButton variant="primary" appearance="light">
    Add to order
  </IcButton>
</ComponentPreview>

### File upload

export const snippetsFileUpload = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button
  variant="primary"
  id="file-button-single"
  file-upload="true"
  accept=".doc, text/plain, .json, .png"
>
  Upload a file
</ic-button>
<ic-button
  variant="primary"
  id="file-button-multiple"
  file-upload="true"
  multiple="true"
  accept=".doc, text/plain, .json, .png"
>
  Upload multiple files
</ic-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--ic-space-xs);
    padding: var(--ic-space-md);
  }
</style>
<body>  
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    document
      .querySelector("#file-button-single")
      .addEventListener("icFileSelection", (ev) => {
        console.log("Single file upload", ev.detail);
      });
    document
      .querySelector("#file-button-multiple")
      .addEventListener("icFileSelection", (ev) => {
        console.log("Multiple files upload", ev.detail);
      });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton
  variant="primary"
  fileUpload
  accept=".doc, text/plain, .json, .png"
  onIcFileSelection={(event) =>
    console.log("Single file upload", event.detail)
  }
>
  Upload a file
</IcButton>
<IcButton
  variant="primary"
  fileUpload
  multiple
  accept=".doc, text/plain, .json, .png"
  onIcFileSelection={(event) =>
    console.log("Multiple files upload", event.detail)
  }
>
  Upload multiple files
</IcButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsFileUpload} style={{ gap: "0.5rem" }}>
  <IcButton
    variant="primary"
    fileUpload
    accept=".doc, text/plain, .json, .png"
    onIcFileSelection={(event) =>
      console.log("Single file upload", event.detail)
    }
  >
    Upload a file
  </IcButton>
  <IcButton
    variant="primary"
    fileUpload
    multiple
    accept=".doc, text/plain, .json, .png"
    onIcFileSelection={(event) =>
      console.log("Multiple files upload", event.detail)
    }
  >
    Upload multiple files
  </IcButton>
</ComponentPreview>

### Dropdown button with popover menu

export const snippetsDropdownButton = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button
  dropdown="true"
  variant="primary"
  id="dropdown-button-popover"
  onclick="handleClick()"
>
  Actions
</ic-button>
<ic-popover-menu
  anchor="dropdown-button-popover"
  aria-label="popover"
  id="dropdown-button-popover-menu"
>
  <ic-menu-group label="Sort">
    <ic-menu-item label="Sort ascending">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M7.03 9.97H11.03V18.89L13.04 18.92V9.97H17.03L12.03 4.97Z"
        />
      </svg>
    </ic-menu-item>
    <ic-menu-item label="Sort descending">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M7.03 13.92H11.03V5L13.04 4.97V13.92H17.03L12.03 18.92Z" />
      </svg>
    </ic-menu-item>
  </ic-menu-group>
  <ic-menu-item label="Filter" variant="toggle">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path
        d="M2.39 1.73L1.11 3L9 10.89V15.87C8.96 16.16 9.06 16.47 9.29 16.7L13.3 20.71C13.69 21.1 14.32 21.1 14.71 20.71C14.94 20.5 15.04 20.18 15 19.88V16.89L20.84 22.73L22.11 21.46L15 14.35V14.34L13 12.35L11 10.34L4.15 3.5L2.39 1.73M6.21 3L8.2 5H16.96L13.11 9.91L15 11.8V10.75L19.79 4.62C20.13 4.19 20.05 3.56 19.62 3.22C19.43 3.08 19.22 3 19 3H6.21M11 12.89L13 14.89V17.58L11 15.58V12.89Z"
      />
    </svg>
  </ic-menu-item>
  <ic-menu-group label="Manage columns">
    <ic-menu-item label="Hide column" variant="toggle">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.33,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z"
        />
      </svg>
    </ic-menu-item>
    <ic-menu-item label="Column width">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M21,9L17,5V8H10V10H17V13M7,11L3,15L7,19V16H14V14H7V11Z" />
      </svg>
    </ic-menu-item>
  </ic-menu-group>
</ic-popover-menu>`,
      long: `{shortCode}
<script>
  let icPopover = document.querySelector('#dropdown-button-popover-menu');
  let icButton = document.querySelector('#dropdown-button-popover');
  function handleClick() {
    icPopover.open = !icPopover.open;
  }
  icPopover.addEventListener('icPopoverClosed', (ev) => {
    icButton.setAttribute('dropdown-expanded', false);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton
  dropdown
  dropdownExpanded={popoverOpen}
  variant="primary"
  id="dropdown-button-popover"
  onClick={handlePopoverToggled}
>
  Actions
</IcButton>
<IcPopoverMenu
  anchor="dropdown-button-popover"
  aria-label="popover"
  open={popoverOpen}
  onIcPopoverClosed={handlePopoverClosed}
>
  <IcMenuGroup label="Sort">
    <IcMenuItem label="Sort ascending">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        path={mdiArrowUpThin}
      />
    </IcMenuItem>
    <IcMenuItem label="Sort descending">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        path={mdiArrowDownThin}
      />
    </IcMenuItem>
  </IcMenuGroup>
  <IcMenuItem label="Filter" variant="toggle">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      path={mdiFilterOffOutline}
    />
  </IcMenuItem>
  <IcMenuGroup label="Manage columns">
    <IcMenuItem label="Hide column" variant="toggle">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        path={mdiEyeOffOutline}
      />
    </IcMenuItem>
    <IcMenuItem label="Column width">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        path={mdiSwapHorizontal}
      />
    </IcMenuItem>
  </IcMenuGroup>
</IcPopoverMenu>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState<boolean>(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const DropdownButtonPopover = () => {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const handlePopoverToggled = () => setPopoverOpen((value) => !value);
  const handlePopoverClosed = () => setPopoverOpen(false);
  return (
    <>
      <IcButton
        dropdown
        dropdownExpanded={popoverOpen}
        variant="primary"
        id="dropdown-button-popover"
        onClick={handlePopoverToggled}
      >
        Actions
      </IcButton>
      <IcPopoverMenu
        anchor="dropdown-button-popover"
        aria-label="popover"
        open={popoverOpen}
        onIcPopoverClosed={handlePopoverClosed}
      >
        <IcMenuGroup label="Sort">
          <IcMenuItem label="Sort ascending">
            <svg
              slot="icon"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <path d="M7.03 9.97H11.03V18.89L13.04 18.92V9.97H17.03L12.03 4.97Z" />
            </svg>
          </IcMenuItem>
          <IcMenuItem label="Sort descending">
            <svg
              slot="icon"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <path d="M7.03 13.92H11.03V5L13.04 4.97V13.92H17.03L12.03 18.92Z" />
            </svg>
          </IcMenuItem>
        </IcMenuGroup>
        <IcMenuItem label="Filter" variant="toggle">
          <svg
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <path d="M2.39 1.73L1.11 3L9 10.89V15.87C8.96 16.16 9.06 16.47 9.29 16.7L13.3 20.71C13.69 21.1 14.32 21.1 14.71 20.71C14.94 20.5 15.04 20.18 15 19.88V16.89L20.84 22.73L22.11 21.46L15 14.35V14.34L13 12.35L11 10.34L4.15 3.5L2.39 1.73M6.21 3L8.2 5H16.96L13.11 9.91L15 11.8V10.75L19.79 4.62C20.13 4.19 20.05 3.56 19.62 3.22C19.43 3.08 19.22 3 19 3H6.21M11 12.89L13 14.89V17.58L11 15.58V12.89Z" />
          </svg>
        </IcMenuItem>
        <IcMenuGroup label="Manage columns">
          <IcMenuItem label="Hide column" variant="toggle">
            <svg
              slot="icon"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <path d="M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.33,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z" />
            </svg>
          </IcMenuItem>
          <IcMenuItem label="Column width">
            <svg
              slot="icon"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <path d="M21,9L17,5V8H10V10H17V13M7,11L3,15L7,19V16H14V14H7V11Z" />
            </svg>
          </IcMenuItem>
        </IcMenuGroup>
      </IcPopoverMenu>
    </>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
  snippets={snippetsDropdownButton}
>
  <DropdownButtonPopover />
</ComponentPreview>

---

# Card

URL: https://design.sis.gov.uk/components/card/code
Status: BETA
Subtitle: Cards are containers used to display structured information or interactive content.


import {
  IcCard,
  IcStatusTag,
  IcButton,
  IcTypography,
  SlottedSVG,
  IcBadge,
} from "@ukic/react";

export const CardIcon = () => (
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
  </svg>
);

export const InteractionIcon = () => (
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </svg>
);

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <ic-button variant="icon" title="More information" slot="interaction-button">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </svg>
  </ic-button>
  <ic-status-tag slot="adornment" label="In Progress" small="true"></ic-status-tag>
  <svg
    slot="image-mid"
    class="card-image"
    viewBox="0 0 1600 1250"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
  <div 
    slot="interaction-controls" 
    class="interaction-area"
  >
    <ic-button variant="primary">Accept</ic-button>
    <ic-button variant="secondary">Cancel</ic-button>
  </div>
  <ic-typography slot="expanded-content" variant="body">
    To cancel your order click cancel.
  </ic-typography>
</ic-card>`,
      long: `ic-card {
    width: 22.5rem;
  }
  .interaction-area {
    display: flex;
    gap: var(--ic-space-md);
  }
  .card-image {
    height: 100%;
    width: 100%;
    max-height: 20.375rem;
    max-width: 20.375rem;
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  className={classes.card}
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <IcButton variant="icon" title="More information" slot="interaction-button">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </SlottedSVG>
  </IcButton> 
  <IcStatusTag slot="adornment" label="In Progress" small />
  <SlottedSVG
    slot="image-mid"
    viewBox="0 0 1600 1250"
    className={classes.cardImage}
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
  <div 
    slot="interaction-controls" 
    className={classes.interactionArea}>
    <IcButton variant="primary">Accept</IcButton>
    <IcButton variant="secondary">Cancel</IcButton>
  </div>
  <IcTypography slot="expanded-content" variant="body">
    To cancel your order click cancel.
  </IcTypography>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  card: {
    width: "22.5rem",
  },
  cardImage: {
    height: "100%",
    width: "100%",
    maxHeight: "20.375rem",
    maxWidth: "20.375rem",
  },
  interactionArea: {
    display: "flex",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  card: {
    width: "22.5rem",
  },
  cardImage: {
    height: "100%",
    width: "100%",
    maxHeight: "20.375rem",
    maxWidth: "20.375rem",
  },
  interactionArea: {
    display: "flex",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    expandable
    style={{ width: "22.5rem" }}
  >
    <IcStatusTag slot="adornment" status="warning" label="In Progress" small />
    <IcButton variant="icon" title="More information" slot="interaction-button">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="bi bi-three-dots-vertical"
        viewBox="0 0 16 16"
      >
        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
      </svg>
    </IcButton>
    <svg
      slot="image-mid"
      style={{
        height: "100%",
        width: "100%",
        maxHeight: "20.375rem",
        maxWidth: "20.375rem",
      }}
      viewBox="0 0 1600 1250"
    >
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <div slot="interaction-controls" style={{ display: "flex", gap: "1rem" }}>
      <IcButton variant="primary">Accept</IcButton>
      <IcButton variant="secondary">Cancel</IcButton>
    </div>
    <IcTypography slot="expanded-content" variant="body">
      To cancel your order click cancel.
    </IcTypography>
  </IcCard>
</ComponentPreview>

## Card details

{
  "props": [
    {
      "name": "clickable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "clickable",
      "reflectToAttr": false,
      "docs": "If `true`, the card will be a clickable variant, instead of static.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the card will be disabled if it is clickable.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "expandable",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "expandable",
      "reflectToAttr": false,
      "docs": "If `true`, the card will have an expandable area and expansion toggle button.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "If `true`, the card will fill the width of the container.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The heading for the card. This is required, unless a slotted heading is used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the clickable card link points to. If set, the clickable card will render as an \"a\" tag, otherwise it will render as a button.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "message",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "The main body message of the card.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "subheading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "subheading",
      "reflectToAttr": false,
      "docs": "The subheading for the card.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "adornment",
      "docs": "Content will be placed below the card subheading."
    },
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the card."
    },
    {
      "name": "expanded-content",
      "docs": "Content will be placed below the interaction controls but will not initially be rendered."
    },
    {
      "name": "heading",
      "docs": "Content will be placed at the top of the card to the right of the icon."
    },
    {
      "name": "icon",
      "docs": "Content will be placed to the left of the card heading."
    },
    {
      "name": "image-mid",
      "docs": "Content will be placed below the card heading section."
    },
    {
      "name": "image-top",
      "docs": "Content will be placed at the top of the card above all other content."
    },
    {
      "name": "interaction-button",
      "docs": "Content will be placed in the top right corner of the heading section."
    },
    {
      "name": "interaction-controls",
      "docs": "Content will be placed below the card message."
    },
    {
      "name": "message",
      "docs": "Content will be placed in the main body of the card."
    },
    {
      "name": "subheading",
      "docs": "Content will be placed below the card heading."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the card.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "click",
      "capture": true,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Heading only

export const headingOnly = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card heading="Americano order"></ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard heading="Americano order"></IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={headingOnly}>
  <IcCard heading="Americano order" />
</ComponentPreview>

### With icon

export const withIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card heading="Americano order">
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard heading="Americano order">
  <SlottedSVG     
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withIcon}>
  <IcCard heading="Americano order">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcCard>
</ComponentPreview>

### Message

export const withMessage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card heading="Americano order" message="Extras: Double espresso shot and oat milk.">
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard heading="Americano order" message="Extras: Double espresso shot and oat milk.">
  <SlottedSVG     
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withMessage}>
  <IcCard
    heading="Americano order"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### With subheading

export const withSubHeading = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <SlottedSVG     
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
    </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withSubHeading}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### Interaction button

export const interactionButton = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <ic-button variant="icon" title="More information" slot="interaction-button">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </svg>
  </ic-button>
</ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <SlottedSVG     
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <IcButton variant="icon" title="More information" slot="interaction-button">
    <SlottedSVG slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </SlottedSVG>
  </IcButton>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={interactionButton}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <IcButton variant="icon" title="More information" slot="interaction-button">
      <InteractionIcon />
    </IcButton>
  </IcCard>
</ComponentPreview>

### Adornment

export const adornment = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <ic-status-tag slot="adornment" status="warning" label="In Progress" size="small"></ic-status-tag>
</ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <SlottedSVG 
    slot="icon"   
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <IcStatusTag slot="adornment" status="warning" label="In Progress" size="small" />
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={adornment}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <IcStatusTag
      slot="adornment"
      status="warning"
      label="In Progress"
      size="small"
    />
  </IcCard>
</ComponentPreview>

### Top image

export const topImage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="image-top"
    class="card-image"
    viewBox="0 0 1600 1250"
    xmlns="http://www.w3.org/2000/svg"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <ic-button variant="icon" title="More information" slot="interaction-button">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </svg>
  </ic-button>
  <ic-status-tag slot="adornment" status="warning" label="In Progress" size="small"></ic-status-tag>
</ic-card>`,
      long: `ic-card {
        width: 22.5rem;
    }
    .card-image {
      height: 100%;
      width: 100%;
      maxHeight: 20.375rem;
      maxWidth: 20.375rem;
    }
    </style>
    <body>
      {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  className={classes.card}
>
  <SlottedSVG
    slot="image-top"
    className={classes.cardImage}
    viewBox="0 0 1600 1250"
    xmlns="http://www.w3.org/2000/svg"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <IcButton variant="icon" title="More information" slot="interaction-button">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </SlottedSVG>
  </IcButton> 
  <IcStatusTag slot="adornment" status="warning" label="In Progress" size="small" />
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  card: {
    width: "22.5rem",
  },
  cardImage: {
    height: "100%",
    width: "100%",
    maxHeight: "20.375rem",
    maxWidth: "20.375rem",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={topImage}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <IcStatusTag
      slot="adornment"
      status="warning"
      label="In Progress"
      size="small"
    />
    <IcButton variant="icon" title="More information" slot="interaction-button">
      <InteractionIcon />
    </IcButton>
    <svg
      slot="image-top"
      style={{
        height: "100%",
        width: "100%",
        maxHeight: "20.375rem",
        maxWidth: "20.375rem",
      }}
      viewBox="0 0 1600 1250"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCard>
</ComponentPreview>

### Middle image

export const midImage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <ic-button variant="icon" title="More information" slot="interaction-button">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
    >
      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
    </svg>
  </ic-button>
  <ic-status-tag slot="adornment" status="warning" label="In Progress" size="small"></ic-status-tag>
  <svg
    slot="image-mid"
    class="card-image"
    viewBox="0 0 1600 1250"
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-card>`,
      long: `ic-card {
        width: 22.5rem;
    }
    .card-image {
      height: 100%;
      width: 100%;
      maxHeight: 20.375rem;
      maxWidth: 20.375rem;
    }
    </style>
    <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  className={classes.card}
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <IcButton variant="icon" title="More information" slot="interaction-button">
    <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        viewBox="0 0 16 16"
      >
        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
      </SlottedSVG>
  </IcButton> 
  <IcStatusTag slot="adornment" status="warning" label="In Progress" size="small" />
  <SlottedSVG
    slot="image-mid"
    viewBox="0 0 1600 1250"
    className={classes.cardImage}
  >
    <rect fill="#ff7700" width="1600" height="1600" y="-350" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  card: {
    width: "22.5rem",
  },
  cardImage: {
    height: "100%",
    width: "100%",
    maxHeight: "20.375rem",
    maxWidth: "20.375rem",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  card: {
    width: "22.5rem",
  },
  cardImage: {
    height: "100%",
    width: "100%",
    maxHeight: "20.375rem",
    maxWidth: "20.375rem",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={midImage}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <IcButton variant="icon" title="More information" slot="interaction-button">
      <InteractionIcon />
    </IcButton>
    <IcStatusTag
      slot="adornment"
      status="warning"
      label="In Progress"
      size="small"
    />
    <svg
      slot="image-mid"
      style={{
        height: "100%",
        width: "100%",
        maxHeight: "20.375rem",
        maxWidth: "20.375rem",
      }}
      viewBox="0 0 1600 1250"
    >
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcCard>
</ComponentPreview>

### Interaction controls

export const interactionControls = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
 <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </svg>
  <div slot="interaction-controls" class="interaction-area">
    <ic-button variant="primary">Accept</ic-button>
    <ic-button variant="secondary">Cancel</ic-button>
  </div>
</ic-card>`,
      long: `.interaction-area {
      display: flex;
      gap: var(--ic-space-md);
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
>
 <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
  <div slot="interaction-controls" className={classes.interactionArea}>
    <IcButton variant="primary">Accept</IcButton>
    <IcButton variant="secondary">Cancel</IcButton>
  </div>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  interactionArea: {
    display: "flex",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  interactionArea: {
    display: "flex",
    gap: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={interactionControls}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <div slot="interaction-controls" style={{ display: "flex", gap: "1rem" }}>
      <IcButton variant="primary">Accept</IcButton>
      <IcButton variant="secondary">Cancel</IcButton>
    </div>
  </IcCard>
</ComponentPreview>

### Expandable

export const expandable = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  expandable="true"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
     <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
  <div slot="interaction-controls" class="interaction-area">
    <ic-button variant="primary">Accept</ic-button>
    <ic-button variant="secondary">Cancel</ic-button>
  </div>
  <ic-typography slot="expanded-content" variant="body">
    To cancel your order click cancel.
  </ic-typography>
</ic-card>`,
      long: `.interaction-area {
    display: flex;
    gap: var(--ic-space-md);
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  expandable
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
     <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
  <div slot="interaction-controls" className={classes.interactionArea}>
    <IcButton variant="primary">Accept</IcButton>
    <IcButton variant="secondary">Cancel</IcButton>
  </div>
  <IcTypography slot="expanded-content" variant="body">
    To cancel your order click cancel.
  </IcTypography>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
    interactionArea: {
      display: "flex",
      gap: "var(--ic-space-md)",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
    interactionArea: {
      display: "flex",
      gap: "var(--ic-space-md)",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={expandable}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    expandable
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <div slot="interaction-controls" style={{ display: "flex", gap: "1rem" }}>
      <IcButton variant="primary">Accept</IcButton>
      <IcButton variant="secondary">Cancel</IcButton>
    </div>
    <IcTypography slot="expanded-content" variant="body">
      To cancel your order click cancel.
    </IcTypography>
  </IcCard>
</ComponentPreview>

### Clickable link

export const clickableLink = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  clickable="true"
  href="#"
>
 <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  clickable
  href="#"
>
 <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={clickableLink}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    clickable="true"
    href="#"
    onClick={(e) => e.preventDefault()}
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### Clickable button

export const clickableBtn = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card
  id="clickable-card"
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  clickable="true"
>
 <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const card = document.querySelector('#clickable-card');
    card.addEventListener('click', (ev) => {
      console.log(ev);
    })
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk." 
  clickable
  onClick={(ev) => console.log(ev)}
>
 <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
   <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={clickableBtn}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    clickable="true"
    onClick={(ev) => console.log(ev)}
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### With badge

export const withBadge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  clickable="true"
  href="#"
>
 <ic-badge
    text-label="New"
    slot="badge"
    variant="info"
    size="large"
  ></ic-badge>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk." 
  clickable
  href="#"
>
 <IcBadge size="large" textLabel="New" slot="badge" variant="info"/>
 <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withBadge}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    clickable="true"
    href="#"
    onClick={(e) => e.preventDefault()}
  >
    <IcBadge size="large" textLabel="New" slot="badge" variant="info" />
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### Disabled

export const disabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  clickable="true" 
  disabled="true"
>
 <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
     <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk." 
  clickable
  disabled
>
 <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disabled}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    clickable
    disabled
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### Full width

export const fullWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  full-width="true"
  clickable="true"
>
 <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-card>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard 
  heading="Americano order" 
  subheading="Name: Michael" 
  message="Extras: Double espresso shot and oat milk."
  fullWidth
  clickable
>
 <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
     <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={fullWidth}>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    fullWidth
    clickable
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcCard>
</ComponentPreview>

### Wrapped by link

export const wrapped = [
  {
    technology: "Web component",
    snippets: {
      short: `<a href="/">
  <ic-card 
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."> 
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
    </svg>
  </ic-card>
</a>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<a href="/">
  <IcCard 
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."> 
  <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
    </svg>
  </IcCard>
</a>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={wrapped}>
  <a
    href="/"
    onClick={(e) => e.preventDefault()}
    style={{ textDecoration: "none", color: "var(--ic-architechtural-black)" }}
    aria-label="Americano order card"
  >
    <IcCard
      heading="Americano order"
      subheading="Name: Michael"
      message="Extras: Double espresso shot and oat milk."
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </svg>
    </IcCard>
  </a>
</ComponentPreview>

---

# Checkbox

URL: https://design.sis.gov.uk/components/checkbox/code
Status: BETA
Subtitle: Use checkboxes as part of a form, in dialogs and in control areas such as filters or settings.


import { IcCheckboxGroup, IcCheckbox, IcTextField } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Select your extras" name="default">
  <ic-checkbox value="extra" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="Soya milk" label="Soya milk" checked ></ic-checkbox>
  <ic-checkbox value="keep cup" label="Takeaway cup" disabled="true" ></ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}
<script>
  const checkboxGroup = document.querySelector('ic-checkbox-group');
  checkboxGroup.addEventListener('icChange', (ev) => console.log('icChange', ev.detail.value));
  const checkboxes = document.querySelector('ic-checkbox');
  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener('icCheck', (ev) => {
      console.log('icCheck', ev);
    })
  })
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Select your extras" name="default" onIcChange={(ev) => console.log("onIcChange", ev.detail.value)}>
  <IcCheckbox value="extra" label="Extra shot (50p)" onIcCheck={(ev) => console.log("onIcCheck", ev)} />
  <IcCheckbox value="Soya milk" label="Soya milk" checked />
  <IcCheckbox value="keep cup" label="Takeaway cup" disabled />
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault} style={{ marginTop: "1.5rem" }}>
  <IcCheckboxGroup
    label="Select your extras"
    name="default"
    onIcChange={(ev) => console.log("onIcChange", ev.detail.value)}
  >
    <IcCheckbox
      value="extra"
      label="Extra shot (50p)"
      onIcCheck={(ev) => console.log("onIcCheck", ev)}
    />
    <IcCheckbox value="Soya milk" label="Soya milk" checked />
    <IcCheckbox value="keep cup" label="Takeaway cup" disabled />
  </IcCheckboxGroup>
</ComponentPreview>

## Checkbox group details

{
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox group will be set to the disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the checkbox group to be displayed.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name for the checkbox group to differentiate from other groups.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox group will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the checkboxes to be displayed. This does not affect the font size of the label.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": false,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation status - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The validation text - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [
    {
      "event": "icChange",
      "detail": "IcChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcChangeEventDetail",
        "resolved": "IcChangeEventDetail",
        "references": {
          "IcChangeEventDetail": {
            "location": "import",
            "path": "./ic-checkbox-group.types",
            "id": "src/components/ic-checkbox-group/ic-checkbox-group.types.ts::IcChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a checkbox is checked.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "icChange",
      "capture": false,
      "passive": false
    },
    {
      "event": "icCheck",
      "capture": false,
      "passive": false
    }
  ]
}


## Checkbox details

{
  "props": [
    {
      "name": "additionalFieldDisplay",
      "type": "\"dynamic\" | \"static\"",
      "complexType": {
        "original": "IcAdditionalFieldTypes",
        "resolved": "\"dynamic\" | \"static\"",
        "references": {
          "IcAdditionalFieldTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAdditionalFieldTypes"
          }
        }
      },
      "mutable": false,
      "attr": "additional-field-display",
      "reflectToAttr": true,
      "docs": "The style of additionalField that will be displayed if used.",
      "docsTags": [],
      "default": "\"static\"",
      "values": [
        {
          "value": "dynamic",
          "type": "string"
        },
        {
          "value": "static",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "checked",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "checked",
      "reflectToAttr": true,
      "docs": "If `true`, the checkbox will be set to the checked state. This is only the initial state and will be updated to unchecked if the checkbox is clicked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox will be set to the disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dynamicText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "dynamic-text",
      "reflectToAttr": false,
      "docs": "The text to be displayed when dynamic.",
      "docsTags": [],
      "default": "\"This selection requires additional answers\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "form",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "form",
      "reflectToAttr": false,
      "docs": "The <form> element to associate the checkbox with.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formaction",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formaction",
      "reflectToAttr": false,
      "docs": "The URL that processes the information submitted by the checkbox. It overrides the action attribute of the checkbox's form owner. Does nothing if there is no form owner.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formenctype",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formenctype",
      "reflectToAttr": false,
      "docs": "The way the submitted form data is encoded.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formmethod",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formmethod",
      "reflectToAttr": false,
      "docs": "The HTTP method used to submit the form.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formnovalidate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "formnovalidate",
      "reflectToAttr": false,
      "docs": "If `true`, the form will not be validated when submitted.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formtarget",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formtarget",
      "reflectToAttr": false,
      "docs": "The place to display the response from submitting the form. It overrides the target attribute of the checkbox's form owner.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "groupLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "group-label",
      "reflectToAttr": false,
      "docs": "The group label for the checkbox.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "indeterminate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "indeterminate",
      "reflectToAttr": false,
      "docs": "If `true`, the indeterminate state will be displayed when checked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the checkbox.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name for the checkbox. If not set when used in a checkbox group, the name will be based on the group name.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "nativeIndeterminateBehaviour",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "native-indeterminate-behaviour",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox will behave like a native checkbox where the `indeterminate` prop sets the indeterminate visual styling, independent of the `checked` state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the checkbox to be displayed. This does not affect the font size of the label. If a checkbox is contained in a checkbox group, this will override the size set on checkbox group.",
      "docsTags": [],
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value for the checkbox.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    }
  ],
  "slots": [
    {
      "name": "additional-field",
      "docs": "Content to be displayed alongside a checkbox."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "checkboxChecked",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icCheck instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icCheck instead."
    },
    {
      "event": "icCheck",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a checkbox has been checked.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLElement": {
            "location": "global",
            "id": "global::HTMLElement"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the checkbox.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Variants

### Hidden label

export const snippetsHiddenLabel = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Select your extras" hide-label="true" name="1">
  <ic-checkbox value="valueName1" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="valueName2" label="Soya milk" checked="true"></ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Select your extras" hideLabel name="1">
  <IcCheckbox value="valueName1" label="Extra shot (50p)" />
  <IcCheckbox value="valueName2" label="Soya milk" checked />
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsHiddenLabel}
  style={{ marginTop: "1.5rem" }}
>
  <IcCheckboxGroup label="Select your extras" hideLabel name="1">
    <IcCheckbox value="valueName1" label="Extra shot (50p)" />
    <IcCheckbox value="valueName2" label="Soya milk" checked />
  </IcCheckboxGroup>
</ComponentPreview>

### Helper text

export const snippetsHelperText = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Select your extras" name="1" helper-text="Additional charges may apply.">
  <ic-checkbox value="valueName1" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="valueName2" label="Soya milk" checked="true"></ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Select your extras" name="1" helperText="Additional charges may apply.">
  <IcCheckbox value="valueName1" label="Extra shot (50p)" />
  <IcCheckbox value="valueName2" label="Soya milk" checked />
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsHelperText} style={{ marginTop: "1.5rem" }}>
  <IcCheckboxGroup
    label="Select your extras"
    name="1"
    helperText="Additional charges may apply."
  >
    <IcCheckbox value="valueName1" label="Extra shot (50p)" />
    <IcCheckbox value="valueName2" label="Soya milk" checked />
  </IcCheckboxGroup>
</ComponentPreview>

### Sizes

export const snippetsSizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Select your extras" name="1" size="small">
  <ic-checkbox value="valueName1" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="valueName2" label="Soya milk" checked="true"></ic-checkbox>
</ic-checkbox-group>
<ic-checkbox-group label="Select your extras" name="2">
  <ic-checkbox value="valueName1" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="valueName2" label="Soya milk" checked="true"></ic-checkbox>
</ic-checkbox-group>
<ic-checkbox-group label="Select your extras" name="3" size="large">
  <ic-checkbox value="valueName1" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="valueName2" label="Soya milk" checked="true"></ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Select your extras" name="1" size="small">
  <IcCheckbox value="valueName1" label="Extra shot (50p)" />
  <IcCheckbox value="valueName2" label="Soya milk" checked />
</IcCheckboxGroup>
<IcCheckboxGroup label="Select your extras" name="2">
  <IcCheckbox value="valueName1" label="Extra shot (50p)" />
  <IcCheckbox value="valueName2" label="Soya milk" checked />
</IcCheckboxGroup>
<IcCheckboxGroup label="Select your extras" name="3" size="large">
  <IcCheckbox value="valueName1" label="Extra shot (50p)" />
  <IcCheckbox value="valueName2" label="Soya milk" checked />
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSizes} style={{ gap: "1.5rem" }}>
  <IcCheckboxGroup label="Select your extras" name="1" size="small">
    <IcCheckbox value="valueName1" label="Extra shot (50p)" />
    <IcCheckbox value="valueName2" label="Soya milk" checked />
  </IcCheckboxGroup>
  <IcCheckboxGroup label="Select your extras" name="2">
    <IcCheckbox value="valueName1" label="Extra shot (50p)" />
    <IcCheckbox value="valueName2" label="Soya milk" checked />
  </IcCheckboxGroup>
  <IcCheckboxGroup label="Select your extras" name="3" size="large">
    <IcCheckbox value="valueName1" label="Extra shot (50p)" />
    <IcCheckbox value="valueName2" label="Soya milk" checked />
  </IcCheckboxGroup>
</ComponentPreview>

### Setting each checkbox size

export const snippetsSettingEachCheckboxSize = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox value="valueName1" label="Extra shot (50p)" size="small" />
<ic-checkbox value="valueName2" label="Extra shot (50p)" />
<ic-checkbox value="valueName3" label="Extra shot (50p)" size="large" />`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckbox value="valueName1" label="Extra shot (50p)" size="small" />
<IcCheckbox value="valueName2" label="Extra shot (50p)" />
<IcCheckbox value="valueName3" label="Extra shot (50p)" size="large" />`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsSettingEachCheckboxSize}
  style={{
    gap: "1.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
>
  <IcCheckbox value="valueName1" label="Extra shot (50p)" size="small" />
  <IcCheckbox value="valueName2" label="Extra shot (50p)" />
  <IcCheckbox value="valueName3" label="Extra shot (50p)" size="large" />
</ComponentPreview>

### Conditional

export const snippetsConditional = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Which coffee do you like best?" name="conditional">
  <ic-checkbox value="americano" label="Americano"></ic-checkbox>
  <ic-checkbox value="espresso" label="Espresso"></ic-checkbox>
  <ic-checkbox value="flatwhite" label="Flat white"></ic-checkbox>
  <ic-checkbox value="latte" label="Latte"></ic-checkbox>
  <ic-checkbox value="cappuccino" label="Cappuccino"></ic-checkbox>
  <ic-checkbox value="other" label="Other">
    <ic-text-field
      slot="additional-field"
      label="Please let us know..."
    ></ic-text-field>
  </ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Which coffee do you like best?" name="conditional">
  <IcCheckbox value="americano" label="Americano" />
  <IcCheckbox value="espresso" label="Espresso" />
  <IcCheckbox value="flatwhite" label="Flat white" />
  <IcCheckbox value="latte" label="Latte" />
  <IcCheckbox value="cappuccino" label="Cappuccino" />
  <IcCheckbox value="other" label="Other">
    <IcTextField
      slot="additional-field"
      label="Please let us know..."
    />
  </IcCheckbox>
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsConditional}
  style={{ marginTop: "1.5rem" }}
>
  <IcCheckboxGroup label="Which coffee do you like best?" name="conditional">
    <IcCheckbox value="americano" label="Americano" />
    <IcCheckbox value="espresso" label="Espresso" />
    <IcCheckbox value="flatwhite" label="Flat white" />
    <IcCheckbox value="latte" label="Latte" />
    <IcCheckbox value="cappuccino" label="Cappuccino" />
    <IcCheckbox value="other" label="Other">
      <IcTextField slot="additional-field" label="Please let us know..." />
    </IcCheckbox>
  </IcCheckboxGroup>
</ComponentPreview>

### Conditional dynamic

export const snippetsConditionalDynamic = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Which coffee do you like best?" name="dynamic">
  <ic-checkbox value="americano" label="Americano"></ic-checkbox>
  <ic-checkbox value="espresso" label="Espresso"></ic-checkbox>
  <ic-checkbox value="flatwhite" label="Flat white"></ic-checkbox>
  <ic-checkbox value="latte" label="Latte"></ic-checkbox>
  <ic-checkbox value="cappuccino" label="Cappuccino"></ic-checkbox>
  <ic-checkbox additional-field-display="dynamic" value="other" label="Other">
    <ic-text-field
      slot="additional-field"
      label="Please let us know..."
    ></ic-text-field>
  </ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Which coffee do you like best?" name="dynamic">
  <IcCheckbox value="americano" label="Americano" />
  <IcCheckbox value="espresso" label="Espresso" />
  <IcCheckbox value="flatwhite" label="Flat white" />
  <IcCheckbox value="latte" label="Latte" />
  <IcCheckbox value="cappuccino" label="Cappuccino" />
  <IcCheckbox additionalFieldDisplay="dynamic" value="other" label="Other">
    <IcTextField
      slot="additional-field"
      label="Please let us know..."
    />
  </IcCheckbox>
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsConditionalDynamic}
  style={{ marginRight: "1rem" }}
>
  <div style={{ width: "21.875rem" }}>
    <IcCheckboxGroup label="Which coffee do you like best?" name="dynamic">
      <IcCheckbox value="americano" label="Americano" />
      <IcCheckbox value="espresso" label="Espresso" />
      <IcCheckbox value="flatwhite" label="Flat white" />
      <IcCheckbox value="latte" label="Latte" />
      <IcCheckbox value="cappuccino" label="Cappuccino" />
      <IcCheckbox additionalFieldDisplay="dynamic" value="other" label="Other">
        <IcTextField slot="additional-field" label="Please let us know..." />
      </IcCheckbox>
    </IcCheckboxGroup>
  </div>
</ComponentPreview>

### Validation

export const snippetsValidation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Select your extras" name="1" validation-status="error" validation-text="Sorry, this is currently unavailable.">
  <ic-checkbox value="valueName1" label="Extra shot (50p)"></ic-checkbox>
  <ic-checkbox value="valueName2" label="Soya milk" checked="true"></ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Select your extras" name="1" validationStatus="error" validationText="Sorry, this is currently unavailable.">
  <IcCheckbox value="valueName1" label="Extra shot (50p)" />
  <IcCheckbox value="valueName2" label="Soya milk" checked />
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsValidation} style={{ marginTop: "1.5rem" }}>
  <IcCheckboxGroup
    label="Select your extras"
    name="1"
    validationStatus="error"
    validationText="Sorry, this is currently unavailable."
  >
    <IcCheckbox value="valueName1" label="Extra shot (50p)" />
    <IcCheckbox value="valueName2" label="Soya milk" checked />
  </IcCheckboxGroup>
</ComponentPreview>

### Indeterminate

export const snippetsIndeterminate = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-checkbox-group label="Select your preferred drinks" name="1">
  <ic-checkbox value="drinks" label="Drinks" checked="true" indeterminate="true">
    <ic-checkbox-group label="Coffee" hide-label="true" slot="additional-field" name="2">
      <ic-checkbox value="tea" label="Tea"></ic-checkbox>
      <ic-checkbox value="coffee" label="Coffee" checked="true" indeterminate="true">
        <ic-checkbox-group label="Coffees" hide-label="true" slot="additional-field" name="3">
          <ic-checkbox value="mocha" label="Mocha"></ic-checkbox>
          <ic-checkbox value="espresso" label="Espresso" checked="true"></ic-checkbox>
          <ic-checkbox value="cappuccino" label="Cappuccino"></ic-checkbox>
        </ic-checkbox-group>
      </ic-checkbox>
      <ic-checkbox value="juice" label="Juice"></ic-checkbox>
    </ic-checkbox-group>
  </ic-checkbox>
</ic-checkbox-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCheckboxGroup label="Select your preferred drinks" name="1">
  <IcCheckbox value="drinks" label="Drinks" checked indeterminate>
    <IcCheckboxGroup name="2" label="Coffee" hideLabel slot="additional-field">
      <IcCheckbox value="tea" label="Tea" />
      <IcCheckbox value="coffee" label="Coffee" checked indeterminate>
        <IcCheckboxGroup label="Coffees" hideLabel slot="additional-field" name="3">
          <IcCheckbox value="mocha" label="Mocha" />
          <IcCheckbox value="espresso" label="Espresso" checked />
          <IcCheckbox value="cappuccino" label="Cappuccino" />
        </IcCheckboxGroup>
      </IcCheckbox>
      <IcCheckbox value="juice" label="Juice" />
    </IcCheckboxGroup>
  </IcCheckbox>
</IcCheckboxGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsIndeterminate}
  style={{ marginTop: "1.5rem" }}
>
  <IcCheckboxGroup label="Select your preferred drinks" name="1">
    <IcCheckbox value="drinks" label="Drinks" checked indeterminate>
      <IcCheckboxGroup
        name="2"
        label="Coffee"
        hideLabel
        slot="additional-field"
      >
        <IcCheckbox value="tea" label="Tea" />
        <IcCheckbox value="coffee" label="Coffee" checked indeterminate>
          <IcCheckboxGroup
            label="Coffees"
            hideLabel
            slot="additional-field"
            name="3"
          >
            <IcCheckbox value="mocha" label="Mocha" />
            <IcCheckbox value="espresso" label="Espresso" checked />
            <IcCheckbox value="cappuccino" label="Cappuccino" />
          </IcCheckboxGroup>
        </IcCheckbox>
        <IcCheckbox value="juice" label="Juice" />
      </IcCheckboxGroup>
    </IcCheckbox>
  </IcCheckboxGroup>
</ComponentPreview>

---

# Chip

URL: https://design.sis.gov.uk/components/chip/code
Status: BETA
Subtitle: Chips are used to filter and present data.


import { IcChip } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-chip label="Americano" dismissible="true" id='my-chip'>
  <svg
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-chip>
<ic-chip label="Cappuccino">
  <svg
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-chip>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcChip label="Americano" dismissible onIcDismiss={(ev) => console.log(ev)}>
  <SlottedSVG
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcChip>
<IcChip label="Cappuccino">
  <SlottedSVG
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcChip>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    gap: "0.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
  snippets={snippetsDefault}
>
  <IcChip label="Americano" dismissible>
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      aria-label="coffee"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcChip>
  <IcChip label="Cappuccino">
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      aria-label="coffee"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcChip>
</ComponentPreview>

## Chip details

{
  "props": [
    {
      "name": "appearance",
      "type": "\"filled\" | \"outline\"",
      "complexType": {
        "original": "IcChipAppearance",
        "resolved": "\"filled\" | \"outline\"",
        "references": {
          "IcChipAppearance": {
            "location": "import",
            "path": "./ic-chip.types",
            "id": "src/components/ic-chip/ic-chip.types.ts::IcChipAppearance"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Use variant prop instead."
        }
      ],
      "deprecation": "This prop should not be used anymore. Use variant prop instead.",
      "values": [
        {
          "value": "filled",
          "type": "string"
        },
        {
          "value": "outline",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "customColor",
      "type": "`#${string}` | `rgb(${string})` | `rgba(${string})`",
      "complexType": {
        "original": "IcColor",
        "resolved": "`#${string}` | `rgb(${string})` | `rgba(${string})`",
        "references": {
          "IcColor": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcColor"
          }
        }
      },
      "mutable": false,
      "attr": "custom-color",
      "reflectToAttr": false,
      "docs": "The custom chip colour. This prop will be applied to the chip component if `dismissible` is set to `false`.\nCan be a hex value e.g. \"#ff0000\", RGB e.g. \"rgb(255, 0, 0)\", or RGBA e.g. \"rgba(255, 0, 0, 1)\".",
      "docsTags": [],
      "default": "null",
      "values": [
        {
          "type": "`#${string}`"
        },
        {
          "type": "`rgb(${string})`"
        },
        {
          "type": "`rgba(${string})`"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the chip will appear disabled.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dismissLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "dismiss-label",
      "reflectToAttr": false,
      "docs": "The text in the dismiss button tooltip and aria label.",
      "docsTags": [],
      "default": "\"Dismiss\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dismissible",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "dismissible",
      "reflectToAttr": false,
      "docs": "If `true`, the chip will have a close button at the end to dismiss it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The text rendered within the chip.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the chip.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "transparentBackground",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "transparent-background",
      "reflectToAttr": false,
      "docs": "If `true`, the outlined variant of chip will have a transparent background rather than white.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"filled\" | \"outlined\"",
      "complexType": {
        "original": "IcEmphasisType",
        "resolved": "\"filled\" | \"outlined\"",
        "references": {
          "IcEmphasisType": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcEmphasisType"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The emphasis of the chip.",
      "docsTags": [],
      "default": "\"filled\"",
      "values": [
        {
          "value": "filled",
          "type": "string"
        },
        {
          "value": "outlined",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the chip."
    },
    {
      "name": "icon",
      "docs": "Content will be rendered at the start of the chip."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "dismiss",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icDismiss instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icDismiss instead."
    },
    {
      "event": "icDismiss",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Is emitted when the user dismisses the chip.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the chip.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "icDismiss",
      "capture": true,
      "passive": false
    }
  ]
}


## Variants

### Outline

export const snippetsOutline = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-chip label="Americano" variant="outlined">
  <svg
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z"/>
  </svg>
</ic-chip>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcChip label="Americano" variant="outlined">
  <SlottedSVG
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z"/>
  </SlottedSVG>
</IcChip>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    gap: "0.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
  snippets={snippetsOutline}
>
  <IcChip label="Americano" variant="outlined">
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      aria-label="coffee"
    >
      <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
    </svg>
  </IcChip>
</ComponentPreview>

### Dismissible

export const snippetsDismissible = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-chip label="Americano" dismissible="true" id='my-chip'>
  <svg
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-chip>
<script>
  const chip = document.querySelector('#my-chip');
  chip.addEventListener('icDismiss', (ev) => console.log(ev));
</script>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcChip label="Americano" dismissible onIcDismiss={(ev) => console.log(ev)}>
  <SlottedSVG
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcChip>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    gap: "0.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
  snippets={snippetsDismissible}
>
  <IcChip label="Americano" dismissible onIcDismiss={(ev) => console.log(ev)}>
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      aria-label="coffee"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcChip>
</ComponentPreview>

### Disabled

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-chip label="Americano" dismissible="true" disabled="true">
  <svg
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </svg>
</ic-chip>
<ic-chip label="Americano" variant="outlined" dismissible="true" disabled="true">
  <svg
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z"/>
  </svg>
</ic-chip>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcChip label="Americano" dismissible disabled>
  <SlottedSVG
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"/>
  </SlottedSVG>
</IcChip>
<IcChip label="Americano" variant="outlined" dismissible disabled>
  <SlottedSVG
    slot="icon"
    viewBox="0 0 24 24"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="coffee"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z"/>
  </SlottedSVG>
</IcChip>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    gap: "0.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
  snippets={snippetsDisabled}
>
  <IcChip label="Americano" dismissible disabled>
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      aria-label="coffee"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcChip>
  <IcChip label="Americano" variant="outlined" dismissible disabled>
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      aria-label="coffee"
    >
      <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
    </svg>
  </IcChip>
</ComponentPreview>

---

# Classification banner

URL: https://design.sis.gov.uk/components/classification-banner/code
Status: BETA
Subtitle: Classification banners are used to show the data classification (also known as protective marking) of an app.


import { IcClassificationBanner } from "@ukic/react";

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-classification-banner></ic-classification-banner>
<ic-classification-banner classification="official"></ic-classification-banner>
<ic-classification-banner classification="official-sensitive"></ic-classification-banner>
<ic-classification-banner classification="secret"></ic-classification-banner>
<ic-classification-banner classification="top-secret"></ic-classification-banner>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcClassificationBanner inline />
<IcClassificationBanner classification="official"/>
<IcClassificationBanner classification="official-sensitive"/>
<IcClassificationBanner classification="secret"/>
<IcClassificationBanner classification="top-secret"/>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

## Component demo

<ComponentPreview snippets={snippets} style={{ gap: "0.5rem" }}>
  <IcClassificationBanner inline />
  <IcClassificationBanner classification="official" inline />
  <IcClassificationBanner classification="official-sensitive" inline />
  <IcClassificationBanner classification="secret" inline />
  <IcClassificationBanner classification="top-secret" inline />
</ComponentPreview>

## Classification banner details

{
  "props": [
    {
      "name": "additionalSelectors",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "additional-selectors",
      "reflectToAttr": false,
      "docs": "The additional information that will be displayed after the classification.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "classification",
      "type": "\"default\" | \"official\" | \"official-sensitive\" | \"secret\" | \"top-secret\"",
      "complexType": {
        "original": "IcProtectiveMarkings",
        "resolved": "\"default\" | \"official\" | \"official-sensitive\" | \"secret\" | \"top-secret\"",
        "references": {
          "IcProtectiveMarkings": {
            "location": "import",
            "path": "./ic-classification-banner.types",
            "id": "src/components/ic-classification-banner/ic-classification-banner.types.tsx::IcProtectiveMarkings"
          }
        }
      },
      "mutable": false,
      "attr": "classification",
      "reflectToAttr": false,
      "docs": "The classification level to be displayed - also determines the banner and text colour.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "official",
          "type": "string"
        },
        {
          "value": "official-sensitive",
          "type": "string"
        },
        {
          "value": "secret",
          "type": "string"
        },
        {
          "value": "top-secret",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "country",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "country",
      "reflectToAttr": false,
      "docs": "The optional text that will be displayed before classification to specify relevant country/countries.",
      "docsTags": [],
      "default": "\"uk\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inline",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "inline",
      "reflectToAttr": false,
      "docs": "If `true`, the banner will appear inline with the page, instead of sticking to the bottom of the page.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "upTo",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "up-to",
      "reflectToAttr": false,
      "docs": "If `true`, \"Up to\" will be displayed before the classification and country.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-classification-banner",
      "annotation": "prop",
      "docs": "z-index of classification banner"
    }
  ],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

export const snippetsVariants = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-classification-banner 
  classification="official" 
  up-to="true" country="us" 
  additional-selectors="ukic"
></ic-classification-banner>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcClassificationBanner 
  classification="official"
  upTo="true"
  country="us"
  additionalSelectors="ukic"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

### Up to, country and additional selectors

<ComponentPreview snippets={snippetsVariants} style={{ gap: "0.5rem" }}>
  <IcClassificationBanner
    classification="official"
    inline
    upTo="true"
    country="us"
    additionalSelectors="ukic"
  />
</ComponentPreview>

---

# Data entity

URL: https://design.sis.gov.uk/components/data-entity/code
Status: BETA
Subtitle: The data entity component displays a group of related data in a consistent and easy to consume way.


import {
  IcDataEntity,
  IcDataRow,
  IcLink,
  IcTypography,
  IcTextField,
  IcButton,
  IcStatusTag,
} from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-entity heading="Order details">
  <ic-data-row label="Order name" value="Michael">
    <ic-link href="#" slot="end-component">
      Edit
    </ic-link>
  </ic-data-row>
  <ic-data-row label="Drink" value="Americano">
    <ic-link href="#" slot="end-component">
      Edit
    </ic-link>
  </ic-data-row>
  <ic-data-row label="Milk option" value="Soya milk">
    <ic-link href="#" slot="end-component">
      Edit
    </ic-link>
  </ic-data-row>
  <ic-data-row label="Price" value="£3.25">
    <ic-link href="#" slot="end-component">
      Edit
    </ic-link>
  </ic-data-row>
  <ic-data-row label="Payment method">
    <ic-typography variant="body" slot="value">
      VISA ending 5896
    </ic-typography>
    <ic-link href="#" slot="end-component">
      Edit
    </ic-link>
  </ic-data-row>
  <ic-data-row label="Download receipt" value="CoffeeOrder_X46w32.pdf">
    <ic-button variant="icon" aria-label="Download" slot="end-component">
      <svg viewBox="0 0 24 24" height="24" width="24">
        <path
          d="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z"
          fill="currentColor"
        />
      </svg>
    </ic-button>
  </ic-data-row>
</ic-data-entity>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataEntity heading="Order details">
  <IcDataRow label="Order name" value="Michael">
    <IcLink href="#" slot="end-component">
      Edit
    </IcLink>
  </IcDataRow>
  <IcDataRow label="Drink" value="Americano">
    <IcLink href="#" slot="end-component">
      Edit
    </IcLink>
  </IcDataRow>
  <IcDataRow label="Milk option" value="Soya milk">
    <IcLink href="#" slot="end-component">
      Edit
    </IcLink>
  </IcDataRow>
  <IcDataRow label="Price" value="£3.25">
    <IcLink href="#" slot="end-component">
      Edit
    </IcLink>
  </IcDataRow>
  <IcDataRow label="Payment method">
    <IcTypography variant="body" slot="value">
      VISA ending 5896
    </IcTypography>
    <IcLink href="#" slot="end-component">
      Edit
    </IcLink>
  </IcDataRow>
  <IcDataRow label="Download receipt" value="CoffeeOrder_X46w32.pdf">
    <IcButton variant="icon" aria-label="Download" slot="end-component">
      <SlottedSVG viewBox="0 0 24 24" height="24" width="24">
        <path
          d="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z"
          fill="currentColor"
        />
      </SlottedSVG>
    </IcButton>
  </IcDataRow>
</IcDataEntity>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcDataEntity heading="Order details" style={{ width: "90%" }}>
    <IcDataRow label="Order name" value="Michael">
      <IcLink href="#" onClick={(e) => e.preventDefault()} slot="end-component">
        Edit
      </IcLink>
    </IcDataRow>
    <IcDataRow label="Drink" value="Americano">
      <IcLink href="#" onClick={(e) => e.preventDefault()} slot="end-component">
        Edit
      </IcLink>
    </IcDataRow>
    <IcDataRow label="Milk option" value="Soya milk">
      <IcLink href="#" onClick={(e) => e.preventDefault()} slot="end-component">
        Edit
      </IcLink>
    </IcDataRow>
    <IcDataRow label="Price" value="£3.25">
      <IcLink href="#" onClick={(e) => e.preventDefault()} slot="end-component">
        Edit
      </IcLink>
    </IcDataRow>
    <IcDataRow label="Payment method">
      <IcTypography variant="body" slot="value">
        VISA ending 5896
      </IcTypography>
      <IcLink href="#" onClick={(e) => e.preventDefault()} slot="end-component">
        Edit
      </IcLink>
    </IcDataRow>
    <IcDataRow label="Download receipt" value="CoffeeOrder_X46w32.pdf">
      <IcButton variant="icon" aria-label="Download" slot="end-component">
        <svg viewBox="0 0 24 24" height="24" width="24">
          <path
            d="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z"
            fill="currentColor"
          />
        </svg>
      </IcButton>
    </IcDataRow>
  </IcDataEntity>
</ComponentPreview>

## Data row details

{
  "props": [
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label in the leftmost cell of the row.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the data row component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the middle (right if no end-component supplied) cell of the row.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "end-component",
      "docs": "Content will be displayed in the rightmost cell."
    },
    {
      "name": "label",
      "docs": "Content will be rendered in the leftmost cell."
    },
    {
      "name": "value",
      "docs": "Content will be rendered to the right of the label."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Data entity details

{
  "props": [
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The title for the data entity.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the data entity component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "heading",
      "docs": "Content will be placed at the top of the data entity."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### With status tags

export const withStatusTags = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-entity heading="Order details">
  <ic-data-row label="Order name" value="Michael">
  </ic-data-row>
  <ic-data-row label="Drink" value="Americano">
    <ic-status-tag
      status="warning"
      label="In Progress"
      variant="filled"
      slot="end-component"
    />
  </ic-data-row>
  <ic-data-row label="Milk option" value="Soya milk">
  </ic-data-row>
  <ic-data-row label="Price" value="£3.25">
  </ic-data-row>
  <ic-data-row label="Payment method">
    <ic-typography variant="body" slot="value">
      VISA ending 5896
    </ic-typography>
    <ic-status-tag
      label="Not Confirmed"
      variant="filled"
      slot="end-component"
    />
  </ic-data-row>
</ic-data-entity>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataEntity heading="Order details">
  <IcDataRow label="Order name" value="Michael" />
  <IcDataRow label="Drink" value="Americano">
    <IcStatusTag
      status="warning"
      label="In Progress"
      variant="filled"
      slot="end-component"
    />
  </IcDataRow>
  <IcDataRow label="Milk option" value="Soya milk" />
  <IcDataRow label="Price" value="£3.25" />
  <IcDataRow label="Payment method">
    <IcTypography variant="body" slot="value">
      VISA ending 5896
    </IcTypography>
    <IcStatusTag
      label="Not Confirmed"
      variant="filled"
      slot="end-component"
    />
  </IcDataRow>
</IcDataEntity>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withStatusTags}>
  <IcDataEntity heading="Order details" style={{ width: "90%" }}>
    <IcDataRow label="Order name" value="Michael" />
    <IcDataRow label="Drink" value="Americano">
      <IcStatusTag
        status="warning"
        label="In Progress"
        variant="filled"
        slot="end-component"
      />
    </IcDataRow>
    <IcDataRow label="Milk option" value="Soya milk" />
    <IcDataRow label="Price" value="£3.25" />
    <IcDataRow label="Payment method">
      <IcTypography variant="body" slot="value">
        VISA ending 5896
      </IcTypography>
      <IcStatusTag
        label="Not Confirmed"
        variant="filled"
        slot="end-component"
      />
    </IcDataRow>
  </IcDataEntity>
</ComponentPreview>

### Size small

export const smallSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-entity heading="Personal details" size="small">
  <ic-data-row label="Name" value="Michael Johnson">
    <ic-status-tag
      status="success"
      label="confirmed"
      variant="filled"
      slot="end-component"
      size="small"
    ></ic-status-tag>
  </ic-data-row>
  <ic-data-row label="Date of birth" value="16 October 1995">
    <ic-status-tag
      status="warning"
      label="in review"
      variant="filled"
      slot="end-component"
      size="small"
    ></ic-status-tag>
  </ic-data-row>
  <ic-data-row label="Telephone" value="07449 7654873">
    <ic-status-tag
      status="warning"
      label="in review"
      variant="filled"
      slot="end-component"
      size="small"
    ></ic-status-tag>
  </ic-data-row>
  <ic-data-row label="Email" value="mjohnson@coffee.gov">
    <ic-status-tag
      status="success"
      label="confirmed"
      variant="filled"
      slot="end-component"
      size="small"
    ></ic-status-tag>
  </ic-data-row>
  <ic-data-row label="Address">
    <ic-typography variant="body" slot="value">
      383 Coffee Drive
      <br />
      London
      <br />
      SW7 988
      <br />
      United Kingdom
    </ic-typography>
    <ic-status-tag
      label="not confirmed"
      variant="filled"
      slot="end-component"
      size="small"
    ></ic-status-tag>
  </ic-data-row>
</ic-data-entity>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataEntity heading="Personal details" size="small">
  <IcDataRow label="Name" value="Michael Johnson">
    <IcStatusTag
      status="success"
      label="confirmed"
      variant="filled"
      slot="end-component"
      size="small"
    />
  </IcDataRow>
  <IcDataRow label="Date of birth" value="16 October 1995">
    <IcStatusTag
      status="warning"
      label="in review"
      variant="filled"
      slot="end-component"
      size="small"
    />
  </IcDataRow>
  <IcDataRow label="Telephone" value="07449 7654873">
    <IcStatusTag
      status="warning"
      label="in review"
      variant="filled"
      slot="end-component"
      size="small"
    />
  </IcDataRow>
  <IcDataRow label="Email" value="mjohnson@coffee.gov">
    <IcStatusTag
      status="success"
      label="confirmed"
      variant="filled"
      slot="end-component"
      size="small"
    />
  </IcDataRow>
  <IcDataRow label="Address">
    <IcTypography variant="body" slot="value">
      383 Coffee Drive
      <br />
      London
      <br />
      SW7 988
      <br />
      United Kingdom
    </IcTypography>
    <IcStatusTag
      label="not confirmed"
      variant="filled"
      slot="end-component"
      size="small"
    />
  </IcDataRow>
</IcDataEntity>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={smallSnippet}>
  <IcDataEntity
    heading="Personal details"
    size="small"
    style={{ width: "90%" }}
  >
    <IcDataRow label="Name" value="Michael Johnson" />
    <IcDataRow label="Date of birth" value="16 October 1995" />
    <IcDataRow label="Telephone" value="07449 7654873" />
    <IcDataRow label="Email" value="mjohnson@coffee.gov" />
    <IcDataRow label="Address">
      <IcTypography variant="body" slot="value">
        383 Coffee Drive
        <br />
        London
        <br />
        SW7 988
        <br />
        United Kingdom
      </IcTypography>
    </IcDataRow>
  </IcDataEntity>
</ComponentPreview>

### Editable example

export const editableExample = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-data-entity heading="Order details">
  <ic-data-row label="Order name"> 
    <ic-text-field 
      slot="value" 
      label="Order name" 
      value="Michael"
      readonly="true"
      hide-label="true"
      full-width="true"
    />
  </ic-data-row>
  <ic-data-row label="Drink">
    <ic-text-field 
      slot="value" 
      label="Drink" 
      value="Americano"
      readonly="true"
      hide-label="true"
      full-width="true"
    />
  </ic-data-row>
  <ic-data-row label="Milk option">
    <ic-text-field 
      slot="value" 
      label="Milk option" 
      value="Soya milk"
      readonly="true"
      hide-label="true"
      full-width="true"
    />
  </ic-data-row>
  <ic-data-row label="Price">
    <ic-text-field 
      slot="value" 
      label="Price" 
      value="£3.25"
      readonly="true"
      hide-label="true"
      full-width="true"
    />
  </ic-data-row>
  <ic-data-row label="Payment method">
    <ic-text-field 
      slot="value" 
      label="Payment method" 
      value="VISA ending 5896"
      readonly="true"
      hide-label="true"
      full-width="true"
    />
  </ic-data-row>
</ic-data-entity>
<div class="btn-container">
  <ic-button id="confirm-button">
    Confirm
  </ic-button>
  <ic-button id="edit-button" variant="secondary">
    Edit
  </ic-button>
</div>`,
      long: `.btn-container {
    display: flex;
    gap: var(--ic-space-md);
    padding-top: var(--ic-space-md);
  }
  .parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const textFields = document.querySelectorAll('ic-text-field');
    const confirmBtn = document.querySelector('#confirm-button');
    confirmBtn.addEventListener('click', () => {
      textFields.forEach((textField) => {
        textField.setAttribute('readonly', '');
      });
    });
    const editBtn = document.querySelector('#edit-button');
    editBtn.addEventListener('click', () => {
      textFields.forEach((textField) => {
        textField.removeAttribute('readonly');
      });
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDataEntity heading="Order details">
  <IcDataRow label="Order name">
    <IcTextField
      slot="value"
      label="Order name"
      value="Michael"
      readonly
      hideLabel
      fullWidth
    />
  </IcDataRow>
  <IcDataRow label="Drink" value="Americano">
    <IcTextField
      slot="value"
      label="Drink"
      value="Americano"
      readonly
      hideLabel
      fullWidth
    />
  </IcDataRow>
  <IcDataRow label="Milk option" value="Soya milk">
    <IcTextField
      slot="value"
      label="Milk option"
      value="Soya milk"
      readonly
      hideLabel
      fullWidth
    />
  </IcDataRow>
  <IcDataRow label="Price" value="£3.25">
    <IcTextField
      slot="value"
      label="Price"
      value="£3.25"
      readonly
      hideLabel
      fullWidth
    />
  </IcDataRow>
  <IcDataRow label="Payment method">
    <IcTextField
      slot="value"
      label="Payment method"
      value="VISA ending 5896"
      readonly
      hideLabel
      fullWidth
    />
  </IcDataRow>
</IcDataEntity>
<div className={classes.btnContainer}>
  <IcButton
    onClick={() => {
      const textFields = document.querySelectorAll('ic-text-field');
      textFields.forEach((textField) => {
        textField.setAttribute('readonly', '');
      });
    }}
  >
    Confirm
  </IcButton>
  <IcButton
    onClick={() => {
      const textFields = document.querySelectorAll('ic-text-field');
      textFields.forEach((textField) => {
        textField.removeAttribute('readonly');
      });
    }}
    variant="secondary"
  >
    Edit
  </IcButton>
</div>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  btnContainer: {
    display: "flex",
    gap: "var(--ic-space-md)",
    paddingTop: "var(--ic-space-md)",
  },
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  btnContainer: {
    display: "flex",
    gap: "var(--ic-space-md)",
    paddingTop: "var(--ic-space-md)",
  },
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={editableExample} style={{ display: "block" }}>
  <IcDataEntity heading="Order details" style={{ width: "90%" }}>
    <IcDataRow label="Order name">
      <IcTextField
        slot="value"
        label="Order name"
        value="Michael"
        readonly
        hideLabel
        fullWidth
      />
    </IcDataRow>
    <IcDataRow label="Drink" value="Americano">
      <IcTextField
        slot="value"
        label="Drink"
        value="Americano"
        readonly
        hideLabel
        fullWidth
      />
    </IcDataRow>
    <IcDataRow label="Milk option" value="Soya milk">
      <IcTextField
        slot="value"
        label="Milk option"
        value="Soya milk"
        readonly
        hideLabel
        fullWidth
      />
    </IcDataRow>
    <IcDataRow label="Price" value="£3.25">
      <IcTextField
        slot="value"
        label="Price"
        value="£3.25"
        readonly
        hideLabel
        fullWidth
      />
    </IcDataRow>
    <IcDataRow label="Payment method">
      <IcTextField
        slot="value"
        label="Payment method"
        value="VISA ending 5896"
        readonly
        hideLabel
        fullWidth
      />
    </IcDataRow>
  </IcDataEntity>
  <IcButton
    onClick={() => {
      const textFields = document.querySelectorAll("ic-text-field");
      textFields.forEach((textField) => {
        textField.setAttribute("readonly", "");
      });
    }}
    style={{
      marginRight: "var(--ic-space-md)",
      marginTop: "var(--ic-space-lg)",
    }}
  >
    Confirm
  </IcButton>
  <IcButton
    onClick={() => {
      const textFields = document.querySelectorAll("ic-text-field");
      textFields.forEach((textField) => {
        textField.removeAttribute("readonly");
      });
    }}
    variant="secondary"
    style={{ marginTop: "var(--ic-space-lg)" }}
  >
    Edit
  </IcButton>
</ComponentPreview>

---

# Date input

URL: https://design.sis.gov.uk/components/date-input/code
Status: CANARY
Subtitle: A date input is used when gathering a specific date in a text-based format.


import { IcButton } from "@ukic/react";
import { IcDateInput } from "@ukic/canary-react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?"></ic-date-input>`,
      long: `{shortCode}
<script>
  const dateInput = document.querySelector("ic-date-input");
  dateInput.addEventListener("icChange", function ({ detail }) {
    console.log(detail.value);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  onChange={({ detail }) => console.log(detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsDefault}
  style={{
    display: "flex",
    flexDirection: "column",
    gap: "0.5rem",
    alignItems: "center",
  }}
>
  <IcDateInput
    label="When would you like to collect your coffee?"
    onChange={({ detail }) => console.log(detail.value)}
  />
</ComponentPreview>

## Date input details

{
  "props": [
    {
      "name": "dateFormat",
      "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
      "complexType": {
        "original": "IcDateFormat",
        "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
        "references": {
          "IcDateFormat": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcDateFormat"
          }
        }
      },
      "mutable": false,
      "attr": "date-format",
      "reflectToAttr": false,
      "docs": "The format in which the date will be displayed.",
      "docsTags": [],
      "default": "\"DD/MM/YYYY\"",
      "values": [
        {
          "value": "DD/MM/YYYY",
          "type": "string"
        },
        {
          "value": "MM/DD/YYYY",
          "type": "string"
        },
        {
          "value": "YYYY/MM/DD",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableDays",
      "type": "IcWeekDays[]",
      "complexType": {
        "original": "IcWeekDays[]",
        "resolved": "IcWeekDays[]",
        "references": {
          "IcWeekDays": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcWeekDays"
          }
        }
      },
      "mutable": true,
      "reflectToAttr": false,
      "docs": "The days of the week to disable.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "IcWeekDays[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableDaysMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-days-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when `disableDays` is set and a disabled date is entered.",
      "docsTags": [],
      "default": "\"The date you have selected is on a day of the week that is not allowed. Please select another date.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFuture",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-future",
      "reflectToAttr": false,
      "docs": "If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFutureMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-future-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when `disableFuture` is true and a date in the future is entered.",
      "docsTags": [],
      "default": "\"Dates in the future are not allowed. Please select a date in the past.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disablePast",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-past",
      "reflectToAttr": false,
      "docs": "If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disablePastMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-past-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when `disablePast` is true and a date in the past is entered.",
      "docsTags": [],
      "default": "\"Dates in the past are not allowed. Please select a date in the future.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance. This will default to the text \"Use format\" along with the `dateFormat` value.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideHelperText",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-helper-text",
      "reflectToAttr": false,
      "docs": "If `true`, the helper text will be visually hidden, but still read out by screenreaders.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be visually hidden, but will still be read out by screen readers.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inputId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "input-id",
      "reflectToAttr": false,
      "docs": "The ID for the input.",
      "docsTags": [],
      "default": "`ic-date-input-${inputIds++}`",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "invalidDateMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "invalid-date-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when an invalid date is entered.",
      "docsTags": [],
      "default": "\"Please enter a valid date.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the date input.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "max",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": false,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disableFuture` is set to `true`.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "min",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": false,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disablePast` is set to `true`.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the input will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showClearButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-clear-button",
      "reflectToAttr": false,
      "docs": "If `true`, a button which clears the date input when clicked will be displayed.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the date input to be displayed.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": true,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message. This will override the built-in date validation.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date | null | undefined",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the date input. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [
    {
      "event": "icBlur",
      "detail": "{ value: Date; }",
      "bubbles": true,
      "complexType": {
        "original": "{ value: Date }",
        "resolved": "{ value: Date; }",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input loses focus.",
      "docsTags": []
    },
    {
      "event": "icChange",
      "detail": "{ value: Date; }",
      "bubbles": true,
      "complexType": {
        "original": "{ value: Date }",
        "resolved": "{ value: Date; }",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value has changed.",
      "docsTags": []
    },
    {
      "event": "icFocus",
      "detail": "{ value: Date; }",
      "bubbles": true,
      "complexType": {
        "original": "{ value: Date }",
        "resolved": "{ value: Date; }",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input gains focus.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "getDate",
      "returns": {
        "type": "Promise<Date>",
        "docs": "Date"
      },
      "complexType": {
        "signature": "() => Promise<Date>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        },
        "return": "Promise<Date>"
      },
      "signature": "getDate() => Promise<Date>",
      "parameters": [],
      "docs": "Returns the value as a Date object",
      "docsTags": [
        {
          "name": "returns",
          "text": "Date"
        }
      ]
    }
  ],
  "listeners": []
}


## Variants

### With values

#### String

export const snippetsStringValue = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?" value="21/01/2001"></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" value="21/01/2001" />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsStringValue}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    value="21/01/2001"
  />
</ComponentPreview>

#### Date object

export const snippetsDateObject = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?"></ic-date-input>`,
      long: `{shortCode}
<script>
  const dateInputDate = document.querySelector("ic-date-input");
  dateInputDate.value = new Date("28 November 2021");
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  value={new Date("28 November 2021")}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDateObject}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    value={new Date("28 November 2021")}
  />
</ComponentPreview>

#### Zulu datetime

export const snippetsZulu = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?"></ic-date-input>`,
      long: `{shortCode}
<script>
  const dateInputDate = document.querySelector("ic-date-input");
  dateInputDate.value = new Date("1 May 1990").toISOString();
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  value={new Date("1 May 1990").toISOString()}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsZulu}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    value={new Date("1 May 1990").toISOString()}
  />
</ComponentPreview>

#### String with hyphens

export const snippetsHyphens = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?"></ic-date-input>`,
      long: `{shortCode}
<script>
  const dateInputDate = document.querySelector("ic-date-input");
  dateInputDate.value = "25-05-2005";
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" value="25-05-2005" />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsHyphens}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    value="25-05-2005"
  />
</ComponentPreview>

#### Epoch date

export const snippetsEpoch = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?"></ic-date-input>`,
      long: `{shortCode}
<script>
  const dateInputDate = document.querySelector("ic-date-input");
  dateInputString.value = Date.now();
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  value={Date.now()}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsEpoch}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    value={Date.now()}
  />
</ComponentPreview>

### Required

export const snippetsRequired = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?" required="true"></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" required />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsRequired}>
  <IcDateInput label="When would you like to collect your coffee?" required />
</ComponentPreview>

### Disabled

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?" disabled="true"></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" disabled />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabled}>
  <IcDateInput label="When would you like to collect your coffee?" disabled />
</ComponentPreview>

### Sizes

export const snippetsSizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?" size="small"></ic-date-input>
<ic-date-input label="When would you like to collect your coffee?"></ic-date-input>
<ic-date-input label="When would you like to collect your coffee?" size="large"></ic-date-input>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-md);
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" size="small" />
<IcDateInput label="When would you like to collect your coffee?" />
<IcDateInput label="When would you like to collect your coffee?" size="large" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsSizes}
  style={{
    display: "flex",
    flexDirection: "column",
    gap: "0.5rem",
    alignItems: "center",
  }}
>
  <IcDateInput
    label="When would you like to collect your coffee?"
    size="small"
  />
  <IcDateInput label="When would you like to collect your coffee?" />
  <IcDateInput
    label="When would you like to collect your coffee?"
    size="large"
  />
</ComponentPreview>

### Custom helper text

export const snippetsCustomHelperText = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input
  label="When would you like to collect your coffee?"
  helper-text="We will have your order ready for you on this date"
></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  helperText="We will have your order ready for you on this date"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCustomHelperText}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    helperText="We will have your order ready for you on this date"
  />
</ComponentPreview>

### Custom validation

export const snippetsValidation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input
  label="When would you like to collect your coffee?"
  validation-status="error"
  validation-text="There is a coffee shortage forecast for that day. Please choose a different date."
></ic-date-input>
<ic-date-input
  label="When would you like to collect your coffee?"
  validation-status="warning"
  validation-text="Please be aware that there may be a coffee shortage on that day."
></ic-date-input>
<ic-date-input
  label="When would you like to collect your coffee?"
  validation-status="success"
  validation-text="Your coffee will be available for you to collect on this day."
></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  validationStatus="error"
  validationText="There is a coffee shortage forecast for that day. Please choose a different date."
/>
<IcDateInput
  label="When would you like to collect your coffee?"
  validationStatus="warning"
  validationText="Please be aware that there may be a coffee shortage on that day."
/>
<IcDateInput
  label="When would you like to collect your coffee?"
  validationStatus="success"
  validationText="Your coffee will be available for you to collect on this day."
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsValidation}
  style={{
    display: "flex",
    flexDirection: "column",
    gap: "0.5rem",
    alignItems: "center",
  }}
>
  <IcDateInput
    label="When would you like to collect your coffee?"
    validationStatus="error"
    validationText="There is a coffee shortage forecast for that day. Please choose a different date."
  />
  <IcDateInput
    label="When would you like to collect your coffee?"
    validationStatus="warning"
    validationText="Please be aware that there may be a coffee shortage on that day."
  />
  <IcDateInput
    label="When would you like to collect your coffee?"
    validationStatus="success"
    validationText="Your coffee will be available for you to collect on this day."
  />
</ComponentPreview>

### Disabled past dates

export const snippetsDisabledPastDates = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?" disable-past="true"></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" disablePast />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabledPastDates}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    disablePast
  />
</ComponentPreview>

### Disabled future dates

export const snippetsDisabledFutureDates = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input label="When would you like to collect your coffee?" disable-future="true"></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput label="When would you like to collect your coffee?" disableFuture />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabledFutureDates}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    disableFuture
  />
</ComponentPreview>

### Min and max

export const snippetsMinMax = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-input
  label="When would you like to collect your coffee?"
  min="02/01/2023"
  max="20-07-2023"
></ic-date-input>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDateInput
  label="When would you like to collect your coffee?"
  min="02/01/2023"
  max="20-07-2023"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsMinMax}>
  <IcDateInput
    label="When would you like to collect your coffee?"
    min="02/01/2023"
    max="20-07-2023"
  />
</ComponentPreview>

### Form

export const snippetsForm = [
  {
    technology: "Web component",
    snippets: {
      short: `<form>
  <ic-date-input label="When would you like to collect your coffee?" value="13/03/1951"></ic-date-input>
  <ic-button type="submit" value="Submit"></ic-button>
  <ic-button type="reset" value="Reset"></ic-button>
</form>`,
      long: `{shortCode}
<script>
  document.querySelector("form").addEventListener("submit", (ev) => {
    ev.preventDefault();
    console.log(ev);
  });
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `const formSubmit = (ev) => {
  ev.preventDefault();
  console.log(ev);
};
return (
  <form onSubmit={formSubmit}>
    <IcDateInput label="When would you like to collect your coffee?" value="13/03/1951" />
    <IcButton type="submit">Submit</IcButton>
    <IcButton type="reset">Reset</IcButton>
  </form>
);`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

export const FormDateInput = () => {
  const formSubmit = (ev) => {
    ev.preventDefault();
    console.log(ev);
  };
  return (
    <form onSubmit={formSubmit}>
      <IcDateInput
        label="When would you like to collect your coffee?"
        value="13/03/1951"
      />
      <IcButton type="submit">Submit</IcButton>
      <IcButton type="reset">Reset</IcButton>
    </form>
  );
};

<ComponentPreview snippets={snippetsForm}>
  <FormDateInput />
</ComponentPreview>

---

# Date picker

URL: https://design.sis.gov.uk/components/date-picker/code
Status: CANARY
Subtitle: A date picker is a type of drop-down control that allows people to easily view and select dates.


import { IcDatePicker } from "@ukic/canary-react";
import { useState } from "react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker
  label="When would you like to collect your coffee?"
></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcDatePicker label="When would you like to collect your coffee?" />
</ComponentPreview>

## Date picker details

{
  "props": [
    {
      "name": "dateFormat",
      "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
      "complexType": {
        "original": "IcDateFormat",
        "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
        "references": {
          "IcDateFormat": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcDateFormat"
          }
        }
      },
      "mutable": false,
      "attr": "date-format",
      "reflectToAttr": false,
      "docs": "The format in which the date will be displayed.",
      "docsTags": [],
      "default": "\"DD/MM/YYYY\"",
      "values": [
        {
          "value": "DD/MM/YYYY",
          "type": "string"
        },
        {
          "value": "MM/DD/YYYY",
          "type": "string"
        },
        {
          "value": "YYYY/MM/DD",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableDays",
      "type": "IcWeekDays[]",
      "complexType": {
        "original": "IcWeekDays[]",
        "resolved": "IcWeekDays[]",
        "references": {
          "IcWeekDays": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcWeekDays"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The days of the week to disable.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "IcWeekDays[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableDaysMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-days-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when `disableDays` is `true` and a disabled date is entered.",
      "docsTags": [],
      "default": "\"The date you have selected is on a day of the week that is not allowed. Please select another date.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFuture",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-future",
      "reflectToAttr": false,
      "docs": "If `true`, dates in the future are not allowed. A validation message will appear if a date in the future is entered.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFutureMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-future-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when `disableFuture` is `true` and a date in the future is entered.",
      "docsTags": [],
      "default": "\"Dates in the future are not allowed. Please select a date in the past.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disablePast",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-past",
      "reflectToAttr": false,
      "docs": "If `true`, dates in the past are not allowed. A validation message will appear if a date in the past is entered.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disablePastMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-past-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when `disablePast` is `true` and a date in the past is entered.",
      "docsTags": [],
      "default": "\"Dates in the past are not allowed. Please select a date in the future.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance. This will default to the text \"Use format\" along with the `dateFormat` value.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideHelperText",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-helper-text",
      "reflectToAttr": false,
      "docs": "If `true`, the helper text will be visually hidden, but still read out by screenreaders.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be visually hidden, but the required label will still be read out by screen readers.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inputId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "input-id",
      "reflectToAttr": false,
      "docs": "The ID for the input field. The default will be an automatically generated value.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "invalidDateMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "invalid-date-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when an invalid date is entered.",
      "docsTags": [],
      "default": "\"Please enter a valid date.\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the date input.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "max",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": false,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "The latest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disableFuture` is set to `true`.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "min",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": false,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "The earliest date that will be allowed. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.\nThe value of this prop is ignored if `disablePast` is set to `true`.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "openAtDate",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": false,
      "attr": "open-at-date",
      "reflectToAttr": false,
      "docs": "The date visible when the calendar opens. Used if no date is currently selected.\nThe value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the input will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showDaysOutsideMonth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-days-outside-month",
      "reflectToAttr": false,
      "docs": "If `true`, days outside the current month will be visible in the date picker.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showPickerClearButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-picker-clear-button",
      "reflectToAttr": false,
      "docs": "If `true`, the `Clear` button on the date picker will be visible.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showPickerTodayButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-picker-today-button",
      "reflectToAttr": false,
      "docs": "If `true`, the `Go to today` button on the date picker will be visible.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the date picker to be displayed.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "startOfWeek",
      "type": "IcWeekDays.Friday | IcWeekDays.Monday | IcWeekDays.Saturday | IcWeekDays.Sunday | IcWeekDays.Thursday | IcWeekDays.Tuesday | IcWeekDays.Wednesday",
      "complexType": {
        "original": "IcWeekDays",
        "resolved": "IcWeekDays.Friday | IcWeekDays.Monday | IcWeekDays.Saturday | IcWeekDays.Sunday | IcWeekDays.Thursday | IcWeekDays.Tuesday | IcWeekDays.Wednesday",
        "references": {
          "IcWeekDays": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcWeekDays"
          }
        }
      },
      "mutable": false,
      "attr": "start-of-week",
      "reflectToAttr": false,
      "docs": "The first day of the week. `0` for Sunday, `1` for Monday, etc.\nDefault is Monday.",
      "docsTags": [],
      "default": "IcWeekDays.Monday",
      "values": [
        {
          "type": "IcWeekDays.Friday"
        },
        {
          "type": "IcWeekDays.Monday"
        },
        {
          "type": "IcWeekDays.Saturday"
        },
        {
          "type": "IcWeekDays.Sunday"
        },
        {
          "type": "IcWeekDays.Thursday"
        },
        {
          "type": "IcWeekDays.Tuesday"
        },
        {
          "type": "IcWeekDays.Wednesday"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": false,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation status - e.g. 'error' | 'warning' | 'success'. This will override the built-in date validation.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message. This will override the built-in date validation.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "Date | string",
      "complexType": {
        "original": "string | Date | null | undefined",
        "resolved": "Date | string",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the date picker. The value can be in any format supported as `dateFormat`, in ISO 8601 date string format (`yyyy-mm-dd`) or as a JavaScript `Date` object.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "Date"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-date-picker",
      "annotation": "prop",
      "docs": "z-index of date picker."
    },
    {
      "name": "--input-width",
      "annotation": "prop",
      "docs": "Width of the input field"
    }
  ],
  "events": [
    {
      "event": "icChange",
      "detail": "{ value: Date; }",
      "bubbles": true,
      "complexType": {
        "original": "{ value: Date }",
        "resolved": "{ value: Date; }",
        "references": {
          "Date": {
            "location": "global",
            "id": "global::Date"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value has changed.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "calendarButtonClicked",
      "capture": false,
      "passive": false
    },
    {
      "event": "calendarButtonClicked",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Sizes

Set the size of the date picker by using the `size` prop. This prop takes the values `small`, `default` or `large`. Depending on the chosen size, the prop will apply styling to increase or decrease the amount of spacing within the component.

export const sizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker
  label="When would you like to collect your coffee?"
  size="small"
></ic-date-picker>
<ic-date-picker
  label="When would you like to collect your coffee?"
  size="default"
></ic-date-picker>
<ic-date-picker
  label="When would you like to collect your coffee?"
  size="large"
></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `IcDatePicker
  label="When would you like to collect your coffee?"
  size="small"
/>
<IcDatePicker label="When would you like to collect your coffee?" />
<IcDatePicker
  label="When would you like to collect your coffee?"
  size="large"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={sizes} style={{ flexDirection: "column" }}>
  <div
    style={{
      display: "flex",
      flexDirection: "column",
      gap: "1rem",
      maxWidth: "100%",
      overflowX: "auto",
      paddingLeft: "0.5rem",
      paddingBottom: "1rem",
    }}
  >
    <IcDatePicker
      label="When would you like to collect your coffee?"
      size="small"
    />
    <IcDatePicker label="When would you like to collect your coffee?" />
    <IcDatePicker
      label="When would you like to collect your coffee?"
      size="large"
    />
  </div>
</ComponentPreview>

### Max width

Set the size of the input field by using the `--input-width` CSS custom property. The picker will grow, but not exceed its maximum supported width.

export const maxWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker
  label="When would you like to collect your coffee?"
  size="small"
></ic-date-picker>
<ic-date-picker
  label="When would you like to collect your coffee?"
  size="default"
></ic-date-picker>
<ic-date-picker
  label="When would you like to collect your coffee?"
  size="large"
></ic-date-picker>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-md);
    padding: var(--ic-space-md);
  }
  ic-date-picker {
    --input-width: 25.25rem;
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker
  className={classes.datePicker}
  label="When would you like to collect your coffee?"
  size="small"
/>
<IcDatePicker
  className={classes.datePicker}
  label="When would you like to collect your coffee?"
/>
<IcDatePicker
  className={classes.datePicker}
  label="When would you like to collect your coffee?"
  size="large"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
  datePicker: {
    "--input-width": "25.25rem",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
  datePicker: {
    "--input-width": "25.25rem",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={maxWidth} style={{ flexDirection: "column" }}>
  <div
    style={{
      display: "flex",
      flexDirection: "column",
      gap: "1rem",
      maxWidth: "100%",
      overflowX: "auto",
      paddingLeft: "0.5rem",
      paddingBottom: "1rem",
    }}
  >
    <IcDatePicker
      style={{ "--input-width": "25.25rem" }}
      label="When would you like to collect your coffee?"
      size="small"
    />
    <IcDatePicker
      style={{ "--input-width": "25.25rem" }}
      label="When would you like to collect your coffee?"
    />
    <IcDatePicker
      style={{ "--input-width": "25.25rem" }}
      label="When would you like to collect your coffee?"
      size="large"
    />
  </div>
</ComponentPreview>

### Disabled

export const disabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker
  label="When would you like to collect your coffee?"
  disabled="true"
></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker
  label="When would you like to collect your coffee?"
  disabled
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disabled} style={{ flexDirection: "column" }}>
  <IcDatePicker label="When would you like to collect your coffee?" disabled />
</ComponentPreview>

### Date formats

The `dateFormat` prop determines how dates are displayed. The supported formats are `DD/MM/YYYY`, `MM/DD/YYYY` or `YYYY/MM/DD`.
The default format is `DD/MM/YYYY`.

export const dateFormats = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?"></ic-date-picker>
<ic-date-picker label="When would you like to collect your coffee?" date-format="MM/DD/YYYY"></ic-date-picker>
<ic-date-picker label="When would you like to collect your coffee?" date-format="YYYY/MM/DD"></ic-date-picker>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-md);
    padding: var(--ic-space-md);
  }
  ic-date-picker {
    --input-width: 25.25rem;
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" />
<IcDatePicker label="When would you like to collect your coffee?" dateFormat="MM/DD/YYYY" />
<IcDatePicker label="When would you like to collect your coffee?" dateFormat="YYYY/MM/DD" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-md)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={dateFormats} style={{ flexDirection: "column" }}>
  <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <IcDatePicker label="When would you like to collect your coffee?" />
    <IcDatePicker
      label="When would you like to collect your coffee?"
      dateFormat="MM/DD/YYYY"
    />
    <IcDatePicker
      label="When would you like to collect your coffee?"
      dateFormat="YYYY/MM/DD"
    />
  </div>
</ComponentPreview>

### Value

The `value` prop sets the date in the input field. The value can be in any format supported by the `dateFormat` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.

export const valueSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" value="01/01/2024"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" value="01/01/2024" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={valueSnippet} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    value="01/01/2024"
  />
</ComponentPreview>

### Open at date

If no `value` is set, the `openAtDate` prop can be used to specify the date in view when the calendar view is opened. If not set to a value, the calendar will default to showing the current date.

The supported formats are the same as for the `value` prop.

export const openDate = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" helper-text="The calendar will open showing 25th December 2024, if no date selected" open-at-date="2024-12-25"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" helperText="The calendar will open showing 25th December 2024, if no date selected" openAtDate="2024-12-25" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={openDate} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    helperText="The calendar will open showing 25th December 2024, if no date selected"
    openAtDate="2024-12-25"
  />
</ComponentPreview>

### Start of week

The first day of the week can be changed by setting the `startOfWeek` prop. This is a numeric value where 0 = Sunday, 1 = Monday, etc. up to 6 = Saturday.

export const startWeek = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" start-of-week="0"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" startOfWeek={0} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={startWeek} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    startOfWeek="0"
  />
</ComponentPreview>

### Disable days of week

Specific days of the week can be disabled from selection by setting the `disableDays` prop. The value can be set as an array of numeric values where 0 = Sunday, 1 = Monday, etc. up to 6 = Saturday.

export const disabledDaysOfWeek = [0, 6];

export const disableDays = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker id="weekday-picker" label="When would you like to collect your coffee?"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    document.querySelector("#weekday-picker").disableDays = [0, 6];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" disableDays={disabledDaysOfWeek} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const disabledDaysOfWeek = [0, 6]
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const disabledDaysOfWeek = [0, 6];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disableDays} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    disableDays={disabledDaysOfWeek}
  />
</ComponentPreview>

### Max and min

The `max` and `min` props can be used to limit the range of dates available for selection. Values can be in any format supported by the `dateFormat` prop, in ISO 8601 date string format (yyyy-mm-dd) or as a JavaScript Date object.

export const maxMin = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" helper-text="Choose a date between the 1st and 31st of July" min="2024-07-01" max="2024-07-31" show-picker-today-button="false"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" helperText="Choose a date between the 1st and 31st of July" min="2024-07-01" max="2024-07-31" showPickerTodayButton={false} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={maxMin} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    helperText="Choose a date between the 1st and 31st of July"
    min="2024-07-01"
    max="2024-07-31"
    showPickerTodayButton="false"
  />
</ComponentPreview>

### Disable dates in past

Dates before today can be disabled with the `disablePast` prop.

export const disablePast = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" disable-past="true"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" disablePast />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disablePast} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    disablePast
  />
</ComponentPreview>

### Disable dates in future

Dates after today can be disabled with the `disableFuture` prop.

export const disableFuture = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" disable-future="true"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" disableFuture />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disableFuture} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    disableFuture
  />
</ComponentPreview>

### Days outside month hidden

Days outside of the current month in view can be hidden by setting the `showDaysOutsideMonth` prop to `false`.

export const dayHidden = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" show-days-outside-month="false"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" showDaysOutsideMonth={false} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={dayHidden} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    showDaysOutsideMonth="false"
  />
</ComponentPreview>

### Today and clear buttons hidden

The 'Go to today' and 'Clear' buttons can be hidden from the calendar view by setting the `showPickerTodayButton` and `showPickerClearButton` props to `false`.

export const btnHidden = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker label="When would you like to collect your coffee?" show-picker-today-button="false" show-picker-clear-button="false"></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker label="When would you like to collect your coffee?" showPickerTodayButton={false} showPickerClearButton={false} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={btnHidden} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    showPickerTodayButton="false"
    showPickerClearButton="false"
  />
</ComponentPreview>

### Javascript dates

Any prop that accepts a date value can be set to a Javascript Date object. The following example sets the `value`, `max` and `min` props.

export const jsDates = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker
  id="js-date-picker"
  label="When would you like to collect your coffee?"
  helper-text="Choose a date between the 1st and 31st of July"
  show-picker-today-button="false"
></ic-date-picker>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const datePicker = document.querySelector("#js-date-picker");
    datePicker.min = new Date(2024, 6, 1);
    datePicker.max = new Date(2024, 6, 31);
    datePicker.value = new Date(2024, 6, 15);
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker
  label="When would you like to collect your coffee?"
  min={new Date(2024, 6, 1)}
  max={new Date(2024, 6, 31)}
  value={new Date(2024, 6, 15)}
  helperText="Choose a date between the 1st and 31st of July"
  showPickerTodayButton={false}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={jsDates} style={{ flexDirection: "column" }}>
  <IcDatePicker
    label="When would you like to collect your coffee?"
    min={new Date(2024, 6, 1)}
    max={new Date(2024, 6, 31)}
    value={new Date(2024, 6, 15)}
    helperText="Choose a date between the 1st and 31st of July"
    showPickerTodayButton="false"
  />
</ComponentPreview>

### IcChange Event

The `IcChange` event is emitted by the date picker when the selected date changes.

export const change = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-date-picker
  id="ic-change-date-picker"
  label="When would you like to collect your coffee?"
></ic-date-picker>
<span id="selected-date">
  Selected date:
</span>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: 3.125rem;
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const updateSelectedDate = (ev) =>{
      const el = document.querySelector("#selected-date");
      el.innerHTML = "Selected date: " + ev.detail.value;
    }
    const datePicker = document.querySelector("#ic-change-date-picker");
    datePicker.addEventListener("icChange", updateSelectedDate);
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcDatePicker
  label="When would you like to collect your coffee?"
  onIcChange={dateChangedHandler}
  value={value}
/>
<span>
  {selectedDate}
</span>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [selectedDate, setSelectedDate] = useState<string>("Selected date:");
const [value, setValue] = useState<Date | undefined>();
const dateChangedHandler = (event: { detail: { value: Date; }; }) => {
  setValue(event.detail.value);
  setSelectedDate("Selected date: " + event.detail.value);
};
const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "3.125rem",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [selectedDate, setSelectedDate] = useState("Selected date:");
const [value, setValue] = useState();
const dateChangedHandler = (event) => {
  setValue(event.detail.value);
  setSelectedDate("Selected date: " + event.detail.value);
};
const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "3.125rem",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

export const DatePickerWithIcChange = () => {
  const [selectedDate, setSelectedDate] = useState("Selected date:");
  const [value, setValue] = useState();
  const dateChangedHandler = (event) => {
    setValue(event.detail.value);
    setSelectedDate(`Selected date: ${event.detail.value}`);
  };
  return (
    <div style={{ display: "flex", flexDirection: "column", gap: "3.125rem" }}>
      <IcDatePicker
        label="When would you like to collect your coffee?"
        onIcChange={dateChangedHandler}
        value={value}
      />
      <span>{selectedDate}</span>
    </div>
  );
};

<ComponentPreview snippets={change} style={{ flexDirection: "column" }}>
  <DatePickerWithIcChange />
</ComponentPreview>

---

# Empty state

URL: https://design.sis.gov.uk/components/empty-state/code
Status: BETA
Subtitle: Use the empty state component when there is no content to display. It provides a consistent way of communicating to people what to do next.


import { IcEmptyState, IcButton, IcLink } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those."
>
  <svg slot="image" viewBox="0 0 1600 1600">
    <rect fill="#ff7700" width="1600" height="1600" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
  <ic-button slot="actions">Go to favourite coffees</ic-button>
  <ic-link slot="actions" href="/">
    Customer support
  </ic-link>
</ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those." 
>
  <SlottedSVG slot="image" viewBox="0 0 1600 1600">
    <rect fill="#ff7700" width="1600" height="1600" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
  <IcButton slot="actions">Go to favourite coffees</IcButton>
  <IcLink slot="actions" href="/">
    Customer support
  </IcLink>
</IcEmptyState>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcEmptyState
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those."
  >
    <svg slot="image" viewBox="0 0 1600 1600">
      <rect fill="#ff7700" width="1600" height="1600" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
    <IcButton slot="actions">Go to favourite coffees</IcButton>
    <IcLink slot="actions" href="#" onClick={(e) => e.preventDefault()}>
      Customer support
    </IcLink>
  </IcEmptyState>
</ComponentPreview>

## Empty state details

{
  "props": [
    {
      "name": "aligned",
      "type": "\"center\" | \"left\" | \"right\"",
      "complexType": {
        "original": "IcEmptyStateAlignment",
        "resolved": "\"center\" | \"left\" | \"right\"",
        "references": {
          "IcEmptyStateAlignment": {
            "location": "import",
            "path": "./ic-empty-state.types",
            "id": "src/components/ic-empty-state/ic-empty-state.types.ts::IcEmptyStateAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the empty state container.",
      "docsTags": [],
      "default": "\"left\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "body",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "body",
      "reflectToAttr": false,
      "docs": "The body text rendered in the empty state container.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "bodyMaxLines",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "body-max-lines",
      "reflectToAttr": false,
      "docs": "The number of lines of body text to display before truncating.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The title rendered in the empty state container.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "imageSize",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "image-size",
      "reflectToAttr": false,
      "docs": "The size of the image or icon used in the image slot.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "subheading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "subheading",
      "reflectToAttr": false,
      "docs": "The subtitle rendered in the empty state container.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "actions",
      "docs": "Content is placed at the bottom below all other content."
    },
    {
      "name": "body",
      "docs": "Content will be rendered in place of the body prop."
    },
    {
      "name": "heading",
      "docs": "Content will be rendered in place of the heading prop."
    },
    {
      "name": "image",
      "docs": "Content is placed at the top above all other content."
    },
    {
      "name": "subheading",
      "docs": "Content will be rendered in place of the subheading prop."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Actions slot

export const actionsSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <ic-button slot="actions">Go to favourite coffees</ic-button>
  <ic-link slot="actions" href="/">Customer support</ic-link>
</ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <IcButton slot="actions">Go to favourite coffees</IcButton>
  <IcLink slot="actions" href="/">Customer support</IcLink>
</IcEmptyState>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={actionsSnippets}>
  <IcEmptyState
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
  >
    <IcButton slot="actions">Go to favourite coffees</IcButton>
    <IcLink slot="actions" href="#" onClick={(e) => e.preventDefault()}>
      Customer support
    </IcLink>
  </IcEmptyState>
</ComponentPreview>

### Image slot

export const imageSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <svg
    slot="image"
    viewBox="0 0 1600 1600"
  >
    <rect fill="#ff7700" width="1600" height="1600" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <SlottedSVG
    slot="image"
    viewBox="0 0 1600 1600"
  >
    <rect fill="#ff7700" width="1600" height="1600" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcEmptyState>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={imageSnippets}>
  <IcEmptyState
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
  >
    <svg slot="image" viewBox="0 0 1600 1600">
      <rect fill="#ff7700" width="1600" height="1600" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcEmptyState>
</ComponentPreview>

### Image size

export const imageLargeSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  image-size="large" 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <svg
    slot="image"
    viewBox="0 0 1600 1600"
  >
    <rect fill="#ff7700" width="1600" height="1600" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  imageSize="large" 
  heading="Hmm...there's nothing here" 
  subheading="We don't currently have any favourite teas, probably because coffee is much better." 
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <SlottedSVG
    slot="image"
    viewBox="0 0 1600 1600"
  >
    <rect fill="#ff7700" width="1600" height="1600" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </SlottedSVG>
</IcEmptyState>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={imageLargeSnippets}>
  <IcEmptyState
    imageSize="large"
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
  >
    <svg slot="image" viewBox="0 0 1600 1600">
      <rect fill="#ff7700" width="1600" height="1600" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcEmptyState>
</ComponentPreview>

### Icon in the image slot

export const iconSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  heading="Hmm...there's nothing here"
  subheading="We don't currently have any favourite teas, probably because coffee is much better."
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <svg
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="#D07932"
  >
    <title id="warning-title">Warning</title>
    <path d="M0 0h24v24H0z" fill="none" />
    <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z" />
  </svg>
</ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  heading="Hmm...there's nothing here"
  subheading="We don't currently have any favourite teas, probably because coffee is much better."
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
>
  <SlottedSVG
    slot="image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="#D07932"
  >
    <title id="warning-title">Warning</title>
    <path d="M0 0h24v24H0z" fill="none" />
    <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z" />
  </SlottedSVG>
</IcEmptyState>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={iconSnippets}>
  <IcEmptyState
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
  >
    <svg
      slot="image"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="#D07932"
    >
      <title id="warning-title">Warning</title>
      <path d="M0 0h24v24H0z" fill="none" />
      <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z" />
    </svg>
  </IcEmptyState>
</ComponentPreview>

### Right aligned

export const rightSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  aligned="right" 
  heading="Hmm...there's nothing here"
  subheading="We don't currently have any favourite teas, probably because coffee is much better."
  body="Take a look at our favourite coffees instead, there's much more of those, or try again."
></ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  aligned="right" 
  heading="Hmm...there's nothing here"
  subheading="We don't currently have any favourite teas, probably because coffee is much better."
  body="Take a look at our favourite coffees instead, there's much more of those, or try again." 
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={rightSnippets}>
  <IcEmptyState
    aligned="right"
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
  />
</ComponentPreview>

### Center aligned

export const centreSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
    aligned="center" 
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
></ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
    aligned="center" 
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={centreSnippets}>
  <IcEmptyState
    aligned="center"
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those, or try again."
  />
</ComponentPreview>

### Max lines

export const maxLinesSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-empty-state 
  body-max-lines="1" 
  heading="Hmm...there's nothing here"
  subheading="We don't currently have any favourite teas, probably because coffee is much better."
  body="Take a look at our favourite coffees instead, there's much more of those. Please try looking again or come back later. We're very sorry for any inconvenience this may cause you."
></ic-empty-state>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcEmptyState 
  bodyMaxLines="1" 
  heading="Hmm...there's nothing here"
  subheading="We don't currently have any favourite teas, probably because coffee is much better."
  body="Take a look at our favourite coffees instead, there's much more of those. Please try looking again or come back later. We're very sorry for any inconvenience this may cause you."
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={maxLinesSnippets}>
  <IcEmptyState
    bodyMaxLines="1"
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those. Please try looking again or come back later. We're very sorry for any inconvenience this may cause you."
  />
</ComponentPreview>

---

# Dialog

URL: https://design.sis.gov.uk/components/dialog/code
Status: BETA
Subtitle: Dialogs are modal windows that interrupt the user's current task to bring something important to attention.


import {
  IcAlert,
  IcDialog,
  IcButton,
  IcCheckboxGroup,
  IcCheckbox,
  IcTypography,
  IcSelect,
} from "@ukic/react";
import { useRef, useState } from "react";

export const buttonProps = [
  {
    label: "Go back",
    onclick: "this.cancelDialog()",
  },
  {
    label: "Continue",
    onclick: "alert('Added to basket'); this.open = false;",
  },
];

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog()">Launch dialog</ic-button>
<ic-dialog id="default-dialog" heading="Are you sure?" label="Coffee order">
  <ic-typography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </ic-typography>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const dialog = document.querySelector("#default-dialog");
  function showDialog() {    
    dialog.open = true;
  }
  // Used if dismiss button is clicked
  function hideDialog() { 
    if (dialog.open) {
      dialog.open = false;
    }   
  }
  function dialogConfirmed(ev) {
    alert("Added to basket");
    dialog.open = false;
  }
  dialog.addEventListener("icDialogConfirmed", dialogConfirmed);
  dialog.addEventListener("icDialogClosed", hideDialog);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
<IcDialog
  heading="Are you sure?"
  label="Coffee order"
  open={openDialog}
  // Set state to false if dismiss button is clicked
  onIcDialogClosed={openDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    You are about to add 'Americano' to your basket. Are you sure you want
    to continue?
  </IcTypography>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const DefaultDialog = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  return (
    <>
      <IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
      <IcDialog
        heading="Are you sure?"
        label="Coffee order"
        open={openDialog}
        onIcDialogClosed={openDialog && handleDialogClose} // Event fired when dismiss button is clicked
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          You are about to add 'Americano' to your basket. Are you sure you want
          to continue?
        </IcTypography>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={snippetsDefault}>
  <DefaultDialog />
</ComponentPreview>

## Dialog details

{
  "props": [
    {
      "name": "alertHeading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "alert-heading",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Use an ic-alert/IcAlert component within an alert slot with a heading instead."
        }
      ],
      "deprecation": "This prop should not be used anymore. Use an ic-alert/IcAlert component within an alert slot with a heading instead.",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "alertMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "alert-message",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Use an ic-alert/IcAlert component within an alert slot with a message instead."
        }
      ],
      "deprecation": "This prop should not be used anymore. Use an ic-alert/IcAlert component within an alert slot with a message instead.",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "buttonProps",
      "type": "{ label: string; onclick: string; }[]",
      "complexType": {
        "original": "{ label: string; onclick: string }[]",
        "resolved": "{ label: string; onclick: string; }[]",
        "references": {}
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Sets the label and onclick functions for default buttons.",
      "docsTags": [],
      "default": "[\n    {\n      label: \"Cancel\",\n      onclick: \"this.cancelDialog();\",\n    },\n    { label: \"Confirm\", onclick: \"this.confirmDialog();\" },\n  ]",
      "values": [
        {
          "type": "{ label: string; onclick: string; }[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "buttons",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "buttons",
      "reflectToAttr": false,
      "docs": "If set to `false`, dialog controls will not be displayed overriding buttonProps or slotted dialog controls.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "closeOnBackdropClick",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "close-on-backdrop-click",
      "reflectToAttr": false,
      "docs": "If set to `false`, the dialog will not close when the backdrop is clicked.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "destructive",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "destructive",
      "reflectToAttr": false,
      "docs": "If default buttons are displayed, sets the 'primary' or rightmost button to the destructive variant. Stops initial focus being set on the 'primary' or rightmost default or slotted button.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableHeightConstraint",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-height-constraint",
      "reflectToAttr": false,
      "docs": "If set to `true`, the content area max height and overflow properties are removed allowing the dialog to stretch below the fold.\nThis prop also prevents popover elements from being cut off within the content area.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableWidthConstraint",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-width-constraint",
      "reflectToAttr": false,
      "docs": "If set to `true`, the content area width property is removed, allowing content to take the full width of the dialog when using the large variant.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dismissLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "dismiss-label",
      "reflectToAttr": false,
      "docs": "Sets the dismiss label tooltip and aria label.",
      "docsTags": [],
      "default": "\"Dismiss\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "Sets the heading for the dialog.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideCloseButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-close-button",
      "reflectToAttr": false,
      "docs": "If `true`, the close button will not be displayed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "Sets the optional label for the dialog which appears above the heading.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "open",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "open",
      "reflectToAttr": true,
      "docs": "If `true`, the dialog will be displayed.",
      "docsTags": [],
      "default": "undefined",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"large\" | \"medium\" | \"small\"",
      "complexType": {
        "original": "\"small\" | \"medium\" | \"large\"",
        "resolved": "\"large\" | \"medium\" | \"small\"",
        "references": {}
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "Sets the maximum and minimum height and width for the dialog.",
      "docsTags": [],
      "default": "\"small\"",
      "values": [
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "status",
      "type": "\"error\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "\"neutral\" | \"info\" | \"warning\" | \"error\" | \"success\"",
        "resolved": "\"error\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
        "references": {}
      },
      "mutable": false,
      "attr": "status",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Use an ic-alert/IcAlert component within an alert slot with a variant instead."
        }
      ],
      "deprecation": "This prop should not be used anymore. Use an ic-alert/IcAlert component within an alert slot with a variant instead.",
      "values": [
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "info",
          "type": "string"
        },
        {
          "value": "neutral",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "alert",
      "docs": "Content will be placed at the top of the content area of the dialog."
    },
    {
      "name": "dialog-controls",
      "docs": "Content will be place at the bottom of the dialog."
    },
    {
      "name": "heading",
      "docs": "Content will be placed at the top of the dialog."
    },
    {
      "name": "label",
      "docs": "Content will be placed above the dialog heading."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-dialog",
      "annotation": "prop",
      "docs": "z-index of dialog"
    }
  ],
  "events": [
    {
      "event": "icDialogCancelled",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Cancelation event emitted when default 'Cancel' button clicked or 'cancelDialog' method is called.",
      "docsTags": []
    },
    {
      "event": "icDialogClosed",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when dialog has closed.",
      "docsTags": []
    },
    {
      "event": "icDialogConfirmed",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Confirmation event emitted when default 'Confirm' primary button clicked or 'confirmDialog' method is called.",
      "docsTags": []
    },
    {
      "event": "icDialogOpened",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when dialog has opened.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "cancelDialog",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "cancelDialog() => Promise<void>",
      "parameters": [],
      "docs": "Cancels the dialog. Used by the default 'Cancel' button or can be called manually to trigger cancelling of dialog.",
      "docsTags": []
    },
    {
      "name": "confirmDialog",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "confirmDialog() => Promise<void>",
      "parameters": [],
      "docs": "Confirms the dialog. Used by the default 'Confirm' button or can be called manually to trigger confirming of dialog.",
      "docsTags": []
    },
    {
      "name": "hideDialog",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "hideDialog() => Promise<void>",
      "parameters": [],
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This method should not be used anymore. Use open prop to set dialog visibility."
        }
      ],
      "deprecation": "This method should not be used anymore. Use open prop to set dialog visibility."
    },
    {
      "name": "showDialog",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "showDialog() => Promise<void>",
      "parameters": [],
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This method should not be used anymore. Use open prop to set dialog visibility."
        }
      ],
      "deprecation": "This method should not be used anymore. Use open prop to set dialog visibility."
    }
  ],
  "listeners": [
    {
      "event": "keydown",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "click",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Sizes

export const snippetsSizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog()">Launch dialog</ic-button>
<ic-dialog id="size-dialog" heading="Are you sure?" label="Coffee order">
  <ic-typography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </ic-typography>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const dialog = document.querySelector("#size-dialog");
  function showDialog() {
    dialog.open = true;
  }
  function hideDialog() {
    if (dialog.open) {
      dialog.open = false;
    }
  }
  function dialogConfirmed(ev) {
    alert("Added to basket");
    dialog.open = false;
  }
  dialog.addEventListener("icDialogConfirmed", dialogConfirmed);
  dialog.addEventListener("icDialogClosed", hideDialog);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch sizes dialog</IcButton>
<IcDialog
  size="large" // "small" | "medium" | "large"
  open={openDialog}
  label="Coffee order" 
  heading="Are you sure?"
  onIcDialogClosed={openDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    You are about to add 'Americano' to your basket. Are you sure you want to
    continue?
  </IcTypography>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
      ],
    },
  },
];

export const SizesDialogs = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  return (
    <>
      <IcButton onClick={handleDialogOpen}>Launch sizes dialog</IcButton>
      <IcDialog
        size="large"
        open={openDialog}
        label="Coffee order"
        heading="Are you sure?"
        onIcDialogClosed={openDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          You are about to add 'Americano' to your basket. Are you sure you want
          to continue?
        </IcTypography>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={snippetsSizes}>
  <SizesDialogs />
</ComponentPreview>

### With status alerts

export const snippetsAlert = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog('#status-dialog')">Launch status dialog</ic-button>
<ic-dialog
  id="status-dialog"
  heading="Are you sure?"
  label="Coffee order"
  size="medium"
>
  <ic-alert
    slot="alert"
    heading="They're both good"
    message="Some say tea is just as good as coffee."
    variant="neutral"
    title-above="true"
  >
  </ic-alert>
  <ic-typography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </ic-typography>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const dialog = document.querySelector("#status-dialog");
  function showDialog() {
    dialog.open = true;
  }
  function hideDialog() {
    if (dialog.open) {
      dialog.open = false;
    }
  }
  function dialogConfirmed(ev) {
    alert("Added to basket");
    dialog.open = false;
  }
  dialog.addEventListener("icDialogConfirmed", dialogConfirmed);
  dialog.addEventListener("icDialogClosed", hideDialog);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton
  variant="primary"
  onClick={handleDialogOpen}
>
  Launch status dialog
</IcButton>
<IcDialog
  open={openDialog}
  heading="Are you sure?"
  label="Coffee order"
  onIcDialogClosed={openDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
  size="medium"
>
  <IcAlert
    slot="alert"
    heading="They're both good"
    message="Some say tea is just as good as coffee."
    variant="neutral" // "neutral" | "info" | "warn" | "error" | "success" 
    titleAbove
  />
  <IcTypography>
    You are about to add 'Americano' to your basket. Are you sure you want
    to continue?
  </IcTypography>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenlDialog(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenlDialog(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
      ],
    },
  },
];

export const AlertDialog = () => {
  const dialogEl = useRef(null);
  const addTitleAboveAttribute = () => {
    dialogEl.current
      .querySelector("ic-alert")
      .setAttribute("title-above", "true");
  };
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => {
    addTitleAboveAttribute();
    setOpenDialog(true);
  };
  const handleDialogClose = () => setOpenDialog(false);
  return (
    <>
      <IcButton variant="primary" onClick={handleDialogOpen}>
        Launch dialog
      </IcButton>
      <IcDialog
        ref={dialogEl}
        open={openDialog}
        heading="Are you sure?"
        label="Coffee order"
        onIcDialogClosed={openDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
        size="medium"
      >
        <IcAlert
          slot="alert"
          heading="They're both good"
          message="Some say tea is just as good as coffee."
          variant="neutral"
          titleAbove
        />
        <IcTypography>
          You are about to add 'Americano' to your basket. Are you sure you want
          to continue?
        </IcTypography>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={snippetsAlert}>
  <AlertDialog />
</ComponentPreview>

### Button variations

export const snippetsCustomButtons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog('#no-button-dialog')">Launch no button dialog</ic-button>
<ic-button onclick="showDialog('#single-button-dialog')">Launch single button dialog</ic-button>
<ic-button onclick="showDialog('#three-buttons-dialog')">Launch three button dialog</ic-button>
<ic-button onclick="showDialog('#destructive-dialog')">Launch destructive button dialog</ic-button>
<ic-dialog
  id="no-button-dialog"
  buttons="false"
  label="None"
  heading="This dialog has no default buttons"
>
  Sorry, you cannot place orders at the moment. Please try again later.
</ic-dialog>
<ic-dialog id="single-button-dialog" label="Single" heading="This dialog has a single button">
  <ic-typography>
    Your order for an Americano coffee has been placed.
  </ic-typography>
</ic-dialog>
<ic-dialog id="three-buttons-dialog" label="Three buttons" heading="This dialog has three default buttons">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
  tempor incididunt ut labore et dolore magna aliqua.
</ic-dialog>
<ic-dialog
  id="destructive-dialog"
  destructive="true"
  label="Destructive" 
  heading="This dialog has a default destructive button"
>
  <ic-typography>
    You are about to cancel your order for an Americano. Are you sure you want to continue?
  </ic-typography>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const singleButtonDialog = document.querySelector("#single-button-dialog");
  const threeButtonsDialog = document.querySelector("#three-buttons-dialog");
  const destructiveButtonDialog = document.querySelector("#destructive-dialog");
  function showDialog(id) {
    document.querySelector(id).open = true;
  }
  function hideDialog(ev) {
    if (ev.target.open) {
      ev.target.open = false;
    }
  }
  function dialogConfirmed(ev) {
    alert("Confirmed");
    ev.target.open = false;
  }
  singleButtonDialog.buttonProps = [
    { label: "Confirm", onclick: "alert('Confirmed');this.open = false;" },
  ];
  threeButtonsDialog.buttonProps = [
    { label: "Cancel", onclick: "this.open = false;" },
    { label: "Options", onclick: "alert('Options...');" },
    { label: "Confirm", onclick: "alert('Confirmed'); this.open = false;" },
  ];
  destructiveButtonDialog.buttonProps = [
    { label: "Confirm", onclick: "alert('Confirmed'); this.open = false;" },
  ];
  singleButtonDialog.addEventListener('icDialogClosed', hideDialog);
  threeButtonsDialog.addEventListener('icDialogClosed', hideDialog);
  destructiveButtonDialog.addEventListener('icDialogClosed', hideDialog);
</script>
  `,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<div className={classes.btnContainer}>
  <IcButton onClick={handleNoButtonDialogOpen}>
    Launch no button dialog
  </IcButton>
  <IcButton onClick={handleSingleButtonDialogOpen}>
    Launch single button dialog
  </IcButton>
  <IcButton onClick={handleThreeButtonsDialogOpen}>
    Launch three button dialog
  </IcButton>
  <IcButton onClick={handleDestructiveButtonDialogOpen}>
    Launch destructive button dialog
  </IcButton>
</div>
<IcDialog
  open={openNoButtonDialog}
  buttons={false}
  label="None"
  heading="This dialog has no default buttons"
  onIcDialogClosed={openNoButtonDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
    eiusmod tempor incididunt ut labore et dolore magna aliqua.
  </IcTypography>
</IcDialog>
<IcDialog
  open={openSingleButtonDialog}
  label="Single"
  heading="This dialog has a single button"
  buttonProps={[
    { label: "Confirm", onclick: "alert('Confirmed'); this.hideDialog()" },
  ]}
  onIcDialogClosed={openSingleButtonDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
    eiusmod tempor incididunt ut labore et dolore magna aliqua.
  </IcTypography>
</IcDialog>
<IcDialog
  open={openThreeButtonsDialog}
  label="Triple"
  heading="This dialog has three default buttons"
  buttonProps={[
    { label: "Close", onclick: "this.hideDialog()" },
    { label: "Options", onclick: "alert('Options...')" },
    { label: "Confirm", onclick: "alert('Confirmed'); this.hideDialog()" },
  ]}
  onIcDialogClosed={openThreeButtonsDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
    eiusmod tempor incididunt ut labore et dolore magna aliqua.
  </IcTypography>
</IcDialog>
<IcDialog
  open={openDestructiveButtonDialog}
  destructive
  label="Destructive"
  heading="This dialog has a default destructive button"
  buttonProps={[
    { label: "Confirm", onclick: "alert('Confirmed'); this.hideDialog()" },
  ]}
  onIcDialogClosed={openDestructiveButtonDialog && handleDialogClose}
  onIcDialogConfirmed={handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
    eiusmod tempor incididunt ut labore et dolore magna aliqua.
  </IcTypography>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openNoButtonDialog, setOpenNoButtonDialog] = useState<boolean>(false);
const [openSingleButtonDialog, setOpenSingleButtonDialog] = useState<boolean>(false);
const [openThreeButtonsDialog, setOpenThreeButtonsDialog] = useState<boolean>(false);
const [openDestructiveButtonDialog, setOpenDestructiveButtonDialog] = useState<boolean>(false);
const handleNoButtonDialogOpen = () => setOpenNoButtonDialog(true);
const handleSingleButtonDialogOpen = () => setOpenSingleButtonDialog(true);
const handleThreeButtonsDialogOpen = () => setOpenThreeButtonsDialog(true);
const handleDestructiveButtonDialogOpen = () => setOpenDestructiveButtonDialog(true);
const handleDialogClose = () => {
  setOpenNoButtonDialog(false);
  setOpenSingleButtonDialog(false);
  setOpenThreeButtonsDialog(false);
  setOpenDestructiveButtonDialog(false);
}
const useStyles = createUseStyles({
  btnContainer: { 
    display: "flex",
    gap: "var(--ic-space-xs)",
    flexWrap: "wrap",
  },
});
const classes = useStyles();
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [openNoButtonDialog, setOpenNoButtonDialog] = useState(false);
const [openSingleButtonDialog, setOpenSingleButtonDialog] = useState(false);
const [openThreeButtonsDialog, setOpenThreeButtonsDialog] = useState(false);
const [openDestructiveButtonDialog, setOpenDestructiveButtonDialog] = useState(false);
const handleNoButtonDialogOpen = () => setOpenNoButtonDialog(true);
const handleSingleButtonDialogOpen = () => setOpenSingleButtonDialog(true);
const handleThreeButtonsDialogOpen = () => setOpenThreeButtonsDialog(true);
const handleDestructiveButtonDialogOpen = () => setOpenDestructiveButtonDialog(true);
const handleDialogClose = () => {
  setOpenNoButtonDialog(false);
  setOpenSingleButtonDialog(false);
  setOpenThreeButtonsDialog(false);
  setOpenDestructiveButtonDialog(false);
}
const useStyles = createUseStyles({
  btnContainer: { 
    display: "flex",
    gap: "var(--ic-space-xs)",
    flexWrap: "wrap",
  },
});
const classes = useStyles();
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const CustomButtonsDialog = () => {
  const [openNoButtonDialog, setOpenNoButtonDialog] = useState(false);
  const [openSingleButtonDialog, setOpenSingleButtonDialog] = useState(false);
  const [openThreeButtonsDialog, setOpenThreeButtonsDialog] = useState(false);
  const [openDestructiveButtonDialog, setOpenDestructiveButtonDialog] =
    useState(false);
  const handleNoButtonDialogOpen = () => setOpenNoButtonDialog(true);
  const handleSingleButtonDialogOpen = () => setOpenSingleButtonDialog(true);
  const handleThreeButtonsDialogOpen = () => setOpenThreeButtonsDialog(true);
  const handleDestructiveButtonDialogOpen = () =>
    setOpenDestructiveButtonDialog(true);
  const handleDialogClose = () => {
    setOpenNoButtonDialog(false);
    setOpenSingleButtonDialog(false);
    setOpenThreeButtonsDialog(false);
    setOpenDestructiveButtonDialog(false);
  };
  return (
    <>
      <div style={{ display: "flex", gap: "0.5rem", flexWrap: "wrap" }}>
        <IcButton onClick={handleNoButtonDialogOpen}>
          Launch no button dialog
        </IcButton>
        <IcButton onClick={handleSingleButtonDialogOpen}>
          Launch single button dialog
        </IcButton>
        <IcButton onClick={handleThreeButtonsDialogOpen}>
          Launch three button dialog
        </IcButton>
        <IcButton onClick={handleDestructiveButtonDialogOpen}>
          Launch destructive button dialog
        </IcButton>
      </div>
      <IcDialog
        open={openNoButtonDialog}
        buttons={false}
        label="None"
        heading="This dialog has no default buttons"
        onIcDialogClosed={openNoButtonDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </IcTypography>
      </IcDialog>
      <IcDialog
        open={openSingleButtonDialog}
        label="Single"
        heading="This dialog has a single button"
        buttonProps={[
          {
            label: "Confirm",
            onclick: "alert('Confirmed'); this.hideDialog()",
          },
        ]}
        onIcDialogClosed={openSingleButtonDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </IcTypography>
      </IcDialog>
      <IcDialog
        open={openThreeButtonsDialog}
        label="Triple"
        heading="This dialog has three default buttons"
        buttonProps={[
          { label: "Close", onclick: "this.hideDialog()" },
          { label: "Options", onclick: "alert('Options...')" },
          {
            label: "Confirm",
            onclick: "alert('Confirmed'); this.hideDialog()",
          },
        ]}
        onIcDialogClosed={openThreeButtonsDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </IcTypography>
      </IcDialog>
      <IcDialog
        open={openDestructiveButtonDialog}
        destructive
        label="Destructive"
        heading="This dialog has a default destructive button"
        buttonProps={[
          {
            label: "Confirm",
            onclick: "alert('Confirmed'); this.hideDialog()",
          },
        ]}
        onIcDialogClosed={openDestructiveButtonDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </IcTypography>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={snippetsCustomButtons}>
  <CustomButtonsDialog />
</ComponentPreview>

### Slotted buttons

export const snippetsSlottedButtons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog()">Launch dialog</ic-button>
<ic-dialog id="slotted-dialog" heading="Are you sure?" label="Coffee order">
  <ic-typography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </ic-typography>
  <ic-button slot="dialog-controls" variant="secondary" onclick="hideDialog()">
    Go back
  </ic-button>
  <ic-button slot="dialog-controls" onclick="addToBasket()">
    Add to basket
  </ic-button>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const dialog = document.querySelector("#slotted-dialog");
  function showDialog() {    
    dialog.open = true;
  }
  function hideDialog() {
    if (dialog.open) {
      dialog.open = false;
    }
  }
  function addToBasket() {
    alert("Added to basket");
    dialog.open = false;
  }
  dialog.addEventListener('icDialogClosed', hideDialog);
  dialog.addEventListener('icDialogCancelled', hideDialog);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch slotted buttons dialog</IcButton>
<IcDialog
  heading="Are you sure?"
  label="Coffee order"
  open={openDialog}
  onIcDialogClosed={openDialog && handleDialogClose}
>
  <IcTypography>
    You are about to add 'Americano' to your basket. Are you sure you want
    to continue?
  </IcTypography>
  <IcButton slot="dialog-controls" variant="secondary" onClick={handleDialogClose}>
    Go back
  </IcButton>
  <IcButton slot="dialog-controls" onClick={handleAddToBasket}>
    Add to basket
  </IcButton>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
const handleAddToBasket = () => {
  alert("Added to basket");
  setOpenDialog(false);
}
return (
  <>
    {shortCode}
  </>
);`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
const handleAddToBasket = () => {
  alert("Added to basket");
  setOpenDialog(false);
}
return (
  <>
    {shortCode}
  </>
);`,
        },
      ],
    },
  },
];

export const SlottedButtonsDialog = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  const handleAddToBasket = () => {
    alert("Added to basket");
    setOpenDialog(false);
  };
  return (
    <>
      <IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
      <IcDialog
        heading="Are you sure?"
        label="Coffee order"
        open={openDialog}
        onIcDialogClosed={openDialog && handleDialogClose}
      >
        <IcTypography>
          You are about to add 'Americano' to your basket. Are you sure you want
          to continue?
        </IcTypography>
        <IcButton
          slot="dialog-controls"
          variant="secondary"
          onClick={handleDialogClose}
        >
          Go back
        </IcButton>
        <IcButton slot="dialog-controls" onClick={handleAddToBasket}>
          Add to basket
        </IcButton>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={snippetsSlottedButtons}>
  <SlottedButtonsDialog />
</ComponentPreview>

### Interactive content

export const interactiveContentSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog()">Launch dialog</ic-button>
<ic-dialog 
  id="interactive-content-dialog" 
  label="Coffee order"
  heading="Please agree to our terms and conditions"
>
  <ic-typography>
    Before continuing, please agree to our terms and conditions.
  </ic-typography>
  <ic-checkbox-group 
    name="terms" 
    label="terms and conditions" 
    hide-label="true"
  >
    <ic-checkbox label="I agree to the terms and conditions." value="agree"></ic-checkbox>
  </ic-checkbox-group>
</ic-dialog>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
  ic-checkbox-group {
    margin-top: var(--ic-space-xs)
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const dialog = document.querySelector("#interactive-content-dialog");
    const checkGroup = document.querySelector("ic-checkbox-group");
    let termsAgreed = false;
    function showDialog() {
      dialog.open = true;
    }
    function hideDialog() {
      if (dialog.open) {
        dialog.open = false;
      }
    }
    function toggleTermsAgreed() {
      termsAgreed = !termsAgreed;
    }
    function dialogConfirmed(ev) {
      const message = (termsAgreed) ? "Terms agreed" : "Terms not agreed";
      alert(message);
      ev.target.open = false;
    }
    dialog.addEventListener("icDialogConfirmed", dialogConfirmed);
    dialog.addEventListener("icDialogClosed", hideDialog);
    checkGroup.addEventListener("icChange", toggleTermsAgreed);
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
<IcDialog
  open={openDialog}
  label="Coffee order"
  heading="Please agree to our terms and conditions"
  onIcDialogClosed={openDialog && handleDialogClose}
  onIcDialogConfirmed={termsDialogConfirmed}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    Before continuing, please agree to our terms and conditions.
  </IcTypography>
  <IcCheckboxGroup 
    name="terms" 
    label="terms and conditions" 
    hideLabel
    onIcChange={toggleTermsAgreed}
    className={classes.checkboxGroup}
  >
    <IcCheckbox
      label="I agree to the terms and conditions."
      value="agree"
    />
  </IcCheckboxGroup>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [termsAgreed, setTermsAgreed] = useState<boolean>(false);
const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
const toggleTermsAgreed = () => {
  setTermsAgreed(!termsAgreed);
};
const termsDialogConfirmed = (ev) => {
  const message = (termsAgreed) ? "Terms agreed" : "Terms not agreed";
  alert(message);
  setOpenDialog(false);
};
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
  checkboxGroup: {
    marginTop: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [termsAgreed, setTermsAgreed] = useState<boolean>(false);
const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
const toggleTermsAgreed = () => {
  setTermsAgreed(!termsAgreed);
};
const termsDialogConfirmed = (ev) => {
  const message = (termsAgreed) ? "Terms agreed" : "Terms not agreed";
  alert(message);
  setOpenDialog(false);
};
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
  checkboxGroup: {
    marginTop: "var(--ic-space-xs)",
  },
});
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

export const InteractiveContent = () => {
  const [termsAgreed, setTermsAgreed] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  const toggleTermsAgreed = () => {
    setTermsAgreed(!termsAgreed);
  };
  const termsDialogConfirmed = () => {
    const message = termsAgreed ? "Terms agreed" : "Terms not agreed";
    alert(message);
    setOpenDialog(false);
  };
  return (
    <>
      <IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
      <IcDialog
        open={openDialog}
        label="Coffee order"
        heading="Please agree to our terms and conditions"
        onIcDialogClosed={openDialog && handleDialogClose}
        onIcDialogConfirmed={termsDialogConfirmed}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Before continuing, please agree to our terms and conditions.
        </IcTypography>
        <IcCheckboxGroup
          name="terms"
          label="terms and conditions"
          hideLabel
          onIcChange={toggleTermsAgreed}
          style={{ marginTop: "0.5rem" }}
        >
          <IcCheckbox
            label="I agree to the terms and conditions."
            value="agree"
          />
        </IcCheckboxGroup>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={interactiveContentSnippet}>
  <InteractiveContent />
</ComponentPreview>

### Background close prevented

export const noCloseSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog()">Launch dialog</ic-button>
<ic-dialog
  id="no-close-dialog"
  close-on-backdrop-click="false" 
  label="Background close prevented"
  heading="This dialog can't be closed by clicking the background"
>
  <ic-typography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </ic-typography>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const dialog = document.querySelector("#no-close-dialog");
  function showDialog() {
    dialog.open = true;
  }
  function hideDialog() {
    if (dialog.open) {
      dialog.open = false;
    }
  }
  function dialogConfirmed(ev) {
    alert("Confirmed!");
    ev.target.open = false;
  }
  dialog.addEventListener("icDialogClosed", hideDialog);
  dialog.addEventListener("icDialogCancelled", hideDialog);
  dialog.addEventListener("icDialogConfirmed", dialogConfirmed);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
<IcDialog
  open={openDialog}
  closeOnBackdropClick={false} 
  label="Background close prevented"
  heading="This dialog can't be closed by clicking the background"
  onIcDialogClosed={openDialog && handleDialogClose} 
  onIcDialogConfirmed={handleConfirmDialog} 
  onIcDialogCancelled={handleDialogClose} 
>
  <IcTypography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </IcTypography>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);    
const handleDialogClose = () => setOpenDialog(false);    
const handleConfirmDialog = (ev) => {    
  alert("Confirmed!");
  setOpenDialog(false);
};
return (
  <>
    {shortCode}  
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);    
const handleDialogClose = () => setOpenDialog(false);    
const handleConfirmDialog = (ev) => {    
  alert("Confirmed!");
  setOpenDialog(false);
};
return (
  <>
    {shortCode}   
  </>
)`,
        },
      ],
    },
  },
];

export const NoCloseContent = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  const handleConfirmDialog = () => {
    alert("Confirmed!");
    setOpenDialog(false);
  };
  return (
    <>
      <IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
      <IcDialog
        open={openDialog}
        closeOnBackdropClick={false}
        label="Background close prevented"
        heading="This dialog can't be closed by clicking the background"
        onIcDialogClosed={openDialog && handleDialogClose}
        onIcDialogConfirmed={handleConfirmDialog}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </IcTypography>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={noCloseSnippet}>
  <NoCloseContent />
</ComponentPreview>

### Events

export const eventsSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="showDialog()">Launch dialog</ic-button>
<ic-dialog id="ev-dialog" heading="Are you sure?" label="Coffee order">
  <ic-typography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </ic-typography>
  <ic-button variant="tertiary" onclick="cancelDialog()" slot="dialog-controls">
    Cancel
  </ic-button>
  <ic-button onclick="confirmDialog()" slot="dialog-controls">
    Confirm
  </ic-button>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const dialog = document.querySelector("#ev-dialog");
  function showDialog() {
    dialog.open = true;
  }
  function hideDialog() {
    if (dialog.open) {
      dialog.open = false;
    }
  }
  function dialogConfirmed() {          
    alert("Dialog confirmed");
    dialog.open = false;
  }
  function dialogCancelled() {
    alert("Dialog cancelled");
  }
  function dialogOpened() {
    alert("Dialog opened");
  }
  function dialogClosed() {
    alert("Dialog closed");
    hideDialog();
  }
  function cancelDialog(){
    alert("Slotted cancel button");
    dialog.open = false;
  }
  function confirmDialog(){
    alert("Slotted confirm button");
    dialog.open = false;
  }
  dialog.addEventListener("icDialogConfirmed", dialogConfirmed);
  dialog.addEventListener("icDialogCancelled", dialogCancelled);
  dialog.addEventListener("icDialogOpened", dialogOpened);
  dialog.addEventListener("icDialogClosed", dialogClosed);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
<IcDialog
  open={openDialog}
  heading="This dialog utilises events"
  label="Events"
  onIcDialogOpened={handleDialogOpened}
  onIcDialogConfirmed={handleDialogConfirmed}
  onIcDialogCancelled={handleDialogCancelled}
  onIcDialogClosed={handleDialogClosed}
>
  <IcTypography>
    You are about to add 'Americano' to your basket. Are you sure you want to continue?
  </IcTypography>
  <IcButton variant="tertiary" onClick={handleSlottedCancel} slot="dialog-controls">
    Cancel
  </IcButton>
  <IcButton onClick={handleSlottedConfirm} slot="dialog-controls">
    Confirm
  </IcButton>
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
const handleDialogOpened = () => alert("Dialog opened");
const handleDialogClosed = () => {
  alert("Dialog closed");
  if (openDialog) {
    handleDialogClose();
  }
}
const handleDialogCancelled = () => {
  alert("Dialog cancelled");
  setOpenDialog(false);
}
const handleDialogConfirmed = () => {
  alert("Dialog confirmed");
  setOpenDialog(false);
};
const handleSlottedCancel = () => {
  alert('Slotted cancel button');
  setOpenDialog(false);
};
const handleSlottedConfirm = () => {
  alert('Slotted confirm button');
  setOpenDialog(false);
};
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
const handleDialogOpened = () => alert("Dialog opened");
const handleDialogClosed = () => {
  alert("Dialog closed");
  if (openDialog) {
    handleDialogClose();
  }
}
const handleDialogCancelled = () => {
  alert("Dialog cancelled");
  setOpenDialog(false);
}
const handleDialogConfirmed = () => {
  alert("Dialog confirmed");
  setOpenDialog(false);
};
const handleSlottedCancel = () => {
  alert('Slotted cancel button');
  setOpenDialog(false);
};
const handleSlottedConfirm = () => {
  alert('Slotted confirm button');
  setOpenDialog(false);
};
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const EventsContent = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  const handleDialogOpened = () => alert("Dialog opened");
  const handleDialogClosed = () => {
    alert("Dialog closed");
    if (openDialog) {
      handleDialogClose();
    }
  };
  const handleDialogCancelled = () => {
    alert("Dialog cancelled");
    setOpenDialog(false);
  };
  const handleDialogConfirmed = () => {
    alert("Dialog confirmed");
    setOpenDialog(false);
  };
  const handleSlottedCancel = () => {
    alert("Slotted cancel button");
    setOpenDialog(false);
  };
  const handleSlottedConfirm = () => {
    alert("Slotted confirm button");
    setOpenDialog(false);
  };
  return (
    <>
      <IcButton onClick={handleDialogOpen}>Launch dialog</IcButton>
      <IcDialog
        open={openDialog}
        heading="This dialog utilises events"
        label="Events"
        onIcDialogOpened={handleDialogOpened}
        onIcDialogConfirmed={handleDialogConfirmed}
        onIcDialogCancelled={handleDialogCancelled}
        onIcDialogClosed={handleDialogClosed}
      >
        <IcTypography>
          You are about to add 'Americano' to your basket. Are you sure you want
          to continue?
        </IcTypography>
        <IcButton
          variant="tertiary"
          onClick={handleSlottedCancel}
          slot="dialog-controls"
        >
          Cancel
        </IcButton>
        <IcButton onClick={handleSlottedConfirm} slot="dialog-controls">
          Confirm
        </IcButton>
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={eventsSnippet}>
  <EventsContent />
</ComponentPreview>

### Disabled height constraint

export const popoutElements = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick='showDialog()'>Launch disabled height constraint dialog</ic-button>
<ic-dialog
  label='Coffee order'
  heading='Please add your milk?'
  disable-height-constraint='true'
>
  <ic-typography>Sure, let's dive into the delightful world of milk, where dairy dreams and coffee collide in the harmonious dance of a flat white. Picture this: you stroll into your favorite coffee haunt, the aroma of freshly ground beans tickling your senses. You approach the counter, ready to make a crucial decision – what kind of milk will accompany your flat white?</ic-typography><br/>
  <ic-typography>In the end, whether you go for the classic, embrace the trendy, or opt for the exotic, the flat white remains a canvas waiting to be painted with your milk of choice. So, next time you're at the coffee counter, let your taste buds embark on a journey – a journey where milk and coffee meet, and every sip tells a story, sprinkled with a dash of humor and a whole lot of flavor. Cheers to the caffeinated adventure!</ic-typography><br/>
  <ic-select label='Please select a type of milk'></ic-select>
</ic-dialog>`,
      long: `{shortCode}
<script>
  const milkSelect = document.querySelector('ic-select');
  const dialog = document.querySelector('ic-dialog');
  milkSelect.options = [
    { value: 'whole', label: 'Whole' },
    { value: 'semiskinned', label: 'Semi Skinned' },
    { value: 'oat', label: 'Oat' },
    { value: 'almond', label: 'Almond' }
  ];
  function showDialog() {
    dialog.open = true;
  }
  function hideDialog() {
    if (dialog.open) {
      dialog.open = false;
    }
  }
  dialog.addEventListener('icDialogClosed', hideDialog);
  dialog.addEventListener('icDialogCancelled', hideDialog);
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDialogOpen}>Launch disabled height constraint dialog</IcButton>
<IcDialog
  label='Coffee order'
  heading="Please add your milk"
  disableHeightConstraint 
  open={openDialog}
  onIcDialogConfirmed={openDialog && handleDialogClose}
  onIcDialogCancelled={handleDialogClose}
>
  <IcTypography>
    Sure, let's dive into the delightful world of milk, where dairy dreams
    and coffee collide in the harmonious dance of a flat white. Picture
    this: you stroll into your favorite coffee haunt, the aroma of freshly
    ground beans tickling your senses. You approach the counter, ready to
    make a crucial decision – what kind of milk will accompany your flat
    white?
  </IcTypography>
  <br />
  <IcTypography>
    In the end, whether you go for the classic, embrace the trendy, or opt
    for the exotic, the flat white remains a canvas waiting to be painted
    with your milk of choice. So, next time you're at the coffee counter,
    let your taste buds embark on a journey – a journey where milk and
    coffee meet, and every sip tells a story, sprinkled with a dash of
    humor and a whole lot of flavor. Cheers to the caffeinated adventure!
  </IcTypography>
  <br />
  <IcSelect 
    label='Select a type of milk'
    options={[
      { value: 'whole', label: 'Whole' },
      { value: 'semiskinned', label: 'Semi Skinned' },
      { value: 'oat', label: 'Oat' },
      { value: 'almond', label: 'Almond' }
    ]}
  />
</IcDialog>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [openDialog, setOpenDialog] = useState<boolean>(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [openDialog, setOpenDialog] = useState(false);
const handleDialogOpen = () => setOpenDialog(true);
const handleDialogClose = () => setOpenDialog(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const DialogWithPopout = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const handleDialogOpen = () => setOpenDialog(true);
  const handleDialogClose = () => setOpenDialog(false);
  return (
    <>
      <IcButton onClick={handleDialogOpen}>
        Launch disabled height constraint dialog
      </IcButton>
      <IcDialog
        label="Coffee order"
        heading="Please add your milk"
        disableHeightConstraint
        open={openDialog}
        onIcDialogClosed={openDialog && handleDialogClose}
        onIcDialogConfirmed={handleDialogClose}
        onIcDialogCancelled={handleDialogClose}
      >
        <IcTypography>
          Sure, let's dive into the delightful world of milk, where dairy dreams
          and coffee collide in the harmonious dance of a flat white. Picture
          this: you stroll into your favorite coffee haunt, the aroma of freshly
          ground beans tickling your senses. You approach the counter, ready to
          make a crucial decision – what kind of milk will accompany your flat
          white?
        </IcTypography>
        <br />
        <IcTypography>
          In the end, whether you go for the classic, embrace the trendy, or opt
          for the exotic, the flat white remains a canvas waiting to be painted
          with your milk of choice. So, next time you're at the coffee counter,
          let your taste buds embark on a journey – a journey where milk and
          coffee meet, and every sip tells a story, sprinkled with a dash of
          humor and a whole lot of flavor. Cheers to the caffeinated adventure!
        </IcTypography>
        <br />
        <IcSelect
          label="Select a type of milk"
          options={[
            { value: "whole", label: "Whole" },
            { value: "semiskinned", label: "Semi Skinned" },
            { value: "oat", label: "Oat" },
            { value: "almond", label: "Almond" },
          ]}
        />
      </IcDialog>
    </>
  );
};

<ComponentPreview snippets={popoutElements}>
  <DialogWithPopout />
</ComponentPreview>

---

# Footer

URL: https://design.sis.gov.uk/components/footer/code
Status: BETA
Subtitle: Footers are placed at the bottom of the page and can be used for additional links not found in the main navigation.


import { IcFooter, IcLink, IcFooterLink, IcFooterLinkGroup } from "@ukic/react";

import { NavLink, MemoryRouter } from "react-router-dom";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-footer
  description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
  caption="All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence."
>
  <ic-footer-link slot="link" href="#">
    Accessibility
  </ic-footer-link>
  <ic-footer-link slot="link" href="#">
    Styles
  </ic-footer-link>
  <ic-footer-link slot="link" href="#">
    Components
  </ic-footer-link>
  <ic-footer-link slot="link" href="#">
    Patterns
  </ic-footer-link>
</ic-footer>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcFooter
  description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
  caption="All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence."
>
  <IcFooterLink slot="link" href="#">
    Accessibility
  </IcFooterLink>
  <IcFooterLink slot="link" href="#">
    Styles
  </IcFooterLink>
  <IcFooterLink slot="link" href="#">
    Components
  </IcFooterLink>
  <IcFooterLink slot="link" href="#">
    Patterns
  </IcFooterLink>
</IcFooter>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcFooter
    description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
    caption="All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence."
  >
    <IcFooterLink slot="link" href="#">
      Accessibility
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Styles
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Components
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Patterns
    </IcFooterLink>
  </IcFooter>
</ComponentPreview>

## Footer details

{
  "props": [
    {
      "name": "aligned",
      "type": "\"center\" | \"full-width\" | \"left\"",
      "complexType": {
        "original": "IcAlignment",
        "resolved": "\"center\" | \"full-width\" | \"left\"",
        "references": {
          "IcAlignment": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the section containers used within the footer.",
      "docsTags": [],
      "default": "\"left\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "full-width",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "breakpoint",
      "type": "\"extra large\" | \"extra small\" | \"large\" | \"medium\" | \"small\"",
      "complexType": {
        "original": "IcFooterBreakpoints",
        "resolved": "\"extra large\" | \"extra small\" | \"large\" | \"medium\" | \"small\"",
        "references": {
          "IcFooterBreakpoints": {
            "location": "import",
            "path": "./ic-footer.types",
            "id": "src/components/ic-footer/ic-footer.types.tsx::IcFooterBreakpoints"
          }
        }
      },
      "mutable": false,
      "attr": "breakpoint",
      "reflectToAttr": false,
      "docs": "The screen size breakpoint at which to switch to the small layout.",
      "docsTags": [],
      "default": "\"medium\"",
      "values": [
        {
          "value": "extra large",
          "type": "string"
        },
        {
          "value": "extra small",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "caption",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "caption",
      "reflectToAttr": false,
      "docs": "The caption displayed at the bottom of the footer.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "copyright",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "copyright",
      "reflectToAttr": false,
      "docs": "If `true`, the footer will display the crown copyright at the bottom.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "description",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "description",
      "reflectToAttr": false,
      "docs": "The description displayed at the top of the footer.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "groupLinks",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "group-links",
      "reflectToAttr": false,
      "docs": "If `true`, the footer will be set up to handle link groups instead of standalone links.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "caption",
      "docs": "Content will be rendered above Crown Copyright."
    },
    {
      "name": "description",
      "docs": "Content will be rendered at the top of the footer."
    },
    {
      "name": "link",
      "docs": "Content will be rendered between description and logos."
    },
    {
      "name": "logo",
      "docs": "Content will be rendered underneath footer links."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": [
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Footer link details

{
  "props": [
    {
      "name": "download",
      "type": "boolean | string",
      "complexType": {
        "original": "string | boolean",
        "resolved": "boolean | string",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "If `true`, the user can save the linked URL instead of navigating to it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the link points to.",
      "docsTags": [],
      "default": "null",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": [
    {
      "event": "footerResized",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Footer link group details

{
  "props": [
    {
      "name": "groupTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "group-title",
      "reflectToAttr": false,
      "docs": "The title of the link group to be displayed.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": [
    {
      "event": "footerResized",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Grouped links

export const snippetsGroupedLinks = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-footer
  group-links="true"
  description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
>
  <ic-footer-link-group slot="link" group-title="Grouped heading">
    <ic-footer-link href="#">Accessibility</ic-footer-link>
    <ic-footer-link href="#">Styles</ic-footer-link>
    <ic-footer-link href="#">Components</ic-footer-link>
    <ic-footer-link href="#">Patterns</ic-footer-link>
  </ic-footer-link-group>
  <ic-footer-link-group slot="link" group-title="Grouped heading">
    <ic-footer-link href="#">Accessibility</ic-footer-link>
    <ic-footer-link href="#">Styles</ic-footer-link>
    <ic-footer-link href="#">Components</ic-footer-link>
    <ic-footer-link href="#">Patterns</ic-footer-link>
  </ic-footer-link-group>
  <ic-footer-link-group slot="link" group-title="Grouped heading">
    <ic-footer-link href="#">Accessibility</ic-footer-link>
    <ic-footer-link href="#">Styles</ic-footer-link>
    <ic-footer-link href="#">Components</ic-footer-link>
    <ic-footer-link href="#">Patterns</ic-footer-link>
  </ic-footer-link-group>
</ic-footer>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcFooter
  groupLinks
  description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
>
  <IcFooterLinkGroup slot="link" groupTitle="Grouped heading">
    <IcFooterLink href="#">Accessibility</IcFooterLink>
    <IcFooterLink href="#">Styles</IcFooterLink>
    <IcFooterLink href="#">Components</IcFooterLink>
    <IcFooterLink href="#">Patterns</IcFooterLink>
  </IcFooterLinkGroup>
  <IcFooterLinkGroup slot="link" groupTitle="Grouped heading">
    <IcFooterLink href="#">Accessibility</IcFooterLink>
    <IcFooterLink href="#">Styles</IcFooterLink>
    <IcFooterLink href="#">Components</IcFooterLink>
    <IcFooterLink href="#">Patterns</IcFooterLink>
  </IcFooterLinkGroup>
  <IcFooterLinkGroup slot="link" groupTitle="Grouped heading">
    <IcFooterLink href="#">Accessibility</IcFooterLink>
    <IcFooterLink href="#">Styles</IcFooterLink>
    <IcFooterLink href="#">Components</IcFooterLink>
    <IcFooterLink href="#">Patterns</IcFooterLink>
  </IcFooterLinkGroup>
</IcFooter>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsGroupedLinks}>
  <IcFooter
    groupLinks
    description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
  >
    <IcFooterLinkGroup slot="link" groupTitle="Grouped heading">
      <IcFooterLink href="#">Accessibility</IcFooterLink>
      <IcFooterLink href="#">Styles</IcFooterLink>
      <IcFooterLink href="#">Components</IcFooterLink>
      <IcFooterLink href="#">Patterns</IcFooterLink>
    </IcFooterLinkGroup>
    <IcFooterLinkGroup slot="link" groupTitle="Grouped heading">
      <IcFooterLink href="#">Accessibility</IcFooterLink>
      <IcFooterLink href="#">Styles</IcFooterLink>
      <IcFooterLink href="#">Components</IcFooterLink>
      <IcFooterLink href="#">Patterns</IcFooterLink>
    </IcFooterLinkGroup>
    <IcFooterLinkGroup slot="link" groupTitle="Grouped heading">
      <IcFooterLink href="#">Accessibility</IcFooterLink>
      <IcFooterLink href="#">Styles</IcFooterLink>
      <IcFooterLink href="#">Components</IcFooterLink>
      <IcFooterLink href="#">Patterns</IcFooterLink>
    </IcFooterLinkGroup>
  </IcFooter>
</ComponentPreview>

### Logo links

export const snippetsLogoLinks = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-footer description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.">
  <ic-footer-link slot="link" href="#">Accessibility</ic-footer-link>
  <ic-footer-link slot="link" href="#">Styles</ic-footer-link>
  <ic-footer-link slot="link" href="#">Components</ic-footer-link>
  <ic-footer-link slot="link" href="#">Patterns</ic-footer-link>
    <div slot="logo" role="list">
      <ic-footer-link href="#">
        <svg xmlns="http://www.w3.org/2000/svg"
          height="48"
          viewBox="0 0 24 24"
          width="48"
          fill="#FFFFFF"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
      </svg>
      </ic-footer-link>
      <ic-footer-link href="#">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          height="48"
          viewBox="0 0 24 24"
          width="48"
          fill="#FFFFFF"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </ic-footer-link>
    </div>
</ic-footer>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcFooter description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.">
  <IcFooterLink slot="link" href="#">Accessibility</IcFooterLink>
  <IcFooterLink slot="link" href="#">Styles</IcFooterLink>
  <IcFooterLink slot="link" href="#">Components</IcFooterLink>
  <IcFooterLink slot="link" href="#">Patterns</IcFooterLink>
  <div slot="logo" role="list">
    <IcFooterLink href="#">
      <SlottedSVG
        xmlns="http://www.w3.org/2000/svg"
        height="48"
        viewBox="0 0 24 24"
        width="48"
        fill="#FFFFFF"
      >
        <path
          d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
          fill="currentColor"
        />
      </SlottedSVG>
    </IcFooterLink>
    <IcFooterLink href="#">
      <SlottedSVG
        xmlns="http://www.w3.org/2000/svg"
        height="48"
        viewBox="0 0 24 24"
        width="48"
        fill="#FFFFFF"
      >
        <path
          d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
          fill="currentColor"
        />
      </SlottedSVG>
    </IcFooterLink>
  </div>
</IcFooter>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLogoLinks}>
  <IcFooter description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners.">
    <IcFooterLink slot="link" href="#">
      Accessibility
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Styles
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Components
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Patterns
    </IcFooterLink>
    <div
      slot="logo"
      style={{
        display: "flex",
        gap: "var(--ic-space-lg)",
      }}
      role="list"
    >
      <IcFooterLink href="#">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          height="48"
          viewBox="0 0 24 24"
          width="48"
          fill="#FFFFFF"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </IcFooterLink>
      <IcFooterLink href="#">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          height="48"
          viewBox="0 0 24 24"
          width="48"
          fill="#FFFFFF"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </IcFooterLink>
    </div>
  </IcFooter>
</ComponentPreview>

### With React Router

export const withReactRouter = [
  {
    technology: "React",
    snippets: {
      short: `<MemoryRouter initialEntries={["/"]}>
  <Routes>
    <Route path="/" element={<IcTypography>This is the accessibility page</IcTypography>} />
    <Route path="/Styles" element={<IcTypography>This page is about styles</IcTypography>} />
  </Routes>
  <IcFooter description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
  >
    <IcFooterLink slot="link">
      <NavLink to="#">Accessibility</NavLink>
    </IcFooterLink>
    <IcFooterLink slot="link">
      <NavLink to="/Styles">Styles</NavLink>
    </IcFooterLink>
    <div slot="logo" className={classes.logoContainer}>
      Logo
    </div>
  </IcFooter>
</MemoryRouter>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  logoContainer: {
    width: "6.25rem",
    height: "6.25rem",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "var(--ic-theme-primary)",
    color: "var(--ic-theme-text)"
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  logoContainer: {
    width: "6.25rem",
    height: "6.25rem",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "var(--ic-theme-primary)",
    color: "var(--ic-theme-text)"
  },
});
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withReactRouter}
  style={{ flexDirection: "column" }}
>
  <MemoryRouter initialEntries={["/"]}>
    <IcFooter
      description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
    >
      <IcFooterLink slot="link">
        <NavLink to="#">Accessibility</NavLink>
      </IcFooterLink>
      <IcFooterLink slot="link">
        <NavLink to="/Styles">Styles</NavLink>
      </IcFooterLink>
      <div
        slot="logo"
        style={{
          width: "6.25rem",
          height: "6.25rem",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          backgroundColor: "var(--ic-theme-primary)",
          color: "var(--ic-theme-text)",
        }}
      >
        Logo
      </div>
    </IcFooter>
  </MemoryRouter>
</ComponentPreview>

## Layout example

Adding a `minHeight` of `100vh` ensures the footer appears below the page fold.

export const footerLayoutExample = [
  {
    technology: "Web component",
    snippets: {
      short: `<div class="footer-layout-root">
  <div class="div-container">
    <ic-top-navigation appTitle="ICDS" status="alpha" version="v0.0.7">
      <svg
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </svg>
    </ic-top-navigation>
    <main>
      <ic-section-container>
        <ic-typography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed
          vestibulum venenatis facilisis. Nam tortor felis, auctor vel
          ante quis, tempor interdum libero. In dictum sodales velit, eu
          egestas arcu dignissim ac. Aliquam facilisis eros dolor, id
          laoreet orci sagittis ut. Sed tempus, lacus in pretium molestie,
          lectus magna interdum risus, vel fringilla libero ex eu dui.
          Suspendisse ullamcorper vehicula lacinia. Phasellus congue velit
          nisl, vitae congue ligula rutrum id.
        </ic-typography>
      </ic-section-container>
    </main>
  </div>
  <ic-footer
    description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
    caption="All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.">
    <ic-footer-link slot="link" href="#">Accessibility</ic-footer-link>
    <ic-footer-link slot="link" href="#">Styles</ic-footer-link>
    <ic-footer-link slot="link" href="#">Components</ic-footer-link>
    <ic-footer-link slot="link" href="#">Patterns</ic-footer-link>
  </ic-footer>
</div>
    `,
      long: `.div-container {
    min-height: 100vh;
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<div className='footer-layout-root'>
  <div className={classes.divContainer}>
    <IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
      <SlottedSVG
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </SlottedSVG>
    </IcTopNavigation>
    <main>
      <IcSectionContainer>
        <IcTypography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed
          vestibulum venenatis facilisis. Nam tortor felis, auctor vel
          ante quis, tempor interdum libero. In dictum sodales velit, eu
          egestas arcu dignissim ac. Aliquam facilisis eros dolor, id
          laoreet orci sagittis ut. Sed tempus, lacus in pretium molestie,
          lectus magna interdum risus, vel fringilla libero ex eu dui.
          Suspendisse ullamcorper vehicula lacinia. Phasellus congue velit
          nisl, vitae congue ligula rutrum id.
        </IcTypography>
      </IcSectionContainer>
    </main>
  </div>
  <IcFooter
    description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
    caption="All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence.">
    <IcFooterLink slot="link" href="#">Accessibility</IcFooterLink>
    <IcFooterLink slot="link" href="#">Styles</IcFooterLink>
    <IcFooterLink slot="link" href="#">Components</IcFooterLink>
    <IcFooterLink slot="link" href="#">Patterns</IcFooterLink>
  </IcFooter>
</div>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  divContainer: {
    minHeight: "100vh",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  divContainer: {
    minHeight: "100vh",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={footerLayoutExample}>
  <IcLink href="/footer-layout" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

---

# Hero

URL: https://design.sis.gov.uk/components/hero/code
Status: BETA
Subtitle: A large banner found at the top of page used to introduce page content, provide key actions and add personality.


import { IcHero, IcButton, IcSearchBar, IcCard } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
>
  <ic-button variant="primary" slot="interaction">Explore</ic-button>
  <ic-button variant="secondary" slot="interaction">
    Check out our new drinks
  </ic-button>
</ic-hero>`,
      long: `ic-hero {
      height: fit-content;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
>
  <IcButton variant="primary" slot="interaction">
    Explore
  </IcButton>
  <IcButton variant="secondary" slot="interaction">
    Check out our new drinks
  </IcButton>
</IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
  >
    <IcButton variant="primary" slot="interaction">
      Explore
    </IcButton>
    <IcButton variant="secondary" slot="interaction">
      Check out our new drinks
    </IcButton>
  </IcHero>
</ComponentPreview>

## Hero details

{
  "props": [
    {
      "name": "aligned",
      "type": "\"center\" | \"full-width\" | \"left\"",
      "complexType": {
        "original": "IcAlignment",
        "resolved": "\"center\" | \"full-width\" | \"left\"",
        "references": {
          "IcAlignment": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the hero.",
      "docsTags": [],
      "default": "\"left\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "full-width",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "backgroundImage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "background-image",
      "reflectToAttr": false,
      "docs": "The optional background image.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "contentAligned",
      "type": "\"center\" | \"left\"",
      "complexType": {
        "original": "IcHeroContentAlignments",
        "resolved": "\"center\" | \"left\"",
        "references": {
          "IcHeroContentAlignments": {
            "location": "import",
            "path": "./ic-hero.types",
            "id": "src/components/ic-hero/ic-hero.types.tsx::IcHeroContentAlignments"
          }
        }
      },
      "mutable": false,
      "attr": "content-aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the hero content.",
      "docsTags": [],
      "default": "\"left\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disableBackgroundParallax",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-background-parallax",
      "reflectToAttr": false,
      "docs": "If `true`, the background image (if set) will not scroll using a parallax effect.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The heading of the hero.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "secondaryHeading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "secondary-heading",
      "reflectToAttr": false,
      "docs": "The optional secondary heading, replaced by slotted right content.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "secondarySubheading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "secondary-subheading",
      "reflectToAttr": false,
      "docs": "The optional secondary subheading, replaced by slotted right content.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the hero component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "subheading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "subheading",
      "reflectToAttr": false,
      "docs": "The description for the hero.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "heading",
      "docs": "Content will be rendered in the title area, in place of the heading."
    },
    {
      "name": "interaction",
      "docs": "Content will be rendered in the interaction area, adjacent to the title area."
    },
    {
      "name": "secondary",
      "docs": "Content will be rendered in the secondary content area."
    },
    {
      "name": "subheading",
      "docs": "Content will be rendered in the title area, in place of the subheading."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": [
    {
      "event": "themeChange",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "scroll",
      "target": "document",
      "capture": false,
      "passive": true
    }
  ]
}


## Variants

### Centre aligned

export const snippetsCentre = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  aligned="center"
>
  <ic-button variant="primary" slot="interaction">Explore</ic-button>
  <ic-button variant="secondary" slot="interaction">
    Check out our new drinks
  </ic-button>
</ic-hero>`,
      long: `ic-hero {
      height: fit-content;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  aligned="center"
  class={classes.hero}
>
  <IcButton variant="primary" slot="interaction">
    Explore
  </IcButton>
  <IcButton variant="secondary" slot="interaction">
    Check out our new drinks
  </IcButton>
</IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCentre}>
  <IcHero
    aligned="center"
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
  >
    <IcButton variant="primary" slot="interaction">
      Explore
    </IcButton>
    <IcButton variant="secondary" slot="interaction">
      Check out our new drinks
    </IcButton>
  </IcHero>
</ComponentPreview>

### Content centre aligned

export const snippetsContentCentre = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  aligned="center"
  content-aligned="center"
>
  <ic-button variant="primary" slot="interaction">Explore</ic-button>
  <ic-button variant="secondary" slot="interaction">
    Check out our new drinks
  </ic-button>
</ic-hero>`,
      long: `ic-hero {
      height: fit-content;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  aligned="center"
  contentAligned="center"
  class={classes.hero}
>
  <IcButton variant="primary" slot="interaction">
    Explore
  </IcButton>
  <IcButton variant="secondary" slot="interaction">
    Check out our new drinks
  </IcButton>
</IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsContentCentre}>
  <IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
    aligned="center"
    contentAligned="center"
  >
    <IcButton variant="primary" slot="interaction">
      Explore
    </IcButton>
    <IcButton variant="secondary" slot="interaction">
      Check out our new drinks
    </IcButton>
  </IcHero>
</ComponentPreview>

### Size small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero
  heading="New coffee launches 14 September 2022"
  subheading="Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary."
  size="small"
>
  <ic-button variant="primary" slot="interaction" size="small">Order now</ic-button>
  <ic-button variant="secondary" slot="interaction" size="small">Submit new flavour</ic-button>
</ic-hero>`,
      long: `ic-hero {
      height: fit-content;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero
  heading="New coffee launches 14 September 2022"
  subheading="Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary."
  size="small"
  class={classes.hero}
>
  <IcButton variant="primary" slot="interaction" size="small">
    Order now
  </IcButton>
  <IcButton variant="secondary" slot="interaction" size="small">
    Submit new flavour
  </IcButton>
</IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSmall}>
  <IcHero
    heading="New coffee launches 14 September 2022"
    subheading="Brand new flavours now available! Irresistible. Caramel. Decadence. Sugary."
    size="small"
  >
    <IcButton variant="primary" slot="interaction" size="small">
      Order now
    </IcButton>
    <IcButton variant="secondary" slot="interaction" size="small">
      Submit new flavour
    </IcButton>
  </IcHero>
</ComponentPreview>

### Secondary heading and search

export const snippetsSecondHeadingSearch = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  secondary-heading="The classics"
  secondary-subheading="Try our original flavours."
>
  <ic-search-bar
    slot="interaction"
    label="Search for coffee"
    hide-label="true"
  ></ic-search-bar>
</ic-hero>`,
      long: `ic-hero {
      height: fit-content;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  secondaryHeading="The classics" 
  secondarySubheading="Try our original flavours."
  class={classes.hero}
>
  <IcSearchBar slot="interaction" label="Search for coffee" hideLabel/>
</IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
    hero: {
      height: "fit-content",
    },
  });
  const classes = useStyles();
  return (
    {shortCode}
  )`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSecondHeadingSearch}>
  <IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
    secondaryHeading="The classics"
    secondarySubheading="Try our original flavours."
  >
    <IcSearchBar slot="interaction" label="Search for coffee" hideLabel />
  </IcHero>
</ComponentPreview>

### Card right content

export const snippetsCard = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero 
  heading="Everything I brew, I brew it for you" 
  subheading="This news is hot off the French press." 
  card-heading="Out now" 
  card-message="Try our new strawberry infused tea." 
  aligned="full-width"
>
  <ic-button variant="primary" slot="interaction">Explore</ic-button>
  <ic-button variant="secondary" slot="interaction">Check out our new drinks</ic-button>
  <ic-card
    heading="Out now"
    message="Try our new strawberry infused tea."
    slot="secondary"
    class="hero-card"
  ></ic-card>
</ic-hero>
  `,
      long: `.hero-card {
      color: var(--ic-theme-text);
      width: 18.75rem;
    }
    ic-hero {
      height: fit-content;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero 
  heading="Everything I brew, I brew it for you" 
  subheading="This news is hot off the French press." 
  cardHeading="Out now" 
  cardMessage="Try our new strawberry infused tea." 
  aligned="full-width"
  class={classes.hero}
>
  <IcButton variant="primary" slot="interaction">Explore</IcButton>
  <IcButton variant="secondary" slot="interaction">Check out our new drinks</IcButton>
  <IcCard
    heading="Out now"
    message="Try our new strawberry infused tea."
    slot="secondary"
    className={classes.heroCard}
  />
</IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  heroCard: {
    color: "var(--ic-theme-text)",
    width: "18.75rem",
  },
  hero: {
    height: "fit-content",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  heroCard: {
    color: "var(--ic-theme-text)",
    width: "18.75rem",
  },
  hero: {
    height: "fit-content",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCard}>
  <IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
    cardHeading="Out now"
    cardMessage="Try our new strawberry infused tea."
    aligned="full-width"
  >
    <IcButton variant="primary" slot="interaction">
      Explore
    </IcButton>
    <IcButton variant="secondary" slot="interaction">
      Check out our new drinks
    </IcButton>
    <IcCard
      heading="Out now"
      message="Try our new strawberry infused tea."
      slot="secondary"
      class="hero-card"
      style={{
        color: "var--ic-theme-text",
        width: "18.75rem",
      }}
    />
  </IcHero>
</ComponentPreview>

### Image right content

export const snippetsImage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-hero
  heading="Everything I brew, I brew it for you"
  subheading="This news is hot off the French press."
  aligned="full-width"
>
  <ic-button variant="primary" slot="interaction">Explore</ic-button>
  <ic-button variant="secondary" slot="interaction">Check out our new drinks</ic-button>
  <svg
    slot="secondary"
    class="card-image"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1600 900"
  >
    <rect fill="#ff7700" width="1600" height="900" />
    <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
    <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
    <polygon fill="#c50022" points="-60 900 398 662 816 900" />
    <polygon fill="#a3001b" points="337 900 398 662 816 900" />
    <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
    <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
    <polygon fill="#b80066" points="641 695 886 900 367 900" />
    <polygon fill="#960052" points="587 900 641 695 886 900" />
    <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
    <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
    <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
    <polygon fill="#880088" points="943 900 1210 900 971 687" />
  </svg>
</ic-hero>`,
      long: `.card-image {
    width: 18.75rem;
  }
  ic-hero {
    height: fit-content;
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
    aligned="full-width"
    class={classes.hero}
  >
    <IcButton variant="primary" slot="interaction">Explore</IcButton>
    <IcButton variant="secondary" slot="interaction">Check out our new drinks</IcButton>
    <SlottedSVG
      slot="secondary"
      className={classes.cardImage}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1600 900"
    >
      <rect fill="#ff7700" width="1600" height="900" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </SlottedSVG>
  </IcHero>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  cardImage: {
    width: "18.75rem",
  },
  hero: {
    height: "fit-content",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  cardImage: {
    width: "18.75rem",
  },
  hero: {
    height: "fit-content",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsImage}>
  <IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
    aligned="full-width"
  >
    <IcButton variant="primary" slot="interaction">
      Explore
    </IcButton>
    <IcButton variant="secondary" slot="interaction">
      Check out our new drinks
    </IcButton>
    <svg
      slot="secondary"
      style={{
        width: "18.75rem",
      }}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1600 900"
    >
      <rect fill="#ff7700" width="1600" height="900" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
  </IcHero>
</ComponentPreview>

---

# Loading indicator

URL: https://design.sis.gov.uk/components/loading-indicator/code
Status: BETA
Subtitle: Loading indicators help inform users that a request is being processed. Circular and linear indicators provide flexibility in design.


import { IcLoadingIndicator } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-loading-indicator type="circular" label="Loading..."></ic-loading-indicator>
<ic-loading-indicator type="linear" label="Loading..."></ic-loading-indicator>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLoadingIndicator type="circular" label="Loading..." />
<IcLoadingIndicator type="linear" label="Loading..." />`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippets}
  style={{ flexDirection: "column", gap: "0.5rem" }}
>
  <IcLoadingIndicator type="circular" label="Loading..." />
  <IcLoadingIndicator type="linear" label="Loading..." />
</ComponentPreview>

## Loading indicator details

{
  "props": [
    {
      "name": "appearance",
      "type": "\"dark\" | \"light\"",
      "complexType": {
        "original": "IcThemeForegroundNoDefault",
        "resolved": "\"dark\" | \"light\"",
        "references": {
          "IcThemeForegroundNoDefault": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForegroundNoDefault"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the loading indicator, e.g. dark or light.",
      "docsTags": [],
      "default": "\"dark\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "description",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "description",
      "reflectToAttr": false,
      "docs": "The description that will be set as the aria-label of the loading indicator when not using a visible label.",
      "docsTags": [],
      "default": "\"Loading\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": true,
      "docs": "If `true`, when linear, the full-width variant (i.e. without a border radius) will be displayed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to be displayed beneath the loading indicator.\nDisplay a changing label by separating multiple messages with forward slashes.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "labelDuration",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "label-duration",
      "reflectToAttr": false,
      "docs": "The time in milliseconds before the label changes.",
      "docsTags": [],
      "default": "8000",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "max",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "The maximum value that the progress value can take.\nUsed to calculate the proportional width of the progress bar.",
      "docsTags": [],
      "default": "100",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "min",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "The minimum value that the progress value can take.\nUsed to calculate the proportional width of the progress bar.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "progress",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "progress",
      "reflectToAttr": false,
      "docs": "The current amount of progress made.\nIf not provided, component acts as an indeterminate loading indicator.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"icon\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcLoadingSizes",
        "resolved": "\"default\" | \"icon\" | \"large\" | \"small\"",
        "references": {
          "IcLoadingSizes": {
            "location": "import",
            "path": "./ic-loading-indicator.types",
            "id": "src/components/ic-loading-indicator/ic-loading-indicator.types.tsx::IcLoadingSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": true,
      "docs": "The size of the loading indicator.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "icon",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "type",
      "type": "\"circular\" | \"linear\"",
      "complexType": {
        "original": "IcLoadingTypes",
        "resolved": "\"circular\" | \"linear\"",
        "references": {
          "IcLoadingTypes": {
            "location": "import",
            "path": "./ic-loading-indicator.types",
            "id": "src/components/ic-loading-indicator/ic-loading-indicator.types.tsx::IcLoadingTypes"
          }
        }
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": true,
      "docs": "The type of indicator, either linear or circular.",
      "docsTags": [],
      "default": "\"circular\"",
      "values": [
        {
          "value": "circular",
          "type": "string"
        },
        {
          "value": "linear",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--circular-diameter",
      "annotation": "prop",
      "docs": "Diameter of the circular-indicator"
    }
  ],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Sizes

export const snippetsSizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-loading-indicator type="circular" label="Loading..." size="small"></ic-loading-indicator>
<ic-loading-indicator type="circular" label="Loading..." size="large"></ic-loading-indicator>
<ic-loading-indicator type="linear" label="Loading..." size="small"></ic-loading-indicator>
<ic-loading-indicator type="linear" label="Loading..." size="large"></ic-loading-indicator>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLoadingIndicator type="circular" label="Loading..." size="small" />
<IcLoadingIndicator type="circular" label="Loading..." size="large" />
<IcLoadingIndicator type="linear" label="Loading..." size="small" />
<IcLoadingIndicator type="linear" label="Loading..." size="large" />`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsSizes}
  style={{ flexDirection: "column", gap: "0.5rem" }}
>
  <IcLoadingIndicator type="circular" label="Loading..." size="small" />
  <IcLoadingIndicator type="circular" label="Loading..." size="large" />
  <IcLoadingIndicator type="linear" label="Loading..." size="small" />
  <IcLoadingIndicator type="linear" label="Loading..." size="large" />
</ComponentPreview>

### Icon

export const snippetsIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-loading-indicator size="icon"></ic-loading-indicator>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLoadingIndicator size="icon" />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIcon}>
  <IcLoadingIndicator size="icon" />
</ComponentPreview>

### Determinate

export const snippetsDeterminate = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-loading-indicator type="circular" label="Progress 30%" progress="30" min="0" max="100"></ic-loading-indicator>
<ic-loading-indicator type="linear" label="Progress 30%" progress="30" min="0" max="100"></ic-loading-indicator>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLoadingIndicator type="circular" label="Progress 30%" progress="30" min="0" max="100" />
<IcLoadingIndicator type="linear" label="Progress 30%" progress="30" min="0" max="100" />`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsDeterminate}
  style={{ flexDirection: "column", gap: "0.5rem" }}
>
  <IcLoadingIndicator
    type="circular"
    label="Progress 30%"
    progress="30"
    min="0"
    max="100"
  />
  <IcLoadingIndicator
    type="linear"
    label="Progress 30%"
    progress="30"
    min="0"
    max="100"
  />
</ComponentPreview>

### Light

export const snippetsLight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-loading-indicator
    type="circular"
    label="Loading"
    appearance="light"
  ></ic-loading-indicator>
  <ic-loading-indicator
    type="linear"
    label="Loading"
    appearance="light"
  ></ic-loading-indicator>`,
      long: `.dark-background {
      flex-direction: column; 
      gap: var(--ic-space-xs); 
      background: #333333;
    }
  </style>
    <body>
      <div class="dark-background">
        {shortCode}
      </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLoadingIndicator type="circular" label="Loading" appearance="light" />
<IcLoadingIndicator type="linear" label="Loading" appearance="light" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    display: "flex",
    flexDirection: "column", 
    gap: "var(--ic-space-xs)", 
    background: "#333333",
  },
});
const classes = useStyles();
return (
  <div className={classes.darkBackground}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    display: "flex",
    flexDirection: "column", 
    gap: "var(--ic-space-xs)", 
    background: "#333333",
  },
});
const classes = useStyles();
return (
  <div className={classes.darkBackground}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsLight}
  style={{ flexDirection: "column", gap: "0.5rem", background: "#333333" }}
>
  <IcLoadingIndicator type="circular" label="Loading" appearance="light" />
  <IcLoadingIndicator type="linear" label="Loading" appearance="light" />
</ComponentPreview>

### Changing label

export const snippetsChangingLabel = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-loading-indicator type="circular" label="Loading.../Still loading..." label-duration="4000"></ic-loading-indicator>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcLoadingIndicator
      type="circular"
      label="Loading.../Still loading..."
      labelDuration={4000}
    />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsChangingLabel}>
  <IcLoadingIndicator
    type="circular"
    label="Loading.../Still loading..."
    labelDuration={4000}
  />
</ComponentPreview>

---

# Page header

URL: https://design.sis.gov.uk/components/page-header/code
Status: BETA
Subtitle: A page header defines the top of the page content and is a consistent way to show page context, key actions and secondary navigation.


import {
  IcPageHeader,
  IcButton,
  IcStepper,
  IcStep,
  SlottedSVG,
  IcTextField,
  IcNavigationItem,
  IcBreadcrumb,
  IcBreadcrumbGroup,
  IcSectionContainer,
  IcChip,
  IcTypography,
} from "@ukic/react";

import { NavLink, MemoryRouter } from "react-router-dom";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-page-header
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
    reverse-order="true"
>
  <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
  <ic-button slot="actions" variant="primary">
    Create coffee
  </ic-button>
  <ic-button slot="actions" variant="tertiary">
    Filter coffee
  </ic-button>
  <ic-stepper slot="stepper">
    <ic-step step-title="Warm kettle" step-type="completed"></ic-step>
    <ic-step
      step-title="Warm milk"
      step-subtitle="Optional"
      step-type="completed"
    ></ic-step>
    <ic-step step-title="Pour milk" step-type="current" ></ic-step>
  </ic-stepper>
  <ic-text-field
    slot="input"
    placeholder="Search for ingredients…"
    label="Input"
    hide-label="true"
  ></ic-text-field>
</ic-page-header>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPageHeader heading="Latte recipe"
  subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
  reverseOrder 
>
  <IcChip slot="heading-adornment" label="BETA" size="large" />
  <IcButton slot="actions" variant="primary">
    Create coffee
  </IcButton>
  <IcButton slot="actions" variant="tertiary">
    Filter coffee
  </IcButton>
  <IcStepper slot="stepper">
    <IcStep stepTitle="Warm kettle" stepType="completed" />
    <IcStep
      stepTitle="Warm milk"
      stepSubtitle="Optional"
      stepType="completed"
    />
    <IcStep stepTitle="Pour milk" stepType="current" />
  </IcStepper>
  <IcTextField
    slot="input"
    placeholder="Search for ingredients…"
    label="Input"
    hideLabel
  />
</IcPageHeader>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets} style={{ flexDirection: "column" }}>
  <IcPageHeader
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam. "
    reverseOrder
  >
    <IcChip slot="heading-adornment" label="BETA" size="large" />
    <IcButton slot="actions" variant="primary">
      Create coffee
    </IcButton>
    <IcButton slot="actions" variant="tertiary">
      Filter coffee
    </IcButton>
    <IcStepper slot="stepper">
      <IcStep stepTitle="Warm kettle" stepType="completed" />
      <IcStep
        stepTitle="Warm milk"
        stepSubtitle="Optional"
        stepType="completed"
      />
      <IcStep stepTitle="Pour milk" stepType="current" />
    </IcStepper>
    <IcTextField
      slot="input"
      placeholder="Search for ingredients…"
      label="Input"
      hideLabel
    />
  </IcPageHeader>
</ComponentPreview>

## Page header details

{
  "props": [
    {
      "name": "aligned",
      "type": "\"center\" | \"full-width\" | \"left\"",
      "complexType": {
        "original": "IcAlignment",
        "resolved": "\"center\" | \"full-width\" | \"left\"",
        "references": {
          "IcAlignment": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the page header.",
      "docsTags": [],
      "default": "\"left\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "full-width",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "border",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "border",
      "reflectToAttr": false,
      "docs": "If `true`, a border will be displayed along the bottom of the page header.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The title to render on the page header.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "reverseOrder",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "reverse-order",
      "reflectToAttr": false,
      "docs": "If `true`, the reading pattern and tab order will change in the action area for viewport widths of above 576px and when actions have not wrapped.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the page header component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "sticky",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "sticky",
      "reflectToAttr": false,
      "docs": "If `true`, the page header will be sticky at all breakpoints.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "stickyDesktopOnly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "sticky-desktop-only",
      "reflectToAttr": false,
      "docs": "If `true`, the page header will only be sticky for viewport widths of 992px and above.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "subheading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "subheading",
      "reflectToAttr": false,
      "docs": "The subtitle to render on the page header.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "actions",
      "docs": "Content will be rendered in the action area, adjacent to the title area."
    },
    {
      "name": "breadcrumbs",
      "docs": "Content will be rendered in the breadcrumb area, above the title and action areas."
    },
    {
      "name": "heading",
      "docs": "Content will be rendered in the title area, in place of the heading."
    },
    {
      "name": "heading-adornment",
      "docs": "Content will be rendered in the title area, adjacent to the heading."
    },
    {
      "name": "input",
      "docs": "Content will be rendered in the input area, below the title area and adjacent to the action area."
    },
    {
      "name": "stepper",
      "docs": "Content will be rendered in the navigation area, below the title and action areas. Note: stepper slot cannot be used when the tabs slot is being used."
    },
    {
      "name": "subheading",
      "docs": "Content will be rendered in the title area, in place of the subheading."
    },
    {
      "name": "tabs",
      "docs": "Content will be rendered in the navigation area, below the title and action areas. Note: the stepper slot cannot be used when the tabs slot is being used."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-page-header",
      "annotation": "prop",
      "docs": "z-index of page-header"
    }
  ],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Size small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-page-header
  size="small"
  heading="Latte recipe"
  subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
></ic-page-header>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPageHeader
  size="small"
  heading="Latte recipe"
  subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSmall} style={{ flexDirection: "column" }}>
  <IcPageHeader
    size="small"
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
  />
</ComponentPreview>

### With breadcrumb navigation

export const withBreadcrumbNavigation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-page-header heading="Latte recipe" subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam.">
  <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
  <ic-breadcrumb-group slot="breadcrumbs">
    <ic-breadcrumb current="true" page-title="Drinks" href="#"></ic-breadcrumb>
    <ic-breadcrumb
      page-title="Coffees" 
      href="#"
    >
    </ic-breadcrumb>
    <ic-breadcrumb page-title="Latte" href="#"></ic-breadcrumb>
  </ic-breadcrumb-group>
</ic-page-header>
    `,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPageHeader heading="Latte recipe" subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam.">
  <IcChip slot="heading-adornment" label="BETA" size="large" />
  <IcBreadcrumbGroup slot="breadcrumbs">
    <IcBreadcrumb pageTitle="Drinks" href="#" />
    <IcBreadcrumb 
      pageTitle="Coffees" 
      href="#"
    />
    <IcBreadcrumb current pageTitle="Latte" href="#" />
  </IcBreadcrumbGroup>
</IcPageHeader>
    `,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withBreadcrumbNavigation}
  style={{ flexDirection: "column" }}
>
  <IcPageHeader
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
  >
    <IcChip slot="heading-adornment" label="BETA" size="large" />
    <IcBreadcrumbGroup slot="breadcrumbs">
      <IcBreadcrumb pageTitle="Drinks" href="#" />
      <IcBreadcrumb pageTitle="Coffees" href="#" />
      <IcBreadcrumb current pageTitle="Latte" href="#" />
    </IcBreadcrumbGroup>
  </IcPageHeader>
</ComponentPreview>

### With actions, input and stepper

export const withActionsInputStepper = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-page-header heading="Latte recipe" subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam." reverse-order="true">
  <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
  <ic-button slot="actions" variant="primary">Create coffee</ic-button>
  <ic-button slot="actions" variant="tertiary">Filter coffee</ic-button>
  <ic-stepper slot="stepper">
    <ic-step step-title="Warm kettle" step-type="completed"></ic-step>
    <ic-step step-title="Warm milk" step-subtitle="Optional" step-type="completed"></ic-step>
    <ic-step step-title="Pour milk" step-type="current"></ic-step>
  </ic-stepper>
  <ic-text-field slot="input" placeholder="Search for ingredients…" label="Input" hide-label="true" />
</ic-page-header>
    `,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPageHeader 
  heading="latte recipe" 
  subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam." 
  reverseOrder
>
  <IcChip slot="heading-adornment" label="BETA" size="large" />
  <IcButton slot="actions" variant="primary">
    Create coffee
  </IcButton>
  <IcButton slot="actions" variant="tertiary">
    Filter coffee
  </IcButton>
  <IcStepper slot="stepper">
    <IcStep stepTitle="Warm kettle" stepType="completed" />
    <IcStep stepTitle="Warm milk" stepSubtitle="Optional" stepType="completed" />
      <IcStep stepTitle="Pour milk" stepType="current" />
  </IcStepper>
  <IcTextField slot="input" placeholder="Search for ingredients…" label="Input" hideLabel />
</IcPageHeader>
    `,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withActionsInputStepper}
  style={{ flexDirection: "column" }}
>
  <IcPageHeader
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
    reverseOrder
  >
    <IcChip slot="heading-adornment" label="BETA" size="large" />
    <IcButton slot="actions" variant="primary">
      Create coffee
    </IcButton>
    <IcButton slot="actions" variant="tertiary">
      Filter coffee
    </IcButton>
    <IcStepper slot="stepper">
      <IcStep stepTitle="Warm kettle" stepType="completed" />
      <IcStep
        stepTitle="Warm milk"
        stepSubtitle="Optional"
        stepType="completed"
      />
      <IcStep stepTitle="Pour milk" stepType="current" />
    </IcStepper>
    <IcTextField
      slot="input"
      placeholder="Search for ingredients…"
      label="Input"
      hideLabel
    />
  </IcPageHeader>
</ComponentPreview>

### With actions, input and navigation items

export const withActionsInputNavItems = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-page-header 
  heading="Latte recipe" 
  subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam." 
  reverse-order="true"
>
  <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
  <ic-button slot="actions" variant="primary">Create coffee</ic-button>
  <ic-button slot="actions" variant="tertiary">Filter coffee</ic-button>
  <ic-text-field slot="input" placeholder="Search for ingredients…" label="Input" hide-label="true"></ic-text-field>
  <ic-navigation-item 
    slot="tabs" 
    label="Method" 
    href="#" 
    selected="true"
  >
  </ic-navigation-item>
  <ic-navigation-item 
    slot="tabs" 
    label="Ingredients" 
    href="#"
  >
  </ic-navigation-item>
</ic-page-header>
    `,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPageHeader 
  heading="Latte recipe" 
  subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam." 
  reverseOrder
>
  <IcChip slot="heading-adornment" label="BETA" size="large" />
  <IcButton slot="actions" variant="primary">
    Create coffee
  </IcButton>
  <IcButton slot="actions" variant="tertiary">
    Filter coffee
  </IcButton>
  <IcTextField 
    slot="input" 
    placeholder="Search for ingredients…"
    label="Input" 
    hideLabel 
  />
  <IcNavigationItem 
    slot="tabs" 
    label="Method" 
    href="#" 
    selected 
  />
  <IcNavigationItem 
    slot="tabs" 
    label="Ingredients" 
    href="#" 
  />
</IcPageHeader>
    `,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withActionsInputNavItems}
  style={{ flexDirection: "column" }}
>
  <IcPageHeader
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
    reverseOrder
  >
    <IcChip slot="heading-adornment" label="BETA" size="large" />
    <IcButton slot="actions" variant="primary">
      Create coffee
    </IcButton>
    <IcButton slot="actions" variant="tertiary">
      Filter coffee
    </IcButton>
    <IcTextField
      slot="input"
      placeholder="Search for ingredients…"
      label="Input"
      hideLabel
    />
    <IcNavigationItem slot="tabs" label="Method" href="#" selected />
    <IcNavigationItem slot="tabs" label="Ingredients" href="#" />
  </IcPageHeader>
</ComponentPreview>

### With React Router

export const withReactRouter = [
  {
    technology: "React",
    snippets: {
      short: `<MemoryRouter initialEntries={["/"]}>
  <IcPageHeader
    heading="Latte recipe"
    subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
    reverseOrder
  >
    <IcChip slot="heading-adornment" label="BETA" size="large"/>
    <IcButton slot="actions" variant="primary"
      >Create coffee
      <SlottedSVG 
        slot="icon" 
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z"
          fill="currentColor"
        />
      </SlottedSVG>
    </IcButton>
    <IcButton slot="actions" variant="tertiary">Filter coffee</IcButton>
    <IcNavigationItem slot="tabs" selected>
      <NavLink slot="navigation-item" to="/">Method</NavLink>
    </IcNavigationItem>        
    <IcNavigationItem slot="tabs">
      <NavLink slot="navigation-item" to="/favourites">Ingredients</NavLink>
    </IcNavigationItem>
    <IcTextField 
      slot="input" 
      placeholder="Search for ingredients…"
      label="Input" 
      hideLabel 
      class={classes.textField}
    />
  </IcPageHeader>
  <IcSectionContainer>
    <Routes>
      <Route path="/" element={<IcTypography>This page is about our Latte making methods</IcTypography>}/>
      <Route path="/favourites" element={<IcTypography>This page is about the ingredients used in our Latte</IcTypography>}/>
    </Routes>
  </IcSectionContainer>
</MemoryRouter>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  textField: {
    '@media (max-width: 576px)': {
    width: '17.5rem'
    }
  }
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  textField: {
    '@media (max-width: 576px)': {
    width: '17.5rem'
    }
  }
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={withReactRouter}
  style={{ flexDirection: "column" }}
>
  <MemoryRouter initialEntries={["/"]}>
    <IcPageHeader
      heading="Latte recipe"
      subheading="A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam."
      reverseOrder
    >
      <IcChip slot="heading-adornment" label="BETA" size="large" />
      <IcButton slot="actions" variant="primary">
        Create coffee
        <SlottedSVG
          slot="icon"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z"
            fill="currentColor"
          />
        </SlottedSVG>
      </IcButton>
      <IcButton slot="actions" variant="tertiary">
        Filter coffee
      </IcButton>
      <IcNavigationItem slot="tabs" selected>
        <NavLink slot="navigation-item" to="/">
          Method
        </NavLink>
      </IcNavigationItem>
      <IcNavigationItem slot="tabs">
        <NavLink slot="navigation-item" to="/favourites">
          Ingredients
        </NavLink>
      </IcNavigationItem>
      <IcTextField
        slot="input"
        placeholder="Search for ingredients…"
        label="Input"
        hideLabel
        style={{ "@media (maxWidth: 576px)": { width: "17.5rem" } }}
      />
    </IcPageHeader>
    <IcSectionContainer />
  </MemoryRouter>
</ComponentPreview>

### With Slots

export const withSlots = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-page-header>
  <ic-typography variant="h1" slot="heading">Latte recipe</ic-typography>
  <ic-typography slot="subheading">A Latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam.</ic-typography>
  <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
  <ic-breadcrumb-group slot="breadcrumbs">
    <ic-breadcrumb current="true" page-title="Drinks" href="#"></ic-breadcrumb>
    <ic-breadcrumb page-title="Coffees" href="#"></ic-breadcrumb>
    <ic-breadcrumb page-title="Latte" href="#"></ic-breadcrumb>
  </ic-breadcrumb-group>
  <ic-text-field slot="input" placeholder="Search for ingredients…" label="Input" hide-label="true" />
</ic-page-header>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPageHeader>
  <IcTypography variant="h1" slot="heading">
    Latte recipe
  </IcTypography>
  <IcTypography slot="subheading">
    A Latte is a popular Italian coffee, made with espresso, steamed milk and
    a thin layer of foam.
  </IcTypography>
  <IcChip slot="heading-adornment" label="BETA" size="large" />
  <IcBreadcrumbGroup slot="breadcrumbs">
    <IcBreadcrumb pageTitle="Drinks" href="#" />
    <IcBreadcrumb pageTitle="Coffees" href="#" />
    <IcBreadcrumb current pageTitle="Latte" href="#" />
  </IcBreadcrumbGroup>
  <IcTextField
    slot="input"
    placeholder="Search for ingredients…"
    label="Input"
    hideLabel
  />
</IcPageHeader>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withSlots} style={{ flexDirection: "column" }}>
  <IcPageHeader>
    <IcTypography variant="h1" slot="heading">
      Latte recipe
    </IcTypography>
    <IcTypography slot="subheading">
      A Latte is a popular Italian coffee, made with espresso, steamed milk and
      a thin layer of foam.
    </IcTypography>
    <IcChip slot="heading-adornment" label="BETA" size="large" />
    <IcBreadcrumbGroup slot="breadcrumbs">
      <IcBreadcrumb pageTitle="Drinks" href="#" />
      <IcBreadcrumb pageTitle="Coffees" href="#" />
      <IcBreadcrumb current pageTitle="Latte" href="#" />
    </IcBreadcrumbGroup>
    <IcTextField
      slot="input"
      placeholder="Search for ingredients…"
      label="Input"
      hideLabel
    />
  </IcPageHeader>
</ComponentPreview>

---

# Pagination

URL: https://design.sis.gov.uk/components/pagination/code
Status: BETA
Subtitle: Use the Pagination components to split large amounts of content into pages and navigate between them.


import { IcPagination } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination pages="15"></ic-pagination>
<ic-pagination pages="15" type="complex"></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination pages={15} />
<IcPagination pages={15} type="complex" />`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={snippets}
>
  <div style={{ width: "fit-content", margin: "auto" }}>
    <IcPagination pages={15} />
  </div>
  <IcPagination pages={15} type="complex" />
</ComponentPreview>

## Pagination details

{
  "props": [
    {
      "name": "adjacentCount",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": true,
      "attr": "adjacent-count",
      "reflectToAttr": false,
      "docs": "The number of pages displayed adjacent to the current page when using 'complex' type pagination. Accepted values are 0, 1 & 2.",
      "docsTags": [],
      "default": "1",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the pagination, e.g. dark, light or the default.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "boundaryCount",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": true,
      "attr": "boundary-count",
      "reflectToAttr": false,
      "docs": "The number of pages displayed as boundary items to the current page when using 'complex' type pagination. Accepted values are 0, 1 & 2.",
      "docsTags": [],
      "default": "1",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "currentPage",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": true,
      "attr": "current-page",
      "reflectToAttr": false,
      "docs": "The current page displayed by the pagination.",
      "docsTags": [],
      "default": "this.defaultPage",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "defaultPage",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "default-page",
      "reflectToAttr": false,
      "docs": "The default page to display.",
      "docsTags": [],
      "default": "1",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the pagination will not allow interaction.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideCurrentPage",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-current-page",
      "reflectToAttr": false,
      "docs": "If `true`, the current page of the simple pagination will not be displayed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideFirstAndLastPageButton",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-first-and-last-page-button",
      "reflectToAttr": false,
      "docs": "If `true`, the first and last page buttons will not be displayed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the pagination item (applicable when simple pagination is being used).",
      "docsTags": [],
      "default": "\"Page\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "pages",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "pages",
      "reflectToAttr": false,
      "docs": "The total number of pages.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "type",
      "type": "\"complex\" | \"simple\"",
      "complexType": {
        "original": "IcPaginationTypes",
        "resolved": "\"complex\" | \"simple\"",
        "references": {
          "IcPaginationTypes": {
            "location": "import",
            "path": "./ic-pagination.types",
            "id": "src/components/ic-pagination/ic-pagination.types.ts::IcPaginationTypes"
          }
        }
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of pagination to be used.",
      "docsTags": [],
      "default": "\"simple\"",
      "values": [
        {
          "value": "complex",
          "type": "string"
        },
        {
          "value": "simple",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [
    {
      "event": "icPageChange",
      "detail": "IcChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcChangeEventDetail",
        "resolved": "IcChangeEventDetail",
        "references": {
          "IcChangeEventDetail": {
            "location": "import",
            "path": "./ic-pagination.types",
            "id": "src/components/ic-pagination/ic-pagination.types.ts::IcChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a page is selected.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setCurrentPage",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(page: number) => Promise<void>",
        "parameters": [
          {
            "name": "page",
            "type": "number",
            "docs": "The page number to set as the current page"
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setCurrentPage(page: number) => Promise<void>",
      "parameters": [
        {
          "name": "page",
          "type": "number",
          "docs": "The page number to set as the current page"
        }
      ],
      "docs": "Sets the currently displayed page.",
      "docsTags": [
        {
          "name": "param",
          "text": "page The page number to set as the current page"
        }
      ]
    }
  ],
  "listeners": [
    {
      "event": "paginationItemClick",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Hide first and last page buttons

export const hideFirstLast = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination 
  hide-first-and-last-page-button="true"
  pages="15"
></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination hideFirstAndLastPageButton pages={15} />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={hideFirstLast}
>
  <IcPagination hideFirstAndLastPageButton pages={15} />
</ComponentPreview>

### Hide current page (only in 'simple' type)

export const hideCurrent = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination hide-current-page="true" pages="15"></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination hideCurrentPage pages={15} />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={hideCurrent}
>
  <IcPagination hideCurrentPage pages={15} />
</ComponentPreview>

### Appearance

export const appearance = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination appearance="dark" pages="15"></ic-pagination>
<ic-pagination appearance="light" pages="15" class="dark-background"></ic-pagination>`,
      long: `.dark-background {
      background-color: #2c2f34;
    }
  </style>
  <body>
    {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination appearance="dark" pages={15} />
<IcPagination appearance="light" pages={15} class={classes.darkBackground} />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    backgroundColor: "#2c2f34",
  }
});
const classes = useStyles();
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={appearance}
>
  <IcPagination appearance="dark" pages={15} />
  <div style={{ backgroundColor: "#000", marginBottom: "0.75rem" }}>
    <IcPagination appearance="light" pages={15} />
  </div>
</ComponentPreview>

### Boundary and Adjacent items set

export const boundaryAdjacent = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination
  type="complex"
  adjacent-count="2"
  boundary-count="2"
  pages="15"
></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination 
  type="complex"
  adjacentCount={2}
  boundaryCount={2}
  pages={15} 
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={boundaryAdjacent}
>
  <IcPagination type="complex" adjacentCount={2} boundaryCount={2} pages={15} />
</ComponentPreview>

### Disabled

export const disabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination type="complex" disabled="true" pages="12"></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination type="complex" disabled pages={12} />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={disabled}
>
  <IcPagination type="complex" disabled pages={12} />
</ComponentPreview>

### Label

export const label = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination label="Slide" pages="12"></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination label="Slide" pages={12} />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ display: "block", margin: "auto" }} snippets={label}>
  <IcPagination label="Slide" pages={12} />
</ComponentPreview>

### Default page

export const defaultPage = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-pagination pages="12" default-page="4"></ic-pagination>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcPagination pages={12} defaultPage={4}/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ display: "block", margin: "auto" }}
  snippets={defaultPage}
>
  <IcPagination pages={12} defaultPage={4} />
</ComponentPreview>

---

# Popover menu

URL: https://design.sis.gov.uk/components/popover-menu/code
Status: BETA
Subtitle: Use popover menus to place actions inside a menu that overlays other page content when opened.


import { IcPopoverMenu, IcMenuItem, IcMenuGroup, IcButton } from "@ukic/react";
import { useState } from "react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button 
  id="button-1" 
  variant="icon"
  title="More information" 
  onclick="handleClick()"
  aria-expanded="false"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    class="bi bi-three-dots-vertical"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </svg>
</ic-button>
<div>
  <ic-popover-menu anchor="button-1" aria-label="popover" id="popover-menu">
    <ic-menu-item label="Copy code"></ic-menu-item>
    <ic-menu-item label="Paste code"></ic-menu-item>
    <ic-menu-item
      label="Actions"
      submenu-trigger-for="actions"
    ></ic-menu-item>
  </ic-popover-menu>
  <ic-popover-menu submenu-id="actions">
    <ic-menu-item label="Edit"></ic-menu-item>
    <ic-menu-item label="Find"></ic-menu-item>
    <ic-menu-item label="Delete" variant="destructive"></ic-menu-item>
  </ic-popover-menu>
</div>`,
      long: `{shortCode}
<script>
  var icPopover = document.querySelector("#popover-menu");
  var anchorButton = document.querySelector("#button-1");
  function handleClick() {
    icPopover.open = !icPopover.open;
    anchorButton.setAttribute('aria-expanded', icPopover.open);
  }
  icPopover.addEventListener('icPopoverClosed', handleClose);
  function handleClose() {
    anchorButton.setAttribute('aria-expanded', 'false');
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton
  variant="icon"
  title="More information"
  id="button-1"
  onClick={handlePopoverToggled}
  aria-expanded={popoverOpen}
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    class="bi bi-three-dots-vertical"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </SlottedSVG>
</IcButton>
<IcPopoverMenu anchor="button-1" aria-label="popover" open={popoverOpen} onIcPopoverClosed={handlePopoverClosed}>
  <IcMenuItem label="Copy code" />
  <IcMenuItem label="Paste code" />
  <IcMenuItem label="Actions" submenuTriggerFor="actions" />
</IcPopoverMenu>
<IcPopoverMenu submenuId="actions" aria-label="popover">
  <IcMenuItem label="Edit" />
  <IcMenuItem label="Find" />
  <IcMenuItem label="Delete" variant="destructive" />
</IcPopoverMenu>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState<boolean>(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
        {
          language: "Javascript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
      ],
    },
  },
];

export const DemoPopover = () => {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const handlePopoverToggled = () => setPopoverOpen((value) => !value);
  const handlePopoverClosed = () => setPopoverOpen(false);
  return (
    <>
      <IcButton
        variant="icon"
        title="More information"
        id="button-1"
        onClick={handlePopoverToggled}
        aria-expanded={popoverOpen}
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="bi bi-three-dots-vertical"
          viewBox="0 0 16 16"
        >
          <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
        </svg>
      </IcButton>
      <IcPopoverMenu
        anchor="button-1"
        aria-label="popover"
        open={popoverOpen}
        onIcPopoverClosed={handlePopoverClosed}
      >
        <IcMenuItem label="Copy code" />
        <IcMenuItem label="Paste code" />
        <IcMenuItem label="Actions" submenuTriggerFor="actions" />
      </IcPopoverMenu>
      <IcPopoverMenu submenuId="actions" aria-label="popover">
        <IcMenuItem label="Edit" />
        <IcMenuItem label="Find" />
        <IcMenuItem label="Delete" variant="destructive" />
      </IcPopoverMenu>
    </>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
  snippets={snippets}
>
  <DemoPopover />
</ComponentPreview>

## Popover menu details

{
  "props": [
    {
      "name": "anchor",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "anchor",
      "reflectToAttr": false,
      "docs": "The ID of the element the popover menu will anchor itself to. This is required unless the popover is a submenu.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "open",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "open",
      "reflectToAttr": true,
      "docs": "If `true`, the popover menu will be displayed.",
      "docsTags": [],
      "default": "undefined",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "submenuId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "submenu-id",
      "reflectToAttr": false,
      "docs": "The unique identifier for a popover submenu.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-popover",
      "annotation": "prop",
      "docs": "z-index of popover menu."
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the popover menu."
    },
    {
      "name": "--popover-width",
      "annotation": "prop",
      "docs": "Default width of the popover menu."
    }
  ],
  "events": [
    {
      "event": "icPopoverClosed",
      "detail": "HTMLIcMenuItemElement",
      "bubbles": true,
      "complexType": {
        "original": "HTMLIcMenuItemElement",
        "resolved": "HTMLIcMenuItemElement",
        "references": {
          "HTMLIcMenuItemElement": {
            "location": "global",
            "id": "global::HTMLIcMenuItemElement"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the popover menu is closed.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "handleMenuItemClick",
      "capture": false,
      "passive": false
    },
    {
      "event": "triggerPopoverMenuInstance",
      "capture": true,
      "passive": false
    },
    {
      "event": "click",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "keydown",
      "capture": false,
      "passive": false
    }
  ]
}


## Menu item details

{
  "props": [
    {
      "name": "description",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "description",
      "reflectToAttr": false,
      "docs": "The description displayed in the menu item, below the label.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the menu item will be in disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "The URL that the link points to. This will render the menu item as an \"a\" tag.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hreflang",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hreflang",
      "reflectToAttr": false,
      "docs": "The human language of the linked URL.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "keyboardShortcut",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "keyboard-shortcut",
      "reflectToAttr": false,
      "docs": "The label describing the keyboard shortcut for a menu item's action.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to display in the menu item.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "referrerpolicy",
      "type": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
      "complexType": {
        "original": "ReferrerPolicy",
        "resolved": "\"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
        "references": {
          "ReferrerPolicy": {
            "location": "global",
            "id": "global::ReferrerPolicy"
          }
        }
      },
      "mutable": false,
      "attr": "referrerpolicy",
      "reflectToAttr": false,
      "docs": "How much of the referrer to send when following the link.",
      "docsTags": [],
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "no-referrer",
          "type": "string"
        },
        {
          "value": "no-referrer-when-downgrade",
          "type": "string"
        },
        {
          "value": "origin",
          "type": "string"
        },
        {
          "value": "origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "same-origin",
          "type": "string"
        },
        {
          "value": "strict-origin",
          "type": "string"
        },
        {
          "value": "strict-origin-when-cross-origin",
          "type": "string"
        },
        {
          "value": "unsafe-url",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "The relationship of the linked URL as space-separated link types.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "submenuTriggerFor",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "submenu-trigger-for",
      "reflectToAttr": false,
      "docs": "This references the popover menu instance that the menu item is a trigger for. If this prop is set, then the variant will always be default.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "The place to display the linked URL, as the name for a browsing context (a tab, window, or iframe).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "toggleChecked",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "toggle-checked",
      "reflectToAttr": true,
      "docs": "If `true`, the menu item will be in a checked state. This is only applicable when variant is set to `toggle`.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"default\" | \"destructive\" | \"toggle\"",
      "complexType": {
        "original": "IcMenuItemVariants",
        "resolved": "\"default\" | \"destructive\" | \"toggle\"",
        "references": {
          "IcMenuItemVariants": {
            "location": "import",
            "path": "./ic-menu-item.types",
            "id": "src/components/ic-menu-item/ic-menu-item.types.ts::IcMenuItemVariants"
          }
        }
      },
      "mutable": true,
      "attr": "variant",
      "reflectToAttr": true,
      "docs": "The variant of the menu item.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "destructive",
          "type": "string"
        },
        {
          "value": "toggle",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "icon",
      "docs": "Content will be placed to the left of the menu item label."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "icToggleChecked",
      "detail": "{ checked: boolean; }",
      "bubbles": true,
      "complexType": {
        "original": "{\n    checked: boolean;\n  }",
        "resolved": "{ checked: boolean; }",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user clicks a menu item that is set to the toggle variant.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "click",
      "capture": true,
      "passive": false
    }
  ]
}


## Menu group details

{
  "props": [
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to display as the title of the menu group.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### With button variations

export const snippetsButtons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button 
  id="button-2" 
  variant="icon"
  title="More information" 
  onclick="handleClick()"
  aria-expanded="false"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    class="bi bi-three-dots-vertical"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </svg>
</ic-button>
<div>
  <ic-popover-menu anchor="button-2" aria-label="popover" id="popover-menu-2">
    <ic-menu-item label="Copy" disabled="true"></ic-menu-item>
    <ic-menu-item label="Paste" keyboard-shortcut="Cmd + V"></ic-menu-item>
    <ic-menu-item label="Edit" description="This is used to edit the original."></ic-menu-item>
    <ic-menu-item label="Show/Hide" variant="toggle"></ic-menu-item>
    <ic-menu-item label="Find icons">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path
          d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
        />
      </svg>
    </ic-menu-item>
    <ic-menu-item label="Delete" disabled="true" variant="destructive"></ic-menu-item>
    <ic-menu-item label="Log out" variant="destructive"></ic-menu-item>
  </ic-popover-menu>
</div>`,
      long: `{shortCode}
<script>
  var icPopover = document.querySelector("#popover-menu-2");
  var anchorButton = document.querySelector("#button-2");
  function handleClick() {
    icPopover.open = !icPopover.open;
    anchorButton.setAttribute('aria-expanded', icPopover.open);
  }
  icPopover.addEventListener('icPopoverClosed', handleClose);
  function handleClose() {
    anchorButton.setAttribute('aria-expanded', 'false');
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton
  variant="icon"
  title="More information"
  id="button-2"
  onClick={handlePopoverToggled}
  aria-expanded={popoverOpen}
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    class="bi bi-three-dots-vertical"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </SlottedSVG>
</IcButton>
<IcPopoverMenu anchor="button-2" aria-label="popover" open={popoverOpen} onIcPopoverClosed={handlePopoverClosed}>
  <IcMenuItem label="Copy" disabled />
  <IcMenuItem label="Paste" keyboardShortcut="Cmd + V" />
  <IcMenuItem label="Edit" description="This is used to edit the original." />
  <IcMenuItem label="Show/Hide" variant="toggle" />
  <IcMenuItem label="Find icons">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path
        d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
      />
    </SlottedSVG>
  </IcMenuItem>
  <IcMenuItem label="Delete" disabled variant="destructive" />
  <IcMenuItem label="Log out" variant="destructive" />
</IcPopoverMenu>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState<boolean>(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const ButtonsPopover = () => {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const handlePopoverToggled = () => setPopoverOpen((value) => !value);
  const handlePopoverClosed = () => setPopoverOpen(false);
  return (
    <>
      <IcButton
        variant="icon"
        title="More information"
        id="button-2"
        onClick={handlePopoverToggled}
        aria-expanded={popoverOpen}
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="bi bi-three-dots-vertical"
          viewBox="0 0 16 16"
        >
          <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
        </svg>
      </IcButton>
      <IcPopoverMenu
        anchor="button-2"
        aria-label="popover"
        open={popoverOpen}
        onIcPopoverClosed={handlePopoverClosed}
      >
        <IcMenuItem label="Copy" disabled />
        <IcMenuItem label="Paste" keyboardShortcut="Cmd + V" />
        <IcMenuItem
          label="Edit"
          description="This is used to edit the original."
        />
        <IcMenuItem label="Show/Hide" variant="toggle" />
        <IcMenuItem label="Find icons">
          <svg
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            height="24"
            viewBox="0 0 24 24"
            width="24"
          >
            <path d="M0 0h24v24H0V0z" fill="none" />
            <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
          </svg>
        </IcMenuItem>
        <IcMenuItem label="Delete" disabled variant="destructive" />
        <IcMenuItem label="Log out" variant="destructive" />
      </IcPopoverMenu>
    </>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
  snippets={snippetsButtons}
>
  <ButtonsPopover />
</ComponentPreview>

### With menu groups

export const snippetsGroups = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button 
  id="button-3" 
  variant="icon"
  title="More information" 
  onclick="handleClick()"
  aria-expanded="false"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    class="bi bi-three-dots-vertical"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </svg>
</ic-button>
<div>
  <ic-popover-menu anchor="button-3" aria-label="popover" id="popover-menu-3">
    <ic-menu-group label="Edit options">
      <ic-menu-item label="Copy" disabled="true"></ic-menu-item>
      <ic-menu-item label="Paste" keyboard-shortcut="Cmd + V"></ic-menu-item>
    </ic-menu-group>
    <ic-menu-group>
      <ic-menu-item label="Format"></ic-menu-item>
      <ic-menu-item label="Help"></ic-menu-item>
    </ic-menu-group>
  </ic-popover-menu>
</div>`,
      long: `{shortCode}
<script>
  var icPopover = document.querySelector("#popover-menu-3");
  var anchorButton = document.querySelector("#button-3");
  function handleClick() {
    icPopover.open = !icPopover.open;
    anchorButton.setAttribute('aria-expanded', icPopover.open);
  }
  icPopover.addEventListener('icPopoverClosed', handleClose);
  function handleClose() {
    anchorButton.setAttribute('aria-expanded', 'false');
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton
  variant="icon"
  title="More information"
  id="button-3"
  onClick={handlePopoverToggled}
  aria-expanded={popoverOpen}
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    class="bi bi-three-dots-vertical"
    viewBox="0 0 16 16"
  >
    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
  </SlottedSVG>
</IcButton>
<IcPopoverMenu anchor="button-3" aria-label="popover" open={popoverOpen} onIcPopoverClosed={handlePopoverClosed}>
  <IcMenuGroup label="Edit options">
    <IcMenuItem label="Copy" disabled />
    <IcMenuItem label="Paste" keyboardShortcut="Cmd + V" />
  </IcMenuGroup>
  <IcMenuGroup>
    <IcMenuItem label="Format" />
    <IcMenuItem label="Help" />
  </IcMenuGroup>
</IcPopoverMenu>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState<boolean>(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
        {
          language: "Javascript",
          snippet: `const [popoverOpen, setPopoverOpen] = useState(false);
const handlePopoverToggled = () => setPopoverOpen(value => !value);
const handlePopoverClosed = () => setPopoverOpen(false);
return (
  <>
    {shortCode}
  </>
);`,
        },
      ],
    },
  },
];

export const GroupsPopover = () => {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const handlePopoverToggled = () => setPopoverOpen((value) => !value);
  const handlePopoverClosed = () => setPopoverOpen(false);
  return (
    <>
      <IcButton
        variant="icon"
        title="More information"
        id="button-3"
        onClick={handlePopoverToggled}
        aria-expanded={popoverOpen}
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="bi bi-three-dots-vertical"
          viewBox="0 0 16 16"
        >
          <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
        </svg>
      </IcButton>
      <IcPopoverMenu
        anchor="button-3"
        aria-label="popover"
        open={popoverOpen}
        onIcPopoverClosed={handlePopoverClosed}
      >
        <IcMenuGroup label="Edit options">
          <IcMenuItem label="Copy" disabled />
          <IcMenuItem label="Paste" keyboardShortcut="Cmd + V" />
        </IcMenuGroup>
        <IcMenuGroup>
          <IcMenuItem label="Format" />
          <IcMenuItem label="Help" />
        </IcMenuGroup>
      </IcPopoverMenu>
    </>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
  snippets={snippetsGroups}
>
  <GroupsPopover />
</ComponentPreview>

---

# Radio button

URL: https://design.sis.gov.uk/components/radio/code
Status: BETA
Subtitle: Radio buttons let people select a single option from a list.


import { IcRadioGroup, IcRadioOption, IcTextField } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-radio-group
  name="radio-group-1"
  label="Add a free purchase with any hot drink"
>
  <ic-radio-option value="crisps" label="Crisps"></ic-radio-option>
  <ic-radio-option
    value="cookie"
    label="Deluxe chocolate chip cookie (sold out)"
    disabled="true"
  >
  </ic-radio-option>
  <ic-radio-option value="fruit" label="Banana"></ic-radio-option>
  <ic-radio-option
    value="No item"
    label="No thanks, just my coffee"
  ></ic-radio-option>
</ic-radio-group>`,
      long: `{shortCode}   
<script>
  const radioGroup = document.querySelector("[name='radio-group-1']");
  radioGroup.addEventListener('icChange', (ev) => console.log(ev.detail.value));
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcRadioGroup name='radio-group-1' label="Add a free purchase with any hot drink" onIcChange={(ev) => console.log(ev.detail.value)}>
  <IcRadioOption value="crisps" label="Crisps" />
  <IcRadioOption
    value="cookie"
    label="Deluxe chocolate chip cookie (sold out)"
    disabled
  />
  <IcRadioOption value="fruit" label="Banana" />
  <IcRadioOption value="No item" label="No thanks, just my coffee" />
</IcRadioGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ marginTop: "1.5rem" }} snippets={snippets}>
  <IcRadioGroup
    name="radio-group-1"
    label="Add a free purchase with any hot drink"
    onIcChange={(ev) => console.log(ev.detail.value)}
  >
    <IcRadioOption value="crisps" label="Crisps" />
    <IcRadioOption
      value="cookie"
      label="Deluxe chocolate chip cookie (sold out)"
      disabled
    />
    <IcRadioOption value="fruit" label="Banana" />
    <IcRadioOption value="No item" label="No thanks, just my coffee" />
  </IcRadioGroup>
</ComponentPreview>

## Radio group details

{
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the radio group to be displayed.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name for the radio group to differentiate from other groups.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "complexType": {
        "original": "IcOrientation",
        "resolved": "\"horizontal\" | \"vertical\"",
        "references": {
          "IcOrientation": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcOrientation"
          }
        }
      },
      "mutable": false,
      "attr": "orientation",
      "reflectToAttr": false,
      "docs": "The orientation of the radio buttons in the radio group. If there are more than two radio buttons in a radio group or either of the radio buttons use the `additional-field` slot, then the orientation will always be vertical.",
      "docsTags": [],
      "default": "\"vertical\"",
      "values": [
        {
          "value": "horizontal",
          "type": "string"
        },
        {
          "value": "vertical",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the radio group will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the radio group component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": false,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation status - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The validation text - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [
    {
      "event": "icChange",
      "detail": "IcChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcChangeEventDetail",
        "resolved": "IcChangeEventDetail",
        "references": {
          "IcChangeEventDetail": {
            "location": "import",
            "path": "./ic-radio-group.types",
            "id": "src/components/ic-radio-group/ic-radio-group.types.ts::IcChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a user selects a radio.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "icCheck",
      "capture": false,
      "passive": false
    },
    {
      "event": "icSelectedChange",
      "capture": false,
      "passive": false
    }
  ]
}


## Radio option details

{
  "props": [
    {
      "name": "additionalFieldDisplay",
      "type": "\"dynamic\" | \"static\"",
      "complexType": {
        "original": "IcAdditionalFieldTypes",
        "resolved": "\"dynamic\" | \"static\"",
        "references": {
          "IcAdditionalFieldTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAdditionalFieldTypes"
          }
        }
      },
      "mutable": false,
      "attr": "additional-field-display",
      "reflectToAttr": true,
      "docs": "The style of additionalField that will be displayed if used.",
      "docsTags": [],
      "default": "\"static\"",
      "values": [
        {
          "value": "dynamic",
          "type": "string"
        },
        {
          "value": "static",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dynamicText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "dynamic-text",
      "reflectToAttr": false,
      "docs": "The text to be displayed when dynamic.",
      "docsTags": [],
      "default": "\"This selection requires additional answers\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "form",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "form",
      "reflectToAttr": false,
      "docs": "The <form> element to associate the radio with.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formaction",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formaction",
      "reflectToAttr": false,
      "docs": "The URL that processes the information submitted by the radio. It overrides the action attribute of the radio's form owner. Does nothing if there is no form owner.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formenctype",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formenctype",
      "reflectToAttr": false,
      "docs": "The way the submitted form data is encoded.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formmethod",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formmethod",
      "reflectToAttr": false,
      "docs": "The HTTP method used to submit the form.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formnovalidate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "formnovalidate",
      "reflectToAttr": false,
      "docs": "If `true`, the form will not be validated when submitted.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "formtarget",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "formtarget",
      "reflectToAttr": false,
      "docs": "The place to display the response from submitting the form. It overrides the target attribute of the radio's form owner.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "groupLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "group-label",
      "reflectToAttr": false,
      "docs": "The group label for the radio option.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the radio option.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name for the radio option.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "selected",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "selected",
      "reflectToAttr": true,
      "docs": "If `true`, the radio option will be displayed in a selected state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value for the radio option.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    }
  ],
  "slots": [
    {
      "name": "additional-field",
      "docs": "Content to displayed alongside a radio option."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "icCheck",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the radio option is selected.",
      "docsTags": []
    },
    {
      "event": "icSelectedChange",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the radio option is selected or deselected.",
      "docsTags": []
    },
    {
      "event": "radioOptionSelect",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icCheck instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icCheck instead."
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the radio option.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "icCheck",
      "capture": false,
      "passive": false
    },
    {
      "event": "icChange",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Conditional

export const conditional = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-radio-group
  name="radio-group-2"
  label="Do you have any special requests?"
>
  <ic-radio-option value="request" label="Yes, I want to modify my order">
    <ic-text-field
      slot="additional-field"
      label="Please provide some additional information"
      placeholder="i.e Soya milk please"
    >
    </ic-text-field>
  </ic-radio-option>
  <ic-radio-option
    value="none"
    label="No, standard please"
  ></ic-radio-option>
</ic-radio-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcRadioGroup
label="Do you have any special requests?"
name="radio-group-2"
>
  <IcRadioOption value="request" label="Yes, I want to modify my order">
    <IcTextField
      slot="additional-field"
      label="Please provide some additional information"
      placeholder="i.e Soya milk please"
    />
  </IcRadioOption>
  <IcRadioOption 
    value="none" 
    label="No, standard please" 
  />
</IcRadioGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ marginTop: "1.5rem" }} snippets={conditional}>
  <IcRadioGroup name="radio-group-2" label="Do you have any special requests?">
    <IcRadioOption value="request" label="Yes, I want to modify my order">
      <IcTextField
        slot="additional-field"
        label="Please provide some additional information"
        placeholder="i.e Soya milk please"
      />
    </IcRadioOption>
    <IcRadioOption value="none" label="No, standard please" />
  </IcRadioGroup>
</ComponentPreview>

### Conditional dynamic

export const conditionalDynamic = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-radio-group
  name="radio-group-3"
  label="Do you have any special requests?"
>
  <ic-radio-option 
    value="request" 
    label="Yes, I want to modify my order"
    additional-field-display="dynamic"
  >
    <ic-text-field
      slot="additional-field"
      label="Please provide some additional information"
      placeholder="i.e Soya milk please"
    >
    </ic-text-field>
  </ic-radio-option>
  <ic-radio-option
    value="none"
    label="No, standard please"
  ></ic-radio-option>
</ic-radio-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcRadioGroup
  name="radio-group-3"
  label="Do you have any special requests?"
>
  <IcRadioOption 
    value="request" 
    label="Yes, I want to modify my order" 
    additionalFieldDisplay="dynamic"
  >
    <IcTextField
      slot="additional-field"
      label="Please provide some additional information"
      placeholder="i.e Soya milk please"
    />
  </IcRadioOption>
  <IcRadioOption value="none" label="No, standard please" />
</IcRadioGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={conditionalDynamic}>
  <div style={{ width: "18.75rem" }}>
    <IcRadioGroup
      name="radio-group-3"
      label="Do you have any special requests?"
    >
      <IcRadioOption
        additionalFieldDisplay="dynamic"
        value="request"
        label="Yes, I want to modify my order"
      >
        <IcTextField
          slot="additional-field"
          label="Please provide some additional information"
          placeholder="i.e Soya milk please"
        />
      </IcRadioOption>
      <IcRadioOption value="none" label="No, standard please" />
    </IcRadioGroup>
  </div>
</ComponentPreview>

### With helper text

export const withHelperText = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-radio-group
  label="Do you have any special requests?"
  helper-text="Let us know if you'd like an alternative to dairy milk."
  name="radio-group-4"
>
  <ic-radio-option
    value="request"
    label="Yes, I want to modify my order"
  ></ic-radio-option>
  <ic-radio-option
    value="none"
    label="No, standard please"
  ></ic-radio-option>
</ic-radio-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcRadioGroup 
  label="Do you have any special requests?" 
  helperText="Let us know if you'd like an alternative to dairy milk."
  name='radio-group-4'
>
  <IcRadioOption value="request" label="Yes, I want to modify my order" />
  <IcRadioOption value="none" label="No, standard please" />
</IcRadioGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ marginTop: "1.5rem" }} snippets={withHelperText}>
  <IcRadioGroup
    label="Do you have any special requests?"
    helperText="Let us know if you'd like an alternative to dairy milk."
    name="radio-group-4"
  >
    <IcRadioOption value="request" label="Yes, I want to modify my order" />
    <IcRadioOption value="none" label="No, standard please" />
  </IcRadioGroup>
</ComponentPreview>

### Size small

export const smallSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-radio-group
  label="Do you have any special requests?"
  name="radio-group-5"
  size="small"
>
  <ic-radio-option
    value="request"
    label="Yes, I want to modify my order"
  ></ic-radio-option>
  <ic-radio-option
    value="none"
    label="No, standard please"
  ></ic-radio-option>
</ic-radio-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcRadioGroup
  label="Do you have any special requests?"
  name="radio-group-5"
  size="small"
>
  <IcRadioOption value="request" label="Yes, I want to modify my order" />
  <IcRadioOption value="none" label="No, standard please" />
</IcRadioGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ marginTop: "1.5rem" }} snippets={smallSnippet}>
  <IcRadioGroup
    label="Do you have any special requests?"
    name="radio-group-5"
    size="small"
  >
    <IcRadioOption value="request" label="Yes, I want to modify my order" />
    <IcRadioOption value="none" label="No, standard please" />
  </IcRadioGroup>
</ComponentPreview>

### With validation

export const withValidation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-radio-group
  name="radio-group-6"
  label="Do you have any special requests?"
  validation-status="error"
  validation-text="An answer to this question is required"
  required="true"
>
  <ic-radio-option
    value="request"
    label="Yes, I want to modify my order"
  ></ic-radio-option>
  <ic-radio-option
    value="none"
    label="No, standard please"
  ></ic-radio-option>
</ic-radio-group>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcRadioGroup
  name="radio-group-6"
  label="Do you have any special requests?"
  validationStatus="error"
  validationText="An answer to this question is required"
  required
>
  <IcRadioOption value="request" label="Yes, I want to modify my order" />
  <IcRadioOption value="none" label="No, standard please" />
</IcRadioGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ marginTop: "1.5rem" }} snippets={withValidation}>
  <IcRadioGroup
    label="Do you have any special requests?"
    validationStatus="error"
    validationText="An answer to this question is required"
    required
    name="radio-group-6"
  >
    <IcRadioOption value="request" label="Yes, I want to modify my order" />
    <IcRadioOption value="none" label="No, standard please" />
  </IcRadioGroup>
</ComponentPreview>

---

# Search bar

URL: https://design.sis.gov.uk/components/search-bar/code
Status: BETA
Subtitle: The search bar allows users to search for information using keywords or phrases.


import { IcSearchBar, IcTypography } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar label="What is your favourite coffee?"></ic-search-bar>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>    
  <script>
    const searchBar = document.querySelector("ic-search-bar");
    searchBar.options = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
    searchBar.addEventListener('icChange', (ev) => console.log(ev.detail.value));
    searchBar.addEventListener('icSubmitSearch', (ev) => console.log(ev.detail.value))
    placeholder="Start typing to search…"
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar 
  label="What is your favourite coffee?"
  options={options}
  onIcChange={(ev) => console.log(ev.detail.value)}
  onIcSubmitSearch={(ev) => console.log(ev.detail.value)}
  placeholder="Start typing to search…"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcSearchBar
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
    onIcChange={(ev) => console.log("onIcChange", ev.detail.value)}
    onIcSubmitSearch={(ev) => console.log("onIcSubmitSearch", ev.detail.value)}
    placeholder="Start typing to search…"
  />
</ComponentPreview>

## Search bar details

{
  "props": [
    {
      "name": "autocapitalize",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "autocapitalize",
      "reflectToAttr": false,
      "docs": "The automatic capitalisation of the text value as it is entered/edited by the user.\nAvailable options: \"off\", \"none\", \"on\", \"sentences\", \"words\", \"characters\".",
      "docsTags": [],
      "default": "\"off\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocomplete",
      "type": "\"name\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\"",
      "complexType": {
        "original": "IcAutocompleteTypes",
        "resolved": "\"name\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\"",
        "references": {
          "IcAutocompleteTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAutocompleteTypes"
          }
        }
      },
      "mutable": false,
      "attr": "autocomplete",
      "reflectToAttr": false,
      "docs": "The state of autocompletion the browser can apply on the text value.",
      "docsTags": [],
      "default": "\"off\"",
      "values": [
        {
          "value": "name",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        },
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "honorific-prefix",
          "type": "string"
        },
        {
          "value": "given-name",
          "type": "string"
        },
        {
          "value": "additional-name",
          "type": "string"
        },
        {
          "value": "family-name",
          "type": "string"
        },
        {
          "value": "honorific-suffix",
          "type": "string"
        },
        {
          "value": "nickname",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "username",
          "type": "string"
        },
        {
          "value": "new-password",
          "type": "string"
        },
        {
          "value": "current-password",
          "type": "string"
        },
        {
          "value": "one-time-code",
          "type": "string"
        },
        {
          "value": "organization-title",
          "type": "string"
        },
        {
          "value": "organization",
          "type": "string"
        },
        {
          "value": "street-address",
          "type": "string"
        },
        {
          "value": "address-line1",
          "type": "string"
        },
        {
          "value": "address-line2",
          "type": "string"
        },
        {
          "value": "address-line3",
          "type": "string"
        },
        {
          "value": "address-level4",
          "type": "string"
        },
        {
          "value": "address-level3",
          "type": "string"
        },
        {
          "value": "address-level2",
          "type": "string"
        },
        {
          "value": "address-level1",
          "type": "string"
        },
        {
          "value": "country",
          "type": "string"
        },
        {
          "value": "country-name",
          "type": "string"
        },
        {
          "value": "postal-code",
          "type": "string"
        },
        {
          "value": "cc-name",
          "type": "string"
        },
        {
          "value": "cc-given-name",
          "type": "string"
        },
        {
          "value": "cc-additional-name",
          "type": "string"
        },
        {
          "value": "cc-family-name",
          "type": "string"
        },
        {
          "value": "cc-number",
          "type": "string"
        },
        {
          "value": "cc-exp",
          "type": "string"
        },
        {
          "value": "cc-exp-month",
          "type": "string"
        },
        {
          "value": "cc-exp-year",
          "type": "string"
        },
        {
          "value": "cc-csc",
          "type": "string"
        },
        {
          "value": "cc-type",
          "type": "string"
        },
        {
          "value": "transaction-currency",
          "type": "string"
        },
        {
          "value": "transaction-amount",
          "type": "string"
        },
        {
          "value": "language",
          "type": "string"
        },
        {
          "value": "bday",
          "type": "string"
        },
        {
          "value": "bday-day",
          "type": "string"
        },
        {
          "value": "bday-month",
          "type": "string"
        },
        {
          "value": "bday-year",
          "type": "string"
        },
        {
          "value": "sex",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "tel-country-code",
          "type": "string"
        },
        {
          "value": "tel-national",
          "type": "string"
        },
        {
          "value": "tel-area-code",
          "type": "string"
        },
        {
          "value": "tel-local",
          "type": "string"
        },
        {
          "value": "tel-extension",
          "type": "string"
        },
        {
          "value": "impp",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "value": "photo",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "autocorrect",
      "type": "\"off\" | \"on\"",
      "complexType": {
        "original": "IcAutocorrectStates",
        "resolved": "\"off\" | \"on\"",
        "references": {
          "IcAutocorrectStates": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAutocorrectStates"
          }
        }
      },
      "mutable": false,
      "attr": "autocorrect",
      "reflectToAttr": false,
      "docs": "The state of autocorrection the browser can apply when the user is entering/editing the text value.",
      "docsTags": [],
      "default": "\"off\"",
      "values": [
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "autofocus",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "autofocus",
      "reflectToAttr": false,
      "docs": "If `true`, the form control will have input focus when the page loads.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "charactersUntilSuggestion",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "characters-until-suggestion",
      "reflectToAttr": false,
      "docs": "The number of characters until suggestions appear. The submit button will be disabled until the inputted value is equal to or greater than this number.",
      "docsTags": [],
      "default": "2",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableFilter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-filter",
      "reflectToAttr": false,
      "docs": "Specify whether to disable the built in filtering. For example, if options will already be filtered from external source.\nIf `true`, all options provided will be displayed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "emptyOptionListText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "empty-option-list-text",
      "reflectToAttr": false,
      "docs": "The text displayed when there are no options in the option list.",
      "docsTags": [],
      "default": "\"No results found\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "focusOnLoad",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "focus-on-load",
      "reflectToAttr": false,
      "docs": "If `true`, the search bar will be focused when component loaded.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "Specify whether the search bar fills the full width of the container.\nIf `true`, this overrides the --input-width CSS variable.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hintText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "hint-text",
      "reflectToAttr": false,
      "docs": "The hint text for the hidden assistive description element.",
      "docsTags": [],
      "default": "\"When autocomplete results are available use the up and down arrows to choose and press enter to select\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the search bar.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "labelField",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label-field",
      "reflectToAttr": false,
      "docs": "The custom name for the label field to correspond with the IcMenuOption type.",
      "docsTags": [],
      "default": "\"label\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "Trigger loading state when fetching options asynchronously",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingErrorLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "loading-error-label",
      "reflectToAttr": false,
      "docs": "Change the message displayed when external loading times out.",
      "docsTags": [],
      "default": "\"Loading Error\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loadingLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "loading-label",
      "reflectToAttr": false,
      "docs": "Change the message displayed whilst the options are being loaded externally.",
      "docsTags": [],
      "default": "\"Loading...\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "options",
      "type": "IcMenuOption[]",
      "complexType": {
        "original": "IcMenuOption[]",
        "resolved": "IcMenuOption[]",
        "references": {
          "IcMenuOption": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcMenuOption"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The suggested search options.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "IcMenuOption[]"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "The placeholder value to display.",
      "docsTags": [],
      "default": "\"Search\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": false,
      "docs": "If `true`, the readonly state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the search bar will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "searchMode",
      "type": "\"navigation\" | \"query\"",
      "complexType": {
        "original": "IcSearchBarSearchModes",
        "resolved": "\"navigation\" | \"query\"",
        "references": {
          "IcSearchBarSearchModes": {
            "location": "import",
            "path": "./ic-search-bar.types",
            "id": "src/components/ic-search-bar/ic-search-bar.types.ts::IcSearchBarSearchModes"
          }
        }
      },
      "mutable": false,
      "attr": "search-mode",
      "reflectToAttr": false,
      "docs": "Specify the mode search bar uses to search. `navigation` allows for quick lookups of a set of values, `query` allows for more general searches.",
      "docsTags": [],
      "default": "\"navigation\"",
      "values": [
        {
          "value": "navigation",
          "type": "string"
        },
        {
          "value": "query",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the search bar component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "spellcheck",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "spellcheck",
      "reflectToAttr": false,
      "docs": "If `true`, the value of the search will have its spelling and grammar checked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "timeout",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "timeout",
      "reflectToAttr": false,
      "docs": "If using external filtering, set a timeout for when loading takes too long.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": true,
      "docs": "The value of the search input.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "valueField",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "value-field",
      "reflectToAttr": false,
      "docs": "The custom name for the value field to correspond with the IcMenuOption type.",
      "docsTags": [],
      "default": "\"value\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-menu",
      "annotation": "prop",
      "docs": "z-index of search bar menu"
    }
  ],
  "events": [
    {
      "event": "icChange",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value has changed.",
      "docsTags": []
    },
    {
      "event": "icClear",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when value is cleared with clear button",
      "docsTags": []
    },
    {
      "event": "icInput",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a keyboard input occurred.",
      "docsTags": []
    },
    {
      "event": "icInputBlur",
      "detail": "IcSearchBarBlurEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcSearchBarBlurEventDetail",
        "resolved": "IcSearchBarBlurEventDetail",
        "references": {
          "IcSearchBarBlurEventDetail": {
            "location": "import",
            "path": "./ic-search-bar.types",
            "id": "src/components/ic-search-bar/ic-search-bar.types.ts::IcSearchBarBlurEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icSearchBarBlur instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icSearchBarBlur instead."
    },
    {
      "event": "icInputFocus",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icSearchBarFocus instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icSearchBarFocus instead."
    },
    {
      "event": "icMenuChange",
      "detail": "IcMenuChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcMenuChangeEventDetail",
        "resolved": "IcMenuChangeEventDetail",
        "references": {
          "IcMenuChangeEventDetail": {
            "location": "import",
            "path": "../ic-menu/ic-menu.types",
            "id": "src/components/ic-menu/ic-menu.types.ts::IcMenuChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the state of the menu changes (i.e. open or close)",
      "docsTags": []
    },
    {
      "event": "icOptionSelect",
      "detail": "IcOptionSelectEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcOptionSelectEventDetail",
        "resolved": "IcOptionSelectEventDetail",
        "references": {
          "IcOptionSelectEventDetail": {
            "location": "import",
            "path": "../ic-menu/ic-menu.types",
            "id": "src/components/ic-menu/ic-menu.types.ts::IcOptionSelectEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when option is highlighted within the menu",
      "docsTags": []
    },
    {
      "event": "icRetryLoad",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the 'retry loading' button is clicked",
      "docsTags": []
    },
    {
      "event": "icSearchBarBlur",
      "detail": "IcSearchBarBlurEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcSearchBarBlurEventDetail",
        "resolved": "IcSearchBarBlurEventDetail",
        "references": {
          "IcSearchBarBlurEventDetail": {
            "location": "import",
            "path": "./ic-search-bar.types",
            "id": "src/components/ic-search-bar/ic-search-bar.types.ts::IcSearchBarBlurEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when blur is invoked from ic-search-bar",
      "docsTags": []
    },
    {
      "event": "icSearchBarFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when focus is invoked from ic-search-bar",
      "docsTags": []
    },
    {
      "event": "icSubmitSearch",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the search value has been submitted",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `input`.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "icKeydown",
      "capture": false,
      "passive": false
    },
    {
      "event": "keyup",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### With options (no filtering)

export const optionsNoFiltering = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  disable-filter="true"
></ic-search-bar>
<br>
<ic-typography>
  <p>All options will be displayed as you type</p>
</ic-typography>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    document.querySelector("ic-search-bar").options = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  disableFilter
  options={options}
/>
<br/>
<IcTypography>
  <p>All options will be displayed as you type</p>
</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={optionsNoFiltering}
  style={{ flexDirection: "column", alignItems: "center" }}
>
  <IcSearchBar
    placeholder="Start typing to search…"
    label="What is your favourite coffee?"
    disableFilter
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
  <br />
  <IcTypography>All options will be displayed as you type</IcTypography>
</ComponentPreview>

### With helper text

export const withHelperText = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  helper-text="Coffee options will be displayed as you type."
></ic-search-bar>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    document.querySelector("ic-search-bar").options = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  helperText="Coffee options will be displayed as you type."
  options={options}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withHelperText}>
  <IcSearchBar
    placeholder="Start typing to search…"
    label="What is your favourite coffee?"
    helperText="Coffee options will be displayed as you type."
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
</ComponentPreview>

### With hidden label

export const withHiddenLabel = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  hide-label="true"
></ic-search-bar>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const searchBar = document.querySelector("ic-search-bar");
    searchBar.options = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  hideLabel
  options={options}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withHiddenLabel}>
  <IcSearchBar
    placeholder="Start typing to search…"
    label="What is your favourite coffee?"
    hideLabel
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
</ComponentPreview>

### Disabled

export const disabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar
  label="What is your favourite coffee?"
  disabled="true"
></ic-search-bar>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const searchBar = document.querySelector("ic-search-bar");
    searchBar.options = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar
  label="What is your favourite coffee?"
  disabled
  options={options}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disabled}>
  <IcSearchBar
    label="What is your favourite coffee?"
    disabled
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
</ComponentPreview>

### Size small

export const sizeSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar
  label="What is your favourite coffee?"
  size="small"
></ic-search-bar>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const searchBar = document.querySelector("ic-search-bar");
    searchBar.options = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar
  label="What is your favourite coffee?"
  size="small"
  options={options}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const options = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappuccino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={sizeSmall}>
  <IcSearchBar
    label="What is your favourite coffee?"
    size="small"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
</ComponentPreview>

## Custom filtering example

This example shows how to filter data asynchronously when the value in the input field changes. The data is mocked and displayed after a one second delay, but could be replaced with a call to an API or database.

export const customFiltering = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-search-bar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?" 
  debounce="300" 
  disable-filter="true"
></ic-search-bar>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    var mockData = [
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappucino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ];
    var select = document.querySelector("ic-search-bar");
    select.addEventListener("icChange", function (event) {
      const searchFor = event.detail.value;
      if (searchFor.length > 1) {
        mockAPI = (query) => {
          filteredResults = mockData.filter((item) =>
            item.label.toLowerCase().includes(query.toLowerCase())
          );
          return new Promise((resolve) => {
            setTimeout(() => resolve(filteredResults), 1000)
          });
        };
        mockAPI(searchFor).then((newResults) => { select.options = newResults });
      } else {
        select.options = [];
      }
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSearchBar
  placeholder="Start typing to search…"
  label="What is your favourite coffee?"
  debounce={300}
  disableFilter
  options={results}
  onIcChange={changeHandler}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const mockData = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappucino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const [results, setResults] = useState<IcMenuOption[]>([]);
const changeHandler = (event: { detail: { value: string; }; }) => {
  const searchFor = event.detail.value;
  if (searchFor.length > 1) {
    const mockAPI = (query: string) => {
        const filteredResults = mockData.filter((item) =>
            item.label.toLowerCase().includes(query.toLowerCase()),
        );
        return new Promise<IcMenuOption[]>((resolve) => {
            setTimeout(() => resolve(filteredResults), 1000);
        });
    };
    mockAPI(searchFor).then((newResults: IcMenuOption[]) => setResults(newResults));
  } else {
    setResults([]);
  }
};
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const mockData = [
  { label: "Espresso", value: "espresso" },
  { label: "Double Espresso", value: "doubleespresso" },
  { label: "Flat White", value: "flatwhite" },
  { label: "Cappuccino", value: "cappucino" },
  { label: "Americano", value: "americano" },
  { label: "Mocha", value: "mocha" },
];
const [results, setResults] = useState([]);
const changeHandler = (event) =>{
  const searchFor = event.detail.value;
  if (searchFor.length > 1) {
    const mockAPI = (query) => {
      const filteredResults = mockData.filter((item) =>
        item.label.toLowerCase().includes(query.toLowerCase())
      );
      return new Promise((resolve) => {
        setTimeout(() => resolve(filteredResults), 1000);
      });
    };
    mockAPI(searchFor).then((newResults) => setResults(newResults));
  } else {
    setResults([]);
  }
}
const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

export const CustomFilterExample = () => {
  const mockData = [
    { label: "Espresso", value: "espresso" },
    { label: "Double Espresso", value: "doubleespresso" },
    { label: "Flat White", value: "flatwhite" },
    { label: "Cappuccino", value: "cappucino" },
    { label: "Americano", value: "americano" },
    { label: "Mocha", value: "mocha" },
  ];
  const [results, setResults] = React.useState([]);
  const changeHandler = (event) => {
    const searchFor = event.detail.value;
    if (searchFor.length > 1) {
      const mockAPI = (query) => {
        const filteredResults = mockData.filter((item) =>
          item.label.toLowerCase().includes(query.toLowerCase())
        );
        return new Promise((resolve) => {
          setTimeout(() => resolve(filteredResults), 1000);
        });
      };
      mockAPI(searchFor).then((newResults) => setResults(newResults));
    } else {
      setResults([]);
    }
  };
  return (
    <IcSearchBar
      placeholder="Start typing to search…"
      label="What is your favourite coffee?"
      debounce="300"
      disableFilter
      options={results}
      onIcChange={changeHandler}
    />
  );
};

<ComponentPreview snippets={customFiltering}>
  <CustomFilterExample />
</ComponentPreview>

---

# Section container

URL: https://design.sis.gov.uk/components/section-container/code
Status: BETA
Subtitle: Use the section container component to consistently align content within an app.


import { IcChip, IcSectionContainer } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-section-container>
  <div class="content-container">
    <ic-chip label="Americano"></ic-chip>
    <ic-chip label="Cappuccino"></ic-chip>
    <ic-chip label="Latte"></ic-chip>
  </div>
</ic-section-container>`,
      long: `ic-section-container {
    border: 0.0625rem solid black;
    margin: var(--ic-space-xxs);
  }
  .content-container {
    display: flex;
    justify-content: space-between;
    padding: var(--ic-space-xs);
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSectionContainer className={classes.sectionContainer}>
  <div className={classes.contentContainer}>
    <IcChip label="Americano"/>
    <IcChip label="Cappuccino"/>
    <IcChip label="Latte"/>
  </div>
</IcSectionContainer>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault} style={{ display: "contents" }}>
  <IcSectionContainer style={{ border: "0.0625rem solid black" }}>
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
</ComponentPreview>

## Section container details

{
  "props": [
    {
      "name": "aligned",
      "type": "\"center\" | \"full-width\" | \"left\"",
      "complexType": {
        "original": "IcAlignment",
        "resolved": "\"center\" | \"full-width\" | \"left\"",
        "references": {
          "IcAlignment": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the container.",
      "docsTags": [],
      "default": "\"left\"",
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "full-width",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullHeight",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-height",
      "reflectToAttr": false,
      "docs": "If `true`, the standard vertical padding from the container will be removed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Center align

export const snippetsCenter = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-section-container aligned="center">
  <div class="content-container">
    <ic-chip label="Americano"></ic-chip>
    <ic-chip label="Cappuccino"></ic-chip>
    <ic-chip label="Latte"></ic-chip>
  </div>
</ic-section-container>`,
      long: `ic-section-container {
    border: 0.0625rem solid black;
    margin: var(--ic-space-xxs);
    width: 60%;
  }
  .content-container {
    display: flex;
    justify-content: space-between;
    padding: var(--ic-space-xs);
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSectionContainer 
  aligned="center"
  className={classes.sectionContainer}
>
  <div className={classes.contentContainer}>
    <IcChip label="Americano"/>
    <IcChip label="Cappuccino"/>
    <IcChip label="Latte"/>
  </div>
</IcSectionContainer>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCenter}>
  <IcSectionContainer
    aligned="center"
    style={{ border: "0.0625rem solid black" }}
  >
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
</ComponentPreview>

### Full-width align

export const snippetsFullWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-section-container aligned="full-width">
  <div class="content-container">
    <ic-chip label="Americano"></ic-chip>
    <ic-chip label="Cappuccino"></ic-chip>
    <ic-chip label="Latte"></ic-chip>
  </div>
</ic-section-container>`,
      long: `ic-section-container {
    border: 0.0625rem solid black;
    margin: var(--ic-space-xxs);
    width: 60%;
  }
  .content-container {
    display: flex;
    justify-content: space-between;
    padding: var(--ic-space-xs);
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSectionContainer 
  aligned="full-width"
  className={classes.sectionContainer}
>
  <div className={classes.contentContainer}>
      <IcChip label="Americano"/>
      <IcChip label="Cappuccino"/>
      <IcChip label="Latte"/>
  </div>
</IcSectionContainer>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsFullWidth} style={{ display: "block" }}>
  <IcSectionContainer
    style={{ border: "0.0625rem solid black" }}
    aligned="full-width"
  >
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
</ComponentPreview>

### Full height

export const snippetsFullHeight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-section-container aligned="center" full-height="true">
  <div class="content-container">
    <ic-chip label="Americano"></ic-chip>
    <ic-chip label="Cappuccino"></ic-chip>
    <ic-chip label="Latte"></ic-chip>
  </div>
</ic-section-container>`,
      long: `ic-section-container {
    border: 0.0625rem solid black;
    margin: var(--ic-space-xxs);
    width: 60%;
  }
  .content-container {
    display: flex;
    justify-content: space-between;
    padding: var(--ic-space-xs);
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSectionContainer 
  aligned="center"
  fullHeight
>
  <div className={classes.contentContainer}>
    <IcChip label="Americano"/>
    <IcChip label="Cappuccino"/>
    <IcChip label="Latte"/>
  </div>
</IcSectionContainer>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  sectionContainer: {
    border: "0.0625rem solid black",
    margin: "var(--ic-space-xxs)",
  },
  contentContainer: {
    display: "flex",
    justifyContent: "space-between",
    padding: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsFullHeight}>
  <IcSectionContainer
    aligned="center"
    fullHeight
    style={{ border: "0.0625rem solid black" }}
  >
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "0.5rem",
      }}
    >
      <IcChip label="Americano" />
      <IcChip label="Cappuccino" />
      <IcChip label="Latte" />
    </div>
  </IcSectionContainer>
</ComponentPreview>

---

# Status tag

URL: https://design.sis.gov.uk/components/status-tag/code
Status: BETA
Subtitle: Status tags are short, clear and digestible ways to display the status of something on the page.


import { IcStatusTag } from "@ukic/react";

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-status-tag label="Neutral" status="neutral"></ic-status-tag>
<ic-status-tag label="Success" status="success"></ic-status-tag>
<ic-status-tag label="Warning" status="warning"></ic-status-tag>
<ic-status-tag label="Error" status="danger"></ic-status-tag>`,
      long: `.parent-container {
      display: flex;
      gap: var(--ic-space-xs);
      flex-wrap: wrap;
      padding: var(--ic-space-md);
    }
  </style>
  <body>
    <div class="parent-container">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStatusTag label="Neutral" status="neutral"/>
<IcStatusTag label="Success" status="success"/>
<IcStatusTag label="Warning" status="warning"/>
<IcStatusTag label="Error" status="danger"/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsDefault}>
  <IcStatusTag label="Neutral" status="neutral" />
  <IcStatusTag label="Success" status="success" />
  <IcStatusTag label="Warning" status="warning" />
  <IcStatusTag label="Error" status="danger" />
</ComponentPreview>

## Status tag details

{
  "props": [
    {
      "name": "announced",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "announced",
      "reflectToAttr": false,
      "docs": "If `true`, role='status' is added to the component and it will act as an 'aria-live' region.\nScreen readers will announce changes to the `label`, but not the initial value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"filled\" | \"outlined\"",
      "complexType": {
        "original": "IcStatusTagAppearance",
        "resolved": "\"filled\" | \"outlined\"",
        "references": {
          "IcStatusTagAppearance": {
            "location": "import",
            "path": "./ic-status-tag.types",
            "id": "src/components/ic-status-tag/ic-status-tag.types.ts::IcStatusTagAppearance"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Use variant prop instead."
        }
      ],
      "deprecation": "This prop should not be used anymore. Use variant prop instead.",
      "values": [
        {
          "value": "filled",
          "type": "string"
        },
        {
          "value": "outlined",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The content rendered within the status tag.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the status tag component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "status",
      "type": "\"danger\" | \"neutral\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcStatusTagStatuses",
        "resolved": "\"danger\" | \"neutral\" | \"success\" | \"warning\"",
        "references": {
          "IcStatusTagStatuses": {
            "location": "import",
            "path": "./ic-status-tag.types",
            "id": "src/components/ic-status-tag/ic-status-tag.types.ts::IcStatusTagStatuses"
          }
        }
      },
      "mutable": false,
      "attr": "status",
      "reflectToAttr": false,
      "docs": "The colour of the status tag.",
      "docsTags": [],
      "default": "\"neutral\"",
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "neutral",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"filled\" | \"outlined\"",
      "complexType": {
        "original": "IcEmphasisType",
        "resolved": "\"filled\" | \"outlined\"",
        "references": {
          "IcEmphasisType": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcEmphasisType"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The emphasis of the status tag.",
      "docsTags": [],
      "default": "\"filled\"",
      "values": [
        {
          "value": "filled",
          "type": "string"
        },
        {
          "value": "outlined",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Emphasis

export const snippetsEmphasis = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-status-tag
  label="Neutral"
  status="neutral"
  variant="outlined"
></ic-status-tag>
<ic-status-tag
  label="Success"
  status="success"
  variant="outlined"
></ic-status-tag>
<ic-status-tag
  label="Warning"
  status="warning"
  variant="outlined"
></ic-status-tag>
<ic-status-tag
  label="Error"
  status="danger"
  variant="outlined"
></ic-status-tag>`,
      long: `.parent-container {
      display: flex;
      gap: var(--ic-space-xs);
      flex-wrap: wrap;
      padding: var(--ic-space-md);
    }
  </style>
  <body>
    <div class="parent-container">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStatusTag label="Neutral" status="neutral" variant="outlined" />
<IcStatusTag label="Success" status="success" variant="outlined" />
<IcStatusTag label="Warning" status="warning" variant="outlined" />
<IcStatusTag label="Error" status="danger" variant="outlined" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsEmphasis}>
  <IcStatusTag label="Neutral" status="neutral" variant="outlined" />
  <IcStatusTag label="Success" status="success" variant="outlined" />
  <IcStatusTag label="Warning" status="warning" variant="outlined" />
  <IcStatusTag label="Error" status="danger" variant="outlined" />
</ComponentPreview>

### Sizes

export const snippetsSizes = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-status-tag
  label="Neutral"
  status="neutral"
  size="small"
></ic-status-tag>
<ic-status-tag
  label="Success"
  status="success"
  size="default"
></ic-status-tag>
<ic-status-tag
  label="Warning"
  status="warning"
  size="large"
></ic-status-tag>`,
      long: `.parent-container {
      display: flex;
      gap: var(--ic-space-xs);
      flex-wrap: wrap;
      padding: var(--ic-space-md);
    }
  </style>
  <body>
    <div class="parent-container">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStatusTag label="Neutral" status="neutral" size="small" />
<IcStatusTag label="Success" status="success" size="default" />
<IcStatusTag label="Warning" status="warning" size="large" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsSizes}>
  <IcStatusTag label="Neutral" status="neutral" size="small" />
  <IcStatusTag label="Success" status="success" />
  <IcStatusTag label="Warning" status="warning" size="large" />
</ComponentPreview>

---

# Skeleton

URL: https://design.sis.gov.uk/components/skeleton/code
Status: BETA
Subtitle: Skeleton loading states are representations of the shape of content that help inform users that a specific type of component is loading.


import {
  IcSkeleton,
  IcTypography,
  IcCard,
  IcButton,
  SlottedSVG,
} from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-skeleton variant="circle"></ic-skeleton>
<ic-typography variant="caption">
  <ic-skeleton variant="text"></ic-skeleton>
</ic-typography>
<ic-skeleton></ic-skeleton>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSkeleton variant="circle" />
<IcTypography variant="caption">
  <IcSkeleton variant="text" />
</IcTypography>
<IcSkeleton />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
    <IcSkeleton variant="circle" />
    <IcTypography variant="caption">
      <IcSkeleton variant="text" />
    </IcTypography>
    <IcSkeleton />
  </div>
</ComponentPreview>

## Skeleton details

{
  "props": [
    {
      "name": "appearance",
      "type": "\"default\" | \"light\"",
      "complexType": {
        "original": "\"light\" | \"default\"",
        "resolved": "\"default\" | \"light\"",
        "references": {}
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the skeleton.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "light",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "light",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `appearance` to \"light\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `appearance` to \"light\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"circle\" | \"rectangle\" | \"text\"",
      "complexType": {
        "original": "IcSkeletonVariants",
        "resolved": "\"circle\" | \"rectangle\" | \"text\"",
        "references": {
          "IcSkeletonVariants": {
            "location": "import",
            "path": "./ic-skeleton.types",
            "id": "src/components/ic-skeleton/ic-skeleton.types.ts::IcSkeletonVariants"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the skeleton that will be displayed.",
      "docsTags": [],
      "default": "\"rectangle\"",
      "values": [
        {
          "value": "circle",
          "type": "string"
        },
        {
          "value": "rectangle",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Inherited size from child

export const snippetsInherited = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-skeleton><div class="child">Test text</div></ic-skeleton>`,
      long: `.child {
    height: 12.5rem;
    width: 25.125rem;
  }
</style>
<body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSkeleton>
  <div className={classes.child}>Test text</div>
</IcSkeleton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  child: {
    height: "12.5rem",
    width: "25.125rem"
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  child: {
    height: "12.5rem",
    width: "25.125rem"
  },
});
const classes = useStyles();
return (
  {shortCode}
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsInherited}>
  <IcSkeleton style={{ maxWidth: "100%" }}>
    <div
      style={{
        height: "12.5rem",
        width: "25.125rem",
      }}
    >
      Test text
    </div>
  </IcSkeleton>
</ComponentPreview>

### Set width and height

CSS changes directly to `Skeleton` must be applied with inline styling.

export const snippetsSetWidthAndHeight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography variant="h4">
  <h4>Height and width set with styles</h4>
</ic-typography>
<ic-skeleton style="height: 12.5rem; width: 25.125rem"></ic-skeleton>
<ic-typography variant="h4">
  <h4>Height set with styles</h4>
</ic-typography>
<ic-skeleton style="height: 5rem"></ic-skeleton>
<ic-typography variant="h4">
  <h4>Width set with styles</h4>
</ic-typography>
<ic-skeleton style="width: 25.125rem"></ic-skeleton>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography variant="h4">
  <h4>Height and width set with styles</h4>
</IcTypography>
<IcSkeleton
  style={{
    height: "12.5rem",
    width: "12.5rem",
  }}
/>
<IcTypography variant="h4">
  <h4>Height set with styles</h4>
</IcTypography>
<IcSkeleton
  style={{
    height: "5rem",
  }}
/>
<IcTypography variant="h4">
  <h4>Width set with styles</h4>
</IcTypography>
<IcSkeleton
  style={{
    width: "25.125rem",
  }}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSetWidthAndHeight}>
  <div
    style={{
      display: "flex",
      flexDirection: "column",
      gap: "0.5rem",
      maxWidth: "100%",
    }}
  >
    <IcTypography variant="h4">
      <h4>Height and width set with styles</h4>
    </IcTypography>
    <IcSkeleton
      style={{
        height: "12.5rem",
        width: "12.5rem",
      }}
    />
    <IcTypography variant="h4">
      <h4>Height set with styles</h4>
    </IcTypography>
    <IcSkeleton
      style={{
        height: "5rem",
      }}
    />
    <IcTypography variant="h4">
      <h4>Width set with styles</h4>
    </IcTypography>
    <IcSkeleton
      style={{
        maxWidth: "25.125rem",
      }}
    />
  </div>
</ComponentPreview>

### Light

export const snippetsLight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-skeleton variant="circle" appearance="light"></ic-skeleton>
<ic-typography variant="caption">
  <ic-skeleton variant="text" appearance="light"></ic-skeleton>
</ic-typography>
<ic-skeleton appearance="light"></ic-skeleton>`,
      long: `.parent-container {
    display: flex;
    flex-direction: column;
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSkeleton variant="circle" appearance="light" />
<IcTypography variant="caption">
  <IcSkeleton variant="text" appearance="light" />
</IcTypography>
<IcSkeleton appearance="light" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexDirection: "column",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsLight}>
  <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
    <IcSkeleton variant="circle" appearance="light" />
    <IcTypography variant="caption">
      <IcSkeleton variant="text" appearance="light" />
    </IcTypography>
    <IcSkeleton appearance="light" />
  </div>
</ComponentPreview>

### Within IcCard component

export const snippetsInCard = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-card heading="Americano Order" subheading="Name: Michael">
  <ic-skeleton
    slot="icon"
    variant="circle"
    style="height: var(--ic-space-xl); width: var(--ic-space-xl);"
  ></ic-skeleton>
  <ic-skeleton
    slot="heading"
    variant="rectangle"
    style="height: var(--ic-space-xl); width: 10.625rem;"
  ></ic-skeleton>
  <ic-skeleton
    slot="subheading"
    variant="text"
    style="height: 1.125rem; width: 6.25rem;"
  ></ic-skeleton>
  <ic-skeleton
    slot="message"
    variant="rectangle"
    style="height: var(--ic-space-lg); width: 18.75rem;"
  ></ic-skeleton>
  <ic-skeleton
    slot="interaction-controls"
    variant="rectangle"
    style="height: 2.5rem; width: 6.25rem;"
  ></ic-skeleton>
  <ic-skeleton
    slot="interaction-controls"
    variant="rectangle"
    style="height: 2.5rem; width: 6.25rem;"
  ></ic-skeleton>
</ic-card>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcCard heading="Americano Order" subheading="Name: Michael">
  <IcSkeleton
    slot="icon"
    variant="circle"
    style={{
      height: "var(--ic-space-xl)",
      width: "var(--ic-space-xl)",
    }}
  />
  <IcSkeleton
    slot="heading"
    variant="rectangle"
    style={{
      height: "var(--ic-space-xl)",
      width: "10.625rem",
    }}
  />
  <IcSkeleton
    slot="subheading"
    variant="text"
    style={{
      height: "1.125rem",
      width: "6.25rem",
    }}
  />
  <IcSkeleton
    slot="message"
    variant="rectangle"
    style={{
      height: "var(--ic-space-lg)",
      width: "18.75rem",
    }}
  />
  <IcSkeleton
    slot="interaction-controls"
    variant="rectangle"
    style={{
      height: "2.5rem",
      width: "6.25rem",
    }}
  />
  <IcSkeleton
    slot="interaction-controls"
    variant="rectangle"
    style={{
      height: "2.5rem",
      width: "6.25rem",
    }}
  />
</IcCard>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

export const loading = () => (
  <IcCard heading="Americano Order" subheading="Name: Michael">
    <IcSkeleton
      slot="icon"
      variant="circle"
      style={{
        height: "2rem",
        width: "2rem",
      }}
    />
    <IcSkeleton
      slot="heading"
      variant="rectangle"
      style={{
        height: "2rem",
        width: "10.625rem",
      }}
    />
    <IcSkeleton
      slot="subheading"
      variant="text"
      style={{
        height: "1.125rem",
        width: "6.25rem",
      }}
    />
    <IcSkeleton
      slot="message"
      variant="rectangle"
      style={{
        height: "1.5rem",
        width: "18.75rem",
      }}
    />
    <IcSkeleton
      slot="interaction-controls"
      variant="rectangle"
      style={{
        height: "2.5rem",
        width: "6.25rem",
      }}
    />
    <IcSkeleton
      slot="interaction-controls"
      variant="rectangle"
      style={{
        height: "2.5rem",
        width: "6.25rem",
      }}
    />
  </IcCard>
);

export const loaded = () => (
  <IcCard
    heading="Americano Order"
    subheading="Name: Michael"
    message="Extras: double espresso shot & oat milk"
  >
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
    <div slot="interaction-controls" style={{ display: "flex", gap: "1rem" }}>
      <IcButton variant="primary">Accept</IcButton>
      <IcButton variant="secondary">Cancel</IcButton>
    </div>
  </IcCard>
);

export const ContentFunction = () => {
  const [content, setContent] = React.useState(loaded);
  const loadFunc = () => {
    setContent(loading);
    setTimeout(() => {
      setContent(loaded);
    }, 3000);
  };
  return (
    <div>
      {content}
      <br />
      <IcButton
        variant="primary"
        onClick={() => {
          loadFunc();
        }}
      >
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          height="24"
          viewBox="0 0 24 24"
          width="24"
          fill="#000000"
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
        </SlottedSVG>
        Refresh
      </IcButton>
    </div>
  );
};

<ComponentPreview snippets={snippetsInCard}>
  <ContentFunction />
</ComponentPreview>

---

# Stepper

URL: https://design.sis.gov.uk/components/stepper/code
Status: BETA
Subtitle: A stepper is a visual representation of a user's progress through a predefined set of steps in a linear process.


import { IcStepper, IcStep } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-stepper>
  <ic-step step-title="Order coffee" step-type="completed"></ic-step>
  <ic-step step-title="Pay for order" step-type="current"></ic-step>
  <ic-step step-title="Collect" step-type="disabled"></ic-step>
</ic-stepper>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStepper>
  <IcStep stepTitle="Order coffee" stepType="completed" />
  <IcStep stepTitle="Pay for order" stepType="current" />
  <IcStep stepTitle="Collect" stepType="disabled" />
</IcStepper>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcStepper>
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep stepTitle="Pay for order" stepType="current" />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

## Step details

{
  "props": [
    {
      "name": "stepStatus",
      "type": "\"optional\" | \"required\"",
      "complexType": {
        "original": "IcStepStatuses",
        "resolved": "\"optional\" | \"required\"",
        "references": {
          "IcStepStatuses": {
            "location": "import",
            "path": "./ic-step.types",
            "id": "src/components/ic-step/ic-step.types.ts::IcStepStatuses"
          }
        }
      },
      "mutable": false,
      "attr": "step-status",
      "reflectToAttr": false,
      "docs": "The status of the step. Use this prop to display a status message on the step if it is required or optional.",
      "docsTags": [],
      "values": [
        {
          "value": "optional",
          "type": "string"
        },
        {
          "value": "required",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "stepSubtitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "step-subtitle",
      "reflectToAttr": false,
      "docs": "Additional information about the step. Use this prop to override the default step status messaging displayed when selecting a step type or step status.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "stepTitle",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "step-title",
      "reflectToAttr": false,
      "docs": "The title of the step within the stepper.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "stepType",
      "type": "\"active\" | \"completed\" | \"current\" | \"disabled\"",
      "complexType": {
        "original": "IcStepTypes",
        "resolved": "\"active\" | \"completed\" | \"current\" | \"disabled\"",
        "references": {
          "IcStepTypes": {
            "location": "import",
            "path": "./ic-step.types",
            "id": "src/components/ic-step/ic-step.types.ts::IcStepTypes"
          }
        }
      },
      "mutable": false,
      "attr": "step-type",
      "reflectToAttr": false,
      "docs": "The state of the step within the stepper.",
      "docsTags": [],
      "default": "\"active\"",
      "values": [
        {
          "value": "active",
          "type": "string"
        },
        {
          "value": "completed",
          "type": "string"
        },
        {
          "value": "current",
          "type": "string"
        },
        {
          "value": "disabled",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Stepper details

{
  "props": [
    {
      "name": "aligned",
      "type": "\"full-width\" | \"left\"",
      "complexType": {
        "original": "IcStepperAlignment",
        "resolved": "\"full-width\" | \"left\"",
        "references": {
          "IcStepperAlignment": {
            "location": "import",
            "path": "./ic-stepper.types",
            "id": "src/components/ic-stepper/ic-stepper.types.ts::IcStepperAlignment"
          }
        }
      },
      "mutable": false,
      "attr": "aligned",
      "reflectToAttr": false,
      "docs": "The alignment of the default stepper within its container.",
      "docsTags": [],
      "default": "\"full-width\"",
      "values": [
        {
          "value": "full-width",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"default\" | \"light\"",
      "complexType": {
        "original": "\"light\" | \"default\"",
        "resolved": "\"default\" | \"light\"",
        "references": {}
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the stepper.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "connectorWidth",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "connector-width",
      "reflectToAttr": false,
      "docs": "The length of the connector between each step in pixels. Minimum length is 100px.",
      "docsTags": [],
      "default": "100",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideStepInfo",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-step-info",
      "reflectToAttr": false,
      "docs": "If `true`, the information about each step, i.e. step title, step subtitle and step status, will be hidden on all default steps. The information about each step will still be visible in the compact variant of the stepper.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"compact\" | \"default\"",
      "complexType": {
        "original": "IcStepVariants",
        "resolved": "\"compact\" | \"default\"",
        "references": {
          "IcStepVariants": {
            "location": "import",
            "path": "../ic-step/ic-step.types",
            "id": "src/components/ic-step/ic-step.types.ts::IcStepVariants"
          }
        }
      },
      "mutable": true,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the stepper.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "compact",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Compact stepper

export const compactStepper = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-stepper variant="compact">
  <ic-step step-title="Order coffee" step-type="completed"></ic-step>
  <ic-step step-title="Pay for order" step-type="current"></ic-step>
  <ic-step step-title="Collect" step-type="disabled"></ic-step>
</ic-stepper>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStepper variant="compact">
  <IcStep stepTitle="Order coffee" stepType="completed" />
  <IcStep stepTitle="Pay for order" stepType="current" />
  <IcStep stepTitle="Collect" stepType="disabled" />
</IcStepper>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={compactStepper}>
  <IcStepper variant="compact">
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep stepTitle="Pay for order" stepType="current" />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

### Left-aligned

export const leftAligned = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-stepper aligned="left">
  <ic-step step-title="Order coffee" step-type="completed"></ic-step>
  <ic-step step-title="Pay for order" step-type="current"></ic-step>
  <ic-step step-title="Collect" step-type="disabled"></ic-step>
</ic-stepper>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStepper aligned="left">
  <IcStep stepTitle="Order coffee" stepType="completed" />
  <IcStep stepTitle="Pay for order" stepType="current" />
  <IcStep stepTitle="Collect" stepType="disabled" />
</IcStepper>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={leftAligned}>
  <IcStepper aligned="left">
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep stepTitle="Pay for order" stepType="current" />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

### With hidden step information

export const hiddenStepInfo = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-stepper hide-step-info="true">
  <ic-step step-title="Order coffee" step-type="completed"></ic-step>
  <ic-step step-title="Pay for order" step-type="current"></ic-step>
  <ic-step step-title="Collect" step-type="disabled"></ic-step>
</ic-stepper>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStepper hideStepInfo>
  <IcStep stepTitle="Order coffee" stepType="completed" />
  <IcStep stepTitle="Pay for order" stepType="current" />
  <IcStep stepTitle="Collect" stepType="disabled" />
</IcStepper>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={hiddenStepInfo}>
  <IcStepper hideStepInfo>
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep stepTitle="Pay for order" stepType="current" />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

### With subtitles

export const withSubtitles = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-stepper>
  <ic-step step-title="Order coffee" step-type="completed"></ic-step>
  <ic-step 
    step-title="Customise your order" 
    step-subtitle="Optional" 
    step-type="completed" 
  >
  </ic-step>
  <ic-step 
    step-title="Pay for order" 
    step-subtitle="We accept all major debit/credit cards" 
    step-type="current" 
  >
  </ic-step>
  <ic-step step-title="Collect" step-type="disabled"></ic-step>
</ic-stepper>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStepper>
  <IcStep stepTitle="Order coffee" stepType="completed" />
  <IcStep 
    stepTitle="Customise your order" 
    stepSubtitle="Optional" 
    stepType="completed" 
  />
  <IcStep 
    stepTitle="Pay for order" 
    stepSubtitle="We accept all major debit/credit cards" 
    stepType="current" 
  />
  <IcStep stepTitle="Collect" stepType="disabled"/>
</IcStepper>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withSubtitles}>
  <IcStepper>
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep
      stepTitle="Customise your order"
      stepSubtitle="Optional"
      stepType="completed"
    />
    <IcStep
      stepTitle="Pay for order"
      stepSubtitle="We accept all major debit/credit cards"
      stepType="current"
    />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

### Custom connector width

export const customConnectorWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-stepper connector-width="150">
  <ic-step step-title="Order coffee" step-type="completed"></ic-step>
  <ic-step step-title="Pay for order" step-type="current"></ic-step>
  <ic-step step-title="Collect" step-type="disabled"></ic-step>
</ic-stepper>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcStepper aligned="left" connectorWidth={150}>
  <IcStep stepTitle="Order coffee" stepType="completed" />
  <IcStep stepTitle="Pay for order" stepType="current" />
  <IcStep stepTitle="Collect" stepType="disabled" />
</IcStepper>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={customConnectorWidth}>
  <IcStepper aligned="left" connectorWidth={150}>
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep stepTitle="Pay for order" stepType="current" />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

---

# Switch

URL: https://design.sis.gov.uk/components/switch/code
Status: BETA
Subtitle: Switches are used to quickly toggle an option on or off.


import { IcSwitch } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-switch label="Coffee preferences"></ic-switch>
<script>
  const switchEl = document.querySelector('ic-switch');
  switchEl.addEventListener('icChange', (ev) => {
    console.log({
      checked: ev.detail.checked,
      value: ev.detail.value
    })
  })
</script>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSwitch
  label="Coffee preferences"
  onIcChange={(ev) => console.log({ 
    checked: ev.detail.checked, 
    value: ev.detail.value
  })}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcSwitch
    label="Coffee preferences"
    onIcChange={(ev) =>
      console.log({
        checked: ev.detail.checked,
        value: ev.detail.value,
      })
    }
  />
</ComponentPreview>

## Switch details

{
  "props": [
    {
      "name": "checked",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "checked",
      "reflectToAttr": false,
      "docs": "If `true`, the switch will display as checked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The aria-label applied to the switch when no visual 'name' is provided.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showState",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-state",
      "reflectToAttr": false,
      "docs": "If `true`, the switch will render the On/Off state text.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the switch component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string | null",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the toggle does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\nit's only used when the toggle participates in a native `<form>`.",
      "docsTags": [],
      "default": "\"on\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "right-adornment",
      "docs": "Content is placed to the right of switch before state label."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "icBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle loses focus.",
      "docsTags": []
    },
    {
      "event": "icChange",
      "detail": "IcSwitchChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcSwitchChangeEventDetail",
        "resolved": "IcSwitchChangeEventDetail",
        "references": {
          "IcSwitchChangeEventDetail": {
            "location": "import",
            "path": "./ic-switch.types",
            "id": "src/components/ic-switch/ic-switch.types.ts::IcSwitchChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value property has changed.",
      "docsTags": []
    },
    {
      "event": "icFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle has focus.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the switch.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Variants

### State

export const snippetsState = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-switch label="Coffee preferences" show-state="true"></ic-switch>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSwitch label="Coffee preferences" showState />`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsState}>
  <IcSwitch label="Coffee preferences" showState />
</ComponentPreview>

### Small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-switch
  label="Coffee preferences"
  show-state="true"
  size="small"
></ic-switch>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSwitch label="Coffee preferences" showState size="small"/>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSmall}>
  <IcSwitch label="Coffee preferences" showState size="small" />
</ComponentPreview>

### Disabled

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-switch
  label="Coffee preferences"
  show-state="true"
  disabled="true"
></ic-switch>
<ic-switch
  label="Coffee preferences"
  show-state="true"
  disabled="true"
  checked="true"
></ic-switch>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSwitch label="Coffee preferences" showState disabled />
      <IcSwitch label="Coffee preferences" showState disabled checked />`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabled}>
  <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
    <IcSwitch label="Coffee preferences" showState disabled />
    <IcSwitch label="Coffee preferences" showState disabled checked />
  </div>
</ComponentPreview>

### Helper text and right adornment

export const snippetsHelperAndAdornment = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-switch label="Coffee preferences" helper-text="Choose your coffee preferences">
  <svg
    slot="right-adornment"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
     <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z"/>
  </svg>
</ic-switch>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcSwitch label="Coffee preferences" helperText="Choose your coffee preferences">
  <SlottedSVG
    slot="right-adornment"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z"/>
  </SlottedSVG>
</IcSwitch>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsHelperAndAdornment}>
  <IcSwitch
    label="Coffee preferences"
    helperText="Choose your coffee preferences"
  >
    <svg
      slot="right-adornment"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
    </svg>
  </IcSwitch>
</ComponentPreview>

---

# Tabs

URL: https://design.sis.gov.uk/components/tabs/code
Status: BETA
Subtitle: Tabs let users navigate between content within the same context. Tabs organise complex layouts by moving content into multiple sections.


import { IcTab, IcTabContext, IcTabGroup, IcTabPanel } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context>
  <ic-tab-group label="Example tab group">
    <ic-tab>Ingredients</ic-tab>
    <ic-tab>Method</ic-tab>
    <ic-tab>History</ic-tab>
  </ic-tab-group>
  <ic-tab-panel>Tab One - Ingredients</ic-tab-panel>
  <ic-tab-panel>Tab Two - Method</ic-tab-panel>
  <ic-tab-panel>Tab Three - History</ic-tab-panel>
</ic-tab-context>
<script>
  const tabContext = document.querySelector('ic-tab-context');
  tabContext.addEventListener('icTabSelect', (ev) => 
    console.log({
      tabIndex: ev.detail.tabIndex,
      tabLabel: ev.detail.tabLabel,
    })
  )
</script>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext
  onIcTabSelect={(ev) =>
    console.log({
      tabIndex: ev.detail.tabIndex,
      tabLabel: ev.detail.tabLabel,
    })
  }
>
  <IcTabGroup label="Example tab group">
    <IcTab>Ingredients</IcTab>
    <IcTab>Method</IcTab>
    <IcTab>History</IcTab>
  </IcTabGroup>
  <IcTabPanel>Tab One - Ingredients</IcTabPanel>
  <IcTabPanel>Tab Two - Method</IcTabPanel>
  <IcTabPanel>Tab Three - History</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <IcTabContext
    onIcTabSelect={(ev) =>
      console.log({
        tabIndex: ev.detail.tabIndex,
        tabLabel: ev.detail.tabLabel,
      })
    }
  >
    <IcTabGroup label="Example tab group">
      <IcTab>Ingredients</IcTab>
      <IcTab>Method</IcTab>
      <IcTab>History</IcTab>
    </IcTabGroup>
    <IcTabPanel>Tab One - Ingredients</IcTabPanel>
    <IcTabPanel>Tab Two - Method</IcTabPanel>
    <IcTabPanel>Tab Three - History</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

## Tab details

{
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component displayed inline with the tab."
    },
    {
      "name": "icon",
      "docs": "Content will be rendered next to the tab label."
    }
  ],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the tab.",
      "docsTags": []
    }
  ],
  "listeners": []
}


## Tab context details

{
  "props": [
    {
      "name": "activationType",
      "type": "\"automatic\" | \"manual\"",
      "complexType": {
        "original": "IcActivationTypes",
        "resolved": "\"automatic\" | \"manual\"",
        "references": {
          "IcActivationTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcActivationTypes"
          }
        }
      },
      "mutable": false,
      "attr": "activation-type",
      "reflectToAttr": false,
      "docs": "Determines whether tabs have to be manually activated (by pressing 'Enter' or 'Space') when they receive focus using keyboard navigation.",
      "docsTags": [],
      "default": "\"automatic\"",
      "values": [
        {
          "value": "automatic",
          "type": "string"
        },
        {
          "value": "manual",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"dark\" | \"light\"",
      "complexType": {
        "original": "IcThemeForegroundNoDefault",
        "resolved": "\"dark\" | \"light\"",
        "references": {
          "IcThemeForegroundNoDefault": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForegroundNoDefault"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the tab context, e.g dark, or light.",
      "docsTags": [],
      "default": "\"dark\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "contextId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "context-id",
      "reflectToAttr": true,
      "docs": "The unique context needed if using multiple tabs inside one another i.e. rendering another set of tabs inside a tab panel.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selectedTabIndex",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "selected-tab-index",
      "reflectToAttr": false,
      "docs": "The selected tab to be controlled by the user. Must be used alongside the icTabSelect event to manage tab selection.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [
    {
      "event": "icTabSelect",
      "detail": "IcTabSelectEventDetail",
      "bubbles": false,
      "complexType": {
        "original": "IcTabSelectEventDetail",
        "resolved": "IcTabSelectEventDetail",
        "references": {
          "IcTabSelectEventDetail": {
            "location": "import",
            "path": "../ic-tab/ic-tab.types",
            "id": "src/components/ic-tab/ic-tab.types.ts::IcTabSelectEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a user selects a tab.",
      "docsTags": []
    },
    {
      "event": "tabSelect",
      "detail": "IcTabSelectEventDetail",
      "bubbles": false,
      "complexType": {
        "original": "IcTabSelectEventDetail",
        "resolved": "IcTabSelectEventDetail",
        "references": {
          "IcTabSelectEventDetail": {
            "location": "import",
            "path": "../ic-tab/ic-tab.types",
            "id": "src/components/ic-tab/ic-tab.types.ts::IcTabSelectEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This event should not be used anymore. Use icTabSelect instead."
        }
      ],
      "deprecation": "This event should not be used anymore. Use icTabSelect instead."
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "tabClick",
      "capture": false,
      "passive": false
    },
    {
      "event": "tabCreated",
      "capture": false,
      "passive": false
    },
    {
      "event": "tabPanelCreated",
      "capture": false,
      "passive": false
    },
    {
      "event": "tabEnabled",
      "capture": false,
      "passive": false
    }
  ]
}


## Tab list details

{
  "props": [
    {
      "name": "contextId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "context-id",
      "reflectToAttr": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This is no longer required.\nThe context id is passed down from `ic-tab-context`"
        }
      ],
      "default": "\"default\"",
      "deprecation": "This is no longer required.\nThe context id is passed down from `ic-tab-context`",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inline",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "inline",
      "reflectToAttr": true,
      "docs": "If `true`, the tabs and tab panels will be positioned separately.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to describe the purpose of the set of tabs to screen reader users.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Tab panel details

{
  "props": [
    {
      "name": "contextId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "context-id",
      "reflectToAttr": true,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This is no longer required.\nThe context id is passed down from `ic-tab-context`"
        }
      ],
      "default": "\"default\"",
      "deprecation": "This is no longer required.\nThe context id is passed down from `ic-tab-context`",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### With icons

export const withIcons = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context>
  <ic-tab-group label="Example tab group">
    <ic-tab>
      Ingredients
      <svg 
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M9,21V22H7V21A2,2 0 0,1 5,19V4A2,2 0 0,1 7,2H17A2,2 0 0,1 19,4V19A2,2 0 0,1 17,21V22H15V21H9M7,4V9H17V4H7M7,19H17V11H7V19M8,12H10V15H8V12M8,6H10V8H8V6Z" />
      </svg>
    </ic-tab>
    <ic-tab>
      Method
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M3,5H9V11H3V5M5,7V9H7V7H5M11,7H21V9H11V7M11,15H21V17H11V15M5,20L1.5,16.5L2.91,15.09L5,17.17L9.59,12.59L11,14L5,20Z" />
      </svg>
    </ic-tab>
    <ic-tab>
      History
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3" />
      </svg>
    </ic-tab>
  </ic-tab-group>
  <ic-tab-panel>Tab One - Ingredients</ic-tab-panel>
  <ic-tab-panel>Tab Two - Method</ic-tab-panel>
  <ic-tab-panel>Tab Three - History</ic-tab-panel>
</ic-tab-context>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext>
  <IcTabGroup label="Example tab group">
    <IcTab>
      Ingredients
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M9,21V22H7V21A2,2 0 0,1 5,19V4A2,2 0 0,1 7,2H17A2,2 0 0,1 19,4V19A2,2 0 0,1 17,21V22H15V21H9M7,4V9H17V4H7M7,19H17V11H7V19M8,12H10V15H8V12M8,6H10V8H8V6Z" />
      </SlottedSVG>
    </IcTab>
    <IcTab>
      Method
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M3,5H9V11H3V5M5,7V9H7V7H5M11,7H21V9H11V7M11,15H21V17H11V15M5,20L1.5,16.5L2.91,15.09L5,17.17L9.59,12.59L11,14L5,20Z" />
      </SlottedSVG>
    </IcTab>
    <IcTab>
      History
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3" />
      </SlottedSVG>
    </IcTab>
  </IcTabGroup>
  <IcTabPanel>Tab One - Ingredients</IcTabPanel>
  <IcTabPanel>Tab Two - Method</IcTabPanel>
  <IcTabPanel>Tab Three - History</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={withIcons}>
  <IcTabContext>
    <IcTabGroup label="Example tab group">
      <IcTab>
        Ingredients
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          height="24"
          viewBox="0 0 24 24"
          width="24"
          fill="#000000"
        >
          <path d="M9,21V22H7V21A2,2 0 0,1 5,19V4A2,2 0 0,1 7,2H17A2,2 0 0,1 19,4V19A2,2 0 0,1 17,21V22H15V21H9M7,4V9H17V4H7M7,19H17V11H7V19M8,12H10V15H8V12M8,6H10V8H8V6Z" />
        </svg>
      </IcTab>
      <IcTab>
        Method
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          height="24"
          viewBox="0 0 24 24"
          width="24"
          fill="#000000"
        >
          <path d="M3,5H9V11H3V5M5,7V9H7V7H5M11,7H21V9H11V7M11,15H21V17H11V15M5,20L1.5,16.5L2.91,15.09L5,17.17L9.59,12.59L11,14L5,20Z" />
        </svg>
      </IcTab>
      <IcTab>
        History
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          height="24"
          viewBox="0 0 24 24"
          width="24"
          fill="#000000"
        >
          <path d="M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3" />
        </svg>
      </IcTab>
    </IcTabGroup>
    <IcTabPanel>Tab One - Ingredients</IcTabPanel>
    <IcTabPanel>Tab Two - Method</IcTabPanel>
    <IcTabPanel>Tab Three - History</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

### Disabled

export const disabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context>
  <ic-tab-group label="Example tab group">
    <ic-tab>Ingredients</ic-tab>
    <ic-tab disabled="true">Method</ic-tab>
    <ic-tab>History</ic-tab>
  </ic-tab-group>
  <ic-tab-panel>Tab One - Ingredients</ic-tab-panel>
  <ic-tab-panel>Tab Two - Method</ic-tab-panel>
  <ic-tab-panel>Tab Three - History</ic-tab-panel>
</ic-tab-context>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext>
  <IcTabGroup label="Example tab group">
    <IcTab>Ingredients</IcTab>
    <IcTab disabled>Method</IcTab>
    <IcTab>History</IcTab>
  </IcTabGroup>
  <IcTabPanel>Tab One - Ingredients</IcTabPanel>
  <IcTabPanel>Tab Two - Method</IcTabPanel>
  <IcTabPanel>Tab Three - History</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={disabled}>
  <IcTabContext>
    <IcTabGroup label="Example tab group">
      <IcTab>Ingredients</IcTab>
      <IcTab disabled>Method</IcTab>
      <IcTab>History</IcTab>
    </IcTabGroup>
    <IcTabPanel>Tab One - Ingredients</IcTabPanel>
    <IcTabPanel>Tab Two - Method</IcTabPanel>
    <IcTabPanel>Tab Three - History</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

### Light

export const light = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context appearance="light">
  <ic-tab-group label="Example tab group">
    <ic-tab>Ingredients</ic-tab>
    <ic-tab>Method</ic-tab>
    <ic-tab>History</ic-tab>
  </ic-tab-group>
  <ic-tab-panel>Tab One - Ingredients</ic-tab-panel>
  <ic-tab-panel>Tab Two - Method</ic-tab-panel>
  <ic-tab-panel>Tab Three - History</ic-tab-panel>
</ic-tab-context>`,
      long: `.dark-background {
    background-color: #2c2f34;
    }
  </style>
  <body>
    <div class="dark-background">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext appearance="light">
  <IcTabGroup label="Example tab group">
    <IcTab>Ingredients</IcTab>
    <IcTab>Method</IcTab>
    <IcTab>History</IcTab>
  </IcTabGroup>
  <IcTabPanel>Tab One - Ingredients</IcTabPanel>
  <IcTabPanel>Tab Two - Method</IcTabPanel>
  <IcTabPanel>Tab Three - History</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `  const useStyles = createUseStyles({
    darkBackground: {
      backgroundColor: "#2c2f34",
    },
  });
  const classes = useStyles();
  return (
    <div className={classes.darkBackground}>
      {shortCode}
    </div>
  )`,
        },
        {
          language: "Javascript",
          snippet: `  const useStyles = createUseStyles({
    darkBackground: {
      backgroundColor: "#2c2f34",
    },
  });
  const classes = useStyles();
  return (
    <div className={classes.darkBackground}>
      {shortCode}
    </div>
  )`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={light} style={{ backgroundColor: "#2c2f34" }}>
  <IcTabContext appearance="light">
    <IcTabGroup label="Example tab group">
      <IcTab>Ingredients</IcTab>
      <IcTab>Method</IcTab>
      <IcTab>History</IcTab>
    </IcTabGroup>
    <IcTabPanel>Tab One - Ingredients</IcTabPanel>
    <IcTabPanel>Tab Two - Method</IcTabPanel>
    <IcTabPanel>Tab Three - History</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

### Compact

export const compact = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context class="tabs">
  <ic-tab-group label="Example tab group">
    <ic-tab>Ingredients</ic-tab>
    <ic-tab>Method</ic-tab>
    <ic-tab>History</ic-tab>
    <ic-tab>Drinks</ic-tab>
    <ic-tab>Recipes</ic-tab>
  </ic-tab-group>
  <ic-tab-panel>Tab One - Ingredients</ic-tab-panel>
  <ic-tab-panel>Tab Two - Method</ic-tab-panel>
  <ic-tab-panel>Tab Three - History</ic-tab-panel>
  <ic-tab-panel>Tab Four - Drinks</ic-tab-panel>
  <ic-tab-panel>Tab Five - Recipes</ic-tab-panel>
</ic-tab-context>`,
      long: `.tabs ic-tab-group,
    .tabs ic-tab-panel {
      width: 60%;
      margin-left: auto;
      margin-right: auto;
    }
  </style>
  <body>
  {shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext>
  <IcTabGroup label="Example tab group">
    <IcTab>Ingredients</IcTab>
    <IcTab>Method</IcTab>
    <IcTab>History</IcTab>
    <IcTab>Drinks</IcTab>
    <IcTab>Recipes</IcTab>
  </IcTabGroup>
  <IcTabPanel>Tab One - Ingredients</IcTabPanel>
  <IcTabPanel>Tab Two - Method</IcTabPanel>
  <IcTabPanel>Tab Three - History</IcTabPanel>
  <IcTabPanel>Tab Four - Drinks</IcTabPanel>
  <IcTabPanel>Tab Five - Recipes</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    width: "60%",
    marginLeft: "auto",
    marginRight: "auto",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    width: "60%",
    marginLeft: "auto",
    marginRight: "auto",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={compact}>
  <IcTabContext class="tabs">
    <IcTabGroup label="Example tab group">
      <IcTab>Ingredients</IcTab>
      <IcTab>Method</IcTab>
      <IcTab>History</IcTab>
      <IcTab>Drinks</IcTab>
      <IcTab>Recipes</IcTab>
    </IcTabGroup>
    <IcTabPanel>Tab One - Ingredients</IcTabPanel>
    <IcTabPanel>Tab Two - Method</IcTabPanel>
    <IcTabPanel>Tab Three - History</IcTabPanel>
    <IcTabPanel>Tab Four - Drinks</IcTabPanel>
    <IcTabPanel>Tab Five - Recipes</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

### Nested Tabs

export const nested = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tab-context>
  <ic-tab-group label="Example tab group">
    <ic-tab>Ingredients</ic-tab>
    <ic-tab>Method</ic-tab>
    <ic-tab>History</ic-tab>
  </ic-tab-group>
  <ic-tab-panel>
    <ic-tab-context context-id="context-nested">
      <ic-tab-group label="Example tab group">
        <ic-tab>Espresso</ic-tab>
        <ic-tab>Water</ic-tab>
        <ic-tab>Milk</ic-tab>
      </ic-tab-group>
      <ic-tab-panel>Nested Tab Panel One - Espresso</ic-tab-panel>
      <ic-tab-panel>Nested Tab Panel Two - Water</ic-tab-panel>
      <ic-tab-panel>Nested Tab Panel Three - Milk</ic-tab-panel>
    </ic-tab-context>
  </ic-tab-panel>
  <ic-tab-panel>Outer Tab Panel Two - Method</ic-tab-panel>
  <ic-tab-panel>Outer Tab Panel Three - History</ic-tab-panel>
</ic-tab-context>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTabContext>
  <IcTabGroup label="Example tab group">
    <IcTab>Ingredients</IcTab>
    <IcTab>Method</IcTab>
    <IcTab>History</IcTab>
  </IcTabGroup>
  <IcTabPanel>
    <IcTabContext contextId="context-nested">
      <IcTabGroup label="Example tab group">
        <IcTab>Espresso</IcTab>
        <IcTab>Water</IcTab>
        <IcTab>Milk</IcTab>
      </IcTabGroup>
      <IcTabPanel>Nested Tab Panel One - Espresso</IcTabPanel>
      <IcTabPanel>Nested Tab Panel Two - Water</IcTabPanel>
      <IcTabPanel>Nested Tab Panel Three - Milk</IcTabPanel>
    </IcTabContext>
  </IcTabPanel>
  <IcTabPanel>Outer Tab Panel Two - Method</IcTabPanel>
  <IcTabPanel>Outer Tab Panel Three - History</IcTabPanel>
</IcTabContext>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={nested}>
  <IcTabContext>
    <IcTabGroup label="Example tab group">
      <IcTab>Ingredients</IcTab>
      <IcTab>Method</IcTab>
      <IcTab>History</IcTab>
    </IcTabGroup>
    <IcTabPanel>
      <IcTabContext contextId="context-nested">
        <IcTabGroup label="Example tab group">
          <IcTab>Espresso</IcTab>
          <IcTab>Water</IcTab>
          <IcTab>Milk</IcTab>
        </IcTabGroup>
        <IcTabPanel>Nested Tab Panel One - Espresso</IcTabPanel>
        <IcTabPanel>Nested Tab Panel Two - Water</IcTabPanel>
        <IcTabPanel>Nested Tab Panel Three - Milk</IcTabPanel>
      </IcTabContext>
    </IcTabPanel>
    <IcTabPanel>Outer Tab Panel Two - Method</IcTabPanel>
    <IcTabPanel>Outer Tab Panel Three - History</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

---

# Text field

URL: https://design.sis.gov.uk/components/text-field/code
Status: BETA
Subtitle: Text fields let users input and edit text. Text fields capture a single line of text and text areas capture multiple lines of text.


import { IcTextField } from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field 
  label="What is your favourite coffee?" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica"
></ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const textField = document.querySelector('ic-text-field');
    textfield.addEventListenter('icChange', (ev) => console.log(ev.detail.value));
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField 
  label="What is your favourite coffee?" 
  placeholder="Please enter…" 
  helperText="Such as Arabica, Robusta or Liberica"
  onIcChange={(ev) => console.log(ev.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcTextField
    label="What is your favourite coffee?"
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
    onIcChange={(ev) => console.log(ev.detail.value)}
  />
</ComponentPreview>

## Text field details

{
  "props": [
    {
      "name": "autoFocus",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "auto-focus",
      "reflectToAttr": false,
      "docs": "If `true`, the form control will have input focus when the page loads.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocapitalize",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "autocapitalize",
      "reflectToAttr": false,
      "docs": "The automatic capitalisation of the text value as it is entered/edited by the user.\nAvailable options: \"off\", \"none\", \"on\", \"sentences\", \"words\", \"characters\".",
      "docsTags": [],
      "default": "\"off\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocomplete",
      "type": "\"name\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\"",
      "complexType": {
        "original": "IcAutocompleteTypes",
        "resolved": "\"name\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\"",
        "references": {
          "IcAutocompleteTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAutocompleteTypes"
          }
        }
      },
      "mutable": false,
      "attr": "autocomplete",
      "reflectToAttr": false,
      "docs": "The state of autocompletion the browser can apply on the text value.",
      "docsTags": [],
      "default": "\"off\"",
      "values": [
        {
          "value": "name",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        },
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "honorific-prefix",
          "type": "string"
        },
        {
          "value": "given-name",
          "type": "string"
        },
        {
          "value": "additional-name",
          "type": "string"
        },
        {
          "value": "family-name",
          "type": "string"
        },
        {
          "value": "honorific-suffix",
          "type": "string"
        },
        {
          "value": "nickname",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "username",
          "type": "string"
        },
        {
          "value": "new-password",
          "type": "string"
        },
        {
          "value": "current-password",
          "type": "string"
        },
        {
          "value": "one-time-code",
          "type": "string"
        },
        {
          "value": "organization-title",
          "type": "string"
        },
        {
          "value": "organization",
          "type": "string"
        },
        {
          "value": "street-address",
          "type": "string"
        },
        {
          "value": "address-line1",
          "type": "string"
        },
        {
          "value": "address-line2",
          "type": "string"
        },
        {
          "value": "address-line3",
          "type": "string"
        },
        {
          "value": "address-level4",
          "type": "string"
        },
        {
          "value": "address-level3",
          "type": "string"
        },
        {
          "value": "address-level2",
          "type": "string"
        },
        {
          "value": "address-level1",
          "type": "string"
        },
        {
          "value": "country",
          "type": "string"
        },
        {
          "value": "country-name",
          "type": "string"
        },
        {
          "value": "postal-code",
          "type": "string"
        },
        {
          "value": "cc-name",
          "type": "string"
        },
        {
          "value": "cc-given-name",
          "type": "string"
        },
        {
          "value": "cc-additional-name",
          "type": "string"
        },
        {
          "value": "cc-family-name",
          "type": "string"
        },
        {
          "value": "cc-number",
          "type": "string"
        },
        {
          "value": "cc-exp",
          "type": "string"
        },
        {
          "value": "cc-exp-month",
          "type": "string"
        },
        {
          "value": "cc-exp-year",
          "type": "string"
        },
        {
          "value": "cc-csc",
          "type": "string"
        },
        {
          "value": "cc-type",
          "type": "string"
        },
        {
          "value": "transaction-currency",
          "type": "string"
        },
        {
          "value": "transaction-amount",
          "type": "string"
        },
        {
          "value": "language",
          "type": "string"
        },
        {
          "value": "bday",
          "type": "string"
        },
        {
          "value": "bday-day",
          "type": "string"
        },
        {
          "value": "bday-month",
          "type": "string"
        },
        {
          "value": "bday-year",
          "type": "string"
        },
        {
          "value": "sex",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "tel-country-code",
          "type": "string"
        },
        {
          "value": "tel-national",
          "type": "string"
        },
        {
          "value": "tel-area-code",
          "type": "string"
        },
        {
          "value": "tel-local",
          "type": "string"
        },
        {
          "value": "tel-extension",
          "type": "string"
        },
        {
          "value": "impp",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "value": "photo",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocorrect",
      "type": "\"off\" | \"on\"",
      "complexType": {
        "original": "IcAutocorrectStates",
        "resolved": "\"off\" | \"on\"",
        "references": {
          "IcAutocorrectStates": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcAutocorrectStates"
          }
        }
      },
      "mutable": false,
      "attr": "autocorrect",
      "reflectToAttr": false,
      "docs": "The state of autocorrection the browser can apply when the user is entering/editing the text value.",
      "docsTags": [],
      "default": "\"off\"",
      "values": [
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the disabled state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "Specify whether the text field fills the full width of the container.\nIf `true`, this overrides the --input-width CSS variable.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "The helper text that will be displayed for additional field guidance.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hideLabel",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "hide-label",
      "reflectToAttr": false,
      "docs": "If `true`, the label will be hidden and the required label value will be applied as an aria-label.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "inputId",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "input-id",
      "reflectToAttr": false,
      "docs": "The ID for the input.",
      "docsTags": [],
      "default": "`ic-text-field-input-${inputIds++}`",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inputmode",
      "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
      "complexType": {
        "original": "IcTextFieldInputModes",
        "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
        "references": {
          "IcTextFieldInputModes": {
            "location": "import",
            "path": "./ic-text-field.types",
            "id": "src/components/ic-text-field/ic-text-field.types.ts::IcTextFieldInputModes"
          }
        }
      },
      "mutable": false,
      "attr": "inputmode",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
      "docsTags": [],
      "default": "\"text\"",
      "values": [
        {
          "value": "decimal",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "value": "numeric",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label for the input.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "max",
      "type": "number | string",
      "complexType": {
        "original": "string | number",
        "resolved": "number | string",
        "references": {}
      },
      "mutable": false,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "The maximum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of max value in `helperText` or `label`)",
      "docsTags": [],
      "default": "undefined",
      "values": [
        {
          "type": "number"
        },
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "maxCharacters",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max-characters",
      "reflectToAttr": false,
      "docs": "The maximum number of characters that can be entered in the field. Will display an error if too many characters are entered.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "maxLength",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max-length",
      "reflectToAttr": false,
      "docs": "The count of characters in the field. Will display a warning if the bound is reached.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "maxLengthMessage",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "max-length-message",
      "reflectToAttr": false,
      "docs": "The text to display as the validation message when the maximum length is exceeded.",
      "docsTags": [],
      "default": "\"Maximum length exceeded\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "min",
      "type": "number | string",
      "complexType": {
        "original": "string | number",
        "resolved": "number | string",
        "references": {}
      },
      "mutable": false,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "The minimum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of min value in `helperText` or `label`)",
      "docsTags": [],
      "default": "undefined",
      "values": [
        {
          "type": "number"
        },
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "minCharacters",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "min-characters",
      "reflectToAttr": false,
      "docs": "The minimum number of characters that can be entered in the field.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "The placeholder value to be displayed.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": true,
      "docs": "If `true`, the read only state will be set.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the input will require a value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "resize",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "resize",
      "reflectToAttr": false,
      "docs": "If `true`, the multiline text area will be resizeable.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "rows",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "rows",
      "reflectToAttr": false,
      "docs": "The number of rows to transform the text field into a text area with a specific height.",
      "docsTags": [],
      "default": "1",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"small\"",
      "complexType": {
        "original": "IcSizesNoLarge",
        "resolved": "\"default\" | \"small\"",
        "references": {
          "IcSizesNoLarge": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizesNoLarge"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the text field component.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "small",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "small",
      "reflectToAttr": false,
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "This prop should not be used anymore. Set prop `size` to \"small\" instead."
        }
      ],
      "default": "false",
      "deprecation": "This prop should not be used anymore. Set prop `size` to \"small\" instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "spellcheck",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "spellcheck",
      "reflectToAttr": false,
      "docs": "If `true`, the value of the text field will have its spelling and grammar checked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "type",
      "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
      "complexType": {
        "original": "IcTextFieldTypes",
        "resolved": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
        "references": {
          "IcTextFieldTypes": {
            "location": "import",
            "path": "./ic-text-field.types",
            "id": "src/components/ic-text-field/ic-text-field.types.ts::IcTextFieldTypes"
          }
        }
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of control to display. The default type is text.",
      "docsTags": [],
      "default": "\"text\"",
      "values": [
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "number",
          "type": "string"
        },
        {
          "value": "password",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "validationInline",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-inline",
      "reflectToAttr": false,
      "docs": "If `true`, the icon in input control will be displayed - only applies when validationStatus ='success'.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "validationStatus",
      "type": "\"\" | \"error\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcInformationStatusOrEmpty",
        "resolved": "\"\" | \"error\" | \"success\" | \"warning\"",
        "references": {
          "IcInformationStatusOrEmpty": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcInformationStatusOrEmpty"
          }
        }
      },
      "mutable": false,
      "attr": "validation-status",
      "reflectToAttr": false,
      "docs": "The validation state - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "\"\""
        },
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "validationText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "validation-text",
      "reflectToAttr": false,
      "docs": "The validation state - e.g. 'error' | 'warning' | 'success'.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": true,
      "docs": "The value of the text field.",
      "docsTags": [],
      "default": "\"\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "icon",
      "docs": "Content will be placed to the left of the text input."
    }
  ],
  "styles": [
    {
      "name": "--input-width",
      "annotation": "prop",
      "docs": "Width of the input field"
    }
  ],
  "events": [
    {
      "event": "icBlur",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when input loses focus.",
      "docsTags": []
    },
    {
      "event": "icChange",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value has changed.",
      "docsTags": []
    },
    {
      "event": "icFocus",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when input gains focus.",
      "docsTags": []
    },
    {
      "event": "icInput",
      "detail": "IcValueEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcValueEventDetail",
        "resolved": "IcValueEventDetail",
        "references": {
          "IcValueEventDetail": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcValueEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a keyboard input occurred.",
      "docsTags": []
    },
    {
      "event": "icKeydown",
      "detail": "{ event: KeyboardEvent; }",
      "bubbles": true,
      "complexType": {
        "original": "{ event: KeyboardEvent }",
        "resolved": "{ event: KeyboardEvent; }",
        "references": {
          "KeyboardEvent": {
            "location": "global",
            "id": "global::KeyboardEvent"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a keydown event occurred.",
      "docsTags": []
    }
  ],
  "methods": [
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `input`.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "keydown",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### With icon, value and max length

export const snippetsIconValueMaxLength = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field 
  max-length="25" 
  value="Arabica" 
  label="What is your favourite coffee?" 
  required="true" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica" 
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
  </svg>
</ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField 
  maxLength={25} 
  value="Arabica" 
  label="What is your favourite coffee?" 
  required 
  placeholder="Please enter…" 
  helperText="Such as Arabica, Robusta or Liberica"
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
  </SlottedSVG>
</IcTextField>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIconValueMaxLength}>
  <IcTextField
    maxLength={25}
    value="Arabica"
    label="What is your favourite coffee?"
    required
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z" />
    </svg>
  </IcTextField>
</ComponentPreview>

### Disabled

export const snippetsDisabled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field
  label="What is your favourite coffee?"
  required="true"
  placeholder="Please enter…"
  disabled="true"
>
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0z" fill="none" />
    <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z" />
  </svg>
</ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField
  label="What is your favourite coffee?"
  required
  placeholder="Please enter…"
  disabled
>
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="#000000"
  >
    <path d="M0 0h24v24H0z" fill="none" />
    <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z" />
  </SlottedSVG>
</IcTextField>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDisabled}>
  <IcTextField
    label="What is your favourite coffee?"
    required
    placeholder="Please enter…"
    disabled
  >
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0z" fill="none" />
      <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z" />
    </svg>
  </IcTextField>
</ComponentPreview>

### Size small

export const snippetsSmall = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field 
  label="What is your favourite coffee?" 
  placeholder="Please enter…" 
  size="small"
></ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>
  <script>
    const textField = document.querySelector('ic-text-field');
    textfield.addEventListenter('icChange', (ev) => console.log(ev.detail.value));
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField 
  label="What is your favourite coffee?" 
  placeholder="Please enter…" 
  size="small"
  onIcChange={(ev) => console.log(ev.detail.value)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsSmall}>
  <IcTextField
    label="What is your favourite coffee?"
    placeholder="Please enter…"
    size="small"
    onIcChange={(ev) => console.log(ev.detail.value)}
  />
</ComponentPreview>

### Validation

export const snippetsValidation = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field 
  validation-status="success" 
  validation-text="Good choice!" 
  value="Arabica" max-length="25" 
  label="What is your favourite coffee?" 
  required="true" placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica"
></ic-text-field>
<ic-text-field 
  validation-status="success" 
  validation-text="Good choice!" 
  validation-inline="true" 
  value="Arabica" 
  max-length="25" 
  label="What is your favourite coffee?" 
  required="true" placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica"
></ic-text-field>
<ic-text-field 
  validation-status="warning" 
  validation-text="There’s only a few left! Order now to avoid missing out." 
  value="Arabica"
  max-length="25" 
  label="What is your favourite coffee?" 
  required="true" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica"
></ic-text-field>
<ic-text-field 
  validation-status="error" 
  validation-text="now it has really gone to (coffee) pot" 
  value="Tea" 
  max-length="25" 
  label="What is your favourite coffee?" 
  required="true" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica"
></ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField
  maxLength={25}
  value="Arabica"
  label="What is your favourite coffee?"
  required
  placeholder="Please enter…"
  helperText="Such as Arabica, Robusta or Liberica"
  validationStatus="success"
  validationText="Good choice!"
/>
<IcTextField
  maxLength={25}
  value="Arabica"
  label="What is your favourite coffee?"
  required
  placeholder="Please enter…"
  helperText="Such as Arabica, Robusta or Liberica"
  validationStatus="success"
  validationText="Good choice!"
  validationInline
/>
<IcTextField
  maxLength={25}
  value="Arabica"
  label="What is your favourite coffee?"
  required
  placeholder="Please enter…"
  helperText="Such as Arabica, Robusta or Liberica"
  validationStatus="warning"
  validationText="There’s only a few left! Order now to avoid missing out."
/>
<IcTextField
  maxLength={25}
  value="Tea"
  label="What is your favourite coffee?"
  required
  placeholder="Please enter…"
  helperText="Such as Arabica, Robusta or Liberica"
  validationStatus="error"
  validationText="Now it has really gone to (coffee) pot"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsValidation}>
  <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
    <IcTextField
      maxLength={25}
      value="Arabica"
      label="What is your favourite coffee?"
      required
      placeholder="Please enter…"
      helperText="Such as Arabica, Robusta or Liberica"
      validationStatus="success"
      validationText="Good choice!"
    />
    <IcTextField
      maxLength={25}
      value="Arabica"
      label="What is your favourite coffee?"
      required
      placeholder="Please enter…"
      helperText="Such as Arabica, Robusta or Liberica"
      validationStatus="success"
      validationText="Good choice!"
      validationInline
    />
    <IcTextField
      maxLength={25}
      value="Arabica"
      label="What is your favourite coffee?"
      required
      placeholder="Please enter…"
      helperText="Such as Arabica, Robusta or Liberica"
      validationStatus="warning"
      validationText="There’s only a few left! Order now to avoid missing out."
    />
    <IcTextField
      maxLength={25}
      value="Tea"
      label="What is your favourite coffee?"
      required
      placeholder="Please enter…"
      helperText="Such as Arabica, Robusta or Liberica"
      validationStatus="error"
      validationText="Now it has really gone to (coffee) pot"
    />
  </div>
</ComponentPreview>

### With min and max values

In this example, an error message will display when the input is either below the min value or above the max value. This only affects numeric input fields.

export const snippetsMinMax = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field
  label="How many coffees do you want?"
  helper-text="Our coffee machines have a maximum capacity of 4 coffees at a time."
  placeholder="Please enter…" 
  type="number"
  inputmode="numeric"
  min="1"
  max="4"
  value="6"
></ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField
  label="How many coffees do you want?"
  helperText="Our coffee machines have a maximum capacity of 4 coffees at a time."
  placeholder="Please enter…" 
  type="number"
  inputmode="numeric"
  min={1}
  max={4}
  value="6"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsMinMax}>
  <IcTextField
    label="How many coffees do you want?"
    helperText="Our coffee machines have a maximum capacity of 4 coffees at a time."
    placeholder="Please enter…"
    type="number"
    inputmode="numeric"
    min="1"
    max="4"
    value="6"
  />
</ComponentPreview>

### Text area with resize

export const snippetsTextArea = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field 
  rows="6"
  resize="true" 
  label="What is your favourite coffee?" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica"
></ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField 
  rows={6} 
  resize 
  label="What is your favourite coffee?" 
  placeholder="Please enter…" 
  helperText="Such as Arabica, Robusta or Liberica"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsTextArea}>
  <IcTextField
    rows={6}
    resize
    label="What is your favourite coffee?"
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
  />
</ComponentPreview>

### Full width

export const snippetsFullWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field  
  label="What is your favourite coffee?" 
  required="true" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica" 
  full-width="true"
></ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField
  label="What is your favourite coffee?" 
  required 
  placeholder="Please enter…" 
  helperText="Such as Arabica, Robusta or Liberica"
  fullWidth
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsFullWidth}>
  <IcTextField
    label="What is your favourite coffee?"
    required
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
    fullWidth
  />
</ComponentPreview>

### Custom width

export const snippetsCustomWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-text-field  
  style="--input-width:25.25rem"
  label="What is your favourite coffee?" 
  required="true" 
  placeholder="Please enter…" 
  helper-text="Such as Arabica, Robusta or Liberica" 
> </ic-text-field>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTextField
  style={{ "--input-width": "25.25rem" }}
  label="What is your favourite coffee?" 
  required 
  placeholder="Please enter…" 
  helperText="Such as Arabica, Robusta or Liberica"
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsCustomWidth}>
  <IcTextField
    style={{ "--input-width": "25.25rem" }}
    label="What is your favourite coffee?"
    required
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
  />
</ComponentPreview>

---

# Toast

URL: https://design.sis.gov.uk/components/toast/code
Status: BETA
Subtitle: Toasts give brief, non-critical updates about events that happen in an app. Toasts are sometimes called 'snackbars'.


import {
  IcToast,
  IcToastRegion,
  IcButton,
  IcLink,
  SlottedSVG,
} from "@ukic/react";
import { useRef } from "react";

export const defaultSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="displayToast()">Display toast</ic-button>
<ic-toast-region>
  <ic-toast id="toast-01" heading="Your coffee is ready"></ic-toast>
</ic-toast-region>`,
      long: `{shortCode}
<script>
  const toastRegion = document.querySelector("ic-toast-region");
  function displayToast() {
    var toast = document.querySelector("#toast-01");
    toastRegion.openToast = toast;
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleClick}>Display toast component</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast heading='Your coffee is ready' ref={toastEl} />
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const toastEl = useRef<HTMLIcToastElement | null>(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const toastEl = useRef(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

## Component demo

export const DefaultToast = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  return (
    <>
      <IcButton onClick={handleClick}>Display toast component</IcButton>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast heading="Your coffee is ready" ref={toastEl} />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={defaultSnippet}>
  <DefaultToast />
</ComponentPreview>

## Toast region details

{
  "props": [
    {
      "name": "openToast",
      "type": "HTMLIcToastElement",
      "complexType": {
        "original": "HTMLIcToastElement",
        "resolved": "HTMLIcToastElement",
        "references": {
          "HTMLIcToastElement": {
            "location": "global",
            "id": "global::HTMLIcToastElement"
          }
        }
      },
      "mutable": true,
      "reflectToAttr": false,
      "docs": "The toast element to be displayed.",
      "docsTags": [],
      "values": [
        {
          "type": "HTMLIcToastElement"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [
    {
      "name": "setVisible",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(toast: HTMLIcToastElement) => Promise<void>",
        "parameters": [
          {
            "name": "toast",
            "type": "HTMLIcToastElement",
            "docs": "The toast component to display"
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLIcToastElement": {
            "location": "global",
            "id": "global::HTMLIcToastElement"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setVisible(toast: HTMLIcToastElement) => Promise<void>",
      "parameters": [
        {
          "name": "toast",
          "type": "HTMLIcToastElement",
          "docs": "The toast component to display"
        }
      ],
      "docs": "",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use openToast prop to display toast instead."
        },
        {
          "name": "param",
          "text": "toast The toast component to display"
        }
      ],
      "deprecation": "Use openToast prop to display toast instead."
    }
  ],
  "listeners": [
    {
      "event": "icDismiss",
      "capture": true,
      "passive": false
    }
  ]
}


## Toast details

{
  "props": [
    {
      "name": "autoDismissTimeout",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": true,
      "attr": "auto-dismiss-timeout",
      "reflectToAttr": false,
      "docs": "If toast dismissMode is set to `automatic`, use this prop to define the time before the toast dismisses (in MILLISECONDS)\n(NOTE: Has a minimum value of `5000ms`)",
      "docsTags": [],
      "default": "5000",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dismissButtonAriaLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "dismiss-button-aria-label",
      "reflectToAttr": false,
      "docs": "If toast can be manually dismissed, this prop sets a custom aria-label for the ic-button component",
      "docsTags": [],
      "default": "\"dismiss\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dismissMode",
      "type": "\"automatic\" | \"manual\"",
      "complexType": {
        "original": "IcActivationTypes",
        "resolved": "\"automatic\" | \"manual\"",
        "references": {
          "IcActivationTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcActivationTypes"
          }
        }
      },
      "mutable": true,
      "attr": "dismiss-mode",
      "reflectToAttr": false,
      "docs": "How the toast will be dismissed. If manual will display a dismiss button.",
      "docsTags": [],
      "default": "\"manual\"",
      "values": [
        {
          "value": "automatic",
          "type": "string"
        },
        {
          "value": "manual",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "heading",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "heading",
      "reflectToAttr": false,
      "docs": "The title to display at the start of the toast. (NOTE: Should be no more than `70` characters)",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "message",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "The main body message of the toast. (NOTE: Should be no more than `140` characters)",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "neutralIconAriaLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "neutral-icon-aria-label",
      "reflectToAttr": false,
      "docs": "Provides a custom alt-text to be announced to screen readers, if slotting a custom neutral icon",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"error\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
      "complexType": {
        "original": "IcStatusVariants",
        "resolved": "\"error\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
        "references": {
          "IcStatusVariants": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcStatusVariants"
          }
        }
      },
      "mutable": true,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The variant of the toast being rendered",
      "docsTags": [],
      "values": [
        {
          "value": "error",
          "type": "string"
        },
        {
          "value": "info",
          "type": "string"
        },
        {
          "value": "neutral",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "action",
      "docs": "IcButton or IcLink is placed below header and message. If used will default toast to manual `dismiss` type."
    },
    {
      "name": "neutral-icon",
      "docs": "A custom neutral icon is placed on the left side of the component. If used will default toast to `neutral` variant."
    }
  ],
  "styles": [
    {
      "name": "--ic-z-index-toast",
      "annotation": "prop",
      "docs": "z-index of toast"
    }
  ],
  "events": [
    {
      "event": "icDismiss",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Is emitted when the user dismisses the toast",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "icDismiss",
      "capture": true,
      "passive": false
    },
    {
      "event": "keydown",
      "target": "document",
      "capture": false,
      "passive": false
    },
    {
      "event": "mouseenter",
      "capture": false,
      "passive": true
    },
    {
      "event": "mouseleave",
      "capture": false,
      "passive": true
    }
  ]
}


## Variants

### Displaying toasts

Use the `openToast` prop on the toast region component to display a toast message. Do not use the `setVisible` method on the toast component as this does not work with the toast queuing functionality.

### Queuing toasts

To view the toasts queuing in the following example, click each button to open a toast and then the dismiss button on the visible toast. Each toast will appear one after the other.

export const queuingSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="handleClick()">Display default toast</ic-button>
<ic-button onclick="handleErrorClick()">Display error toast</ic-button>
<ic-button onclick="handleAutoDismissClick()">Display auto dismiss toast</ic-button>
<ic-toast-region>
  <ic-toast id="toast-01" heading="Your coffee is ready"></ic-toast>
  <ic-toast id="toast-02" heading="There is no coffee left" variant="error"></ic-toast>
  <ic-toast id="toast-03" heading="Your coffee is ready" dismiss-mode="automatic" auto-dismiss-timeout="10000"></ic-toast>
</ic-toast-region>`,
      long: `.btn-container {
    display: flex;
    gap: var(--ic-space-xs);
    flex-wrap: wrap;
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="btn-container">
    <ic-button onclick="handleClick()">Display default toast</ic-button>
    <ic-button onclick="handleErrorClick()">Display error toast</ic-button>
    <ic-button onclick="handleAutoDismissClick()">Display auto dismiss toast</ic-button>
  </div>
  <ic-toast-region>
    <ic-toast id="toast-01" heading="Your coffee is ready"></ic-toast>
    <ic-toast id="toast-02" heading="There is no coffee left" variant="error"></ic-toast>
    <ic-toast id="toast-03" heading="Your coffee is ready" dismiss-mode="automatic" auto-dismiss-timeout="10000"></ic-toast>
  </ic-toast-region>
  <script>
    const toastRegion = document.querySelector("ic-toast-region");
    function handleClick() {
      var toast = document.querySelector("#toast-01");
      toastRegion.openToast = toast;
    }
    function handleErrorClick() {
      var toast = document.querySelector("#toast-02");
      toastRegion.openToast = toast;
    }
    function handleAutoDismissClick() {
      var toast = document.querySelector("#toast-03");
      toastRegion.openToast = toast;
    }
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleClick}>Display default toast</IcButton>
<IcButton onClick={handleErrorClick}>Display error toast</IcButton>
<IcButton onClick={handleAutoDismissClick}>
  Display auto dismiss toast
</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast heading="Your coffee is ready" ref={toastEl} />
  <IcToast
    heading="There is no coffee left"
    variant="error"
    ref={errorToastEl}
  />
  <IcToast
    heading="Your coffee is ready"
    dismissMode="automatic"
    autoDismissTimeout={10000}
    ref={autoDismissToastEl}
  />
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const toastEl = useRef<HTMLIcToastElement | null>(null);
const errorToastEl = useRef<HTMLIcToastElement | null>(null);
const autoDismissToastEl = useRef<HTMLIcToastElement | null>(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
const handleErrorClick = () => {
  if (toastRegionEl.current && errorToastEl.current) {
    toastRegionEl.current.openToast = errorToastEl.current;
  }
};
const handleAutoDismissClick = () => {
  if (toastRegionEl.current && autoDismissToastEl.current) {
    toastRegionEl.current.openToast = autoDismissToastEl.current;
  }
};
const useStyles = createUseStyles({
  btnContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <>
    <div className={classes.btnContainer}>
      <IcButton onClick={handleClick}>Display default toast</IcButton>
      <IcButton onClick={handleErrorClick}>Display error toast</IcButton>
      <IcButton onClick={handleAutoDismissClick}>
        Display auto dismiss toast
      </IcButton>
    </div>
    <IcToastRegion ref={toastRegionEl}>
      <IcToast heading="Your coffee is ready" ref={toastEl} />
      <IcToast
        heading="There is no coffee left"
        variant="error"
        ref={errorToastEl}
      />
      <IcToast
        heading="Your coffee is ready"
        dismissMode="automatic"
        autoDismissTimeout={10000}
        ref={autoDismissToastEl}
      />
    </IcToastRegion>
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const toastEl = useRef(null);
const errorToastEl = useRef(null);
const autoDismissToastEl = useRef(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
const handleErrorClick = () => {
  if (toastRegionEl.current && errorToastEl.current) {
    toastRegionEl.current.openToast = errorToastEl.current;
  }
};
const handleAutoDismissClick = () => {
  if (toastRegionEl.current && autoDismissToastEl.current) {
    toastRegionEl.current.openToast = autoDismissToastEl.current;
  }
};
const useStyles = createUseStyles({
  btnContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <>
    <div className={classes.btnContainer}>
      <IcButton onClick={handleClick}>Display default toast</IcButton>
      <IcButton onClick={handleErrorClick}>Display error toast</IcButton>
      <IcButton onClick={handleAutoDismissClick}>
        Display auto dismiss toast
      </IcButton>
    </div>
    <IcToastRegion ref={toastRegionEl}>
      <IcToast heading="Your coffee is ready" ref={toastEl} />
      <IcToast
        heading="There is no coffee left"
        variant="error"
        ref={errorToastEl}
      />
      <IcToast
        heading="Your coffee is ready"
        dismissMode="automatic"
        autoDismissTimeout={10000}
        ref={autoDismissToastEl}
      />
    </IcToastRegion>
  </>
)`,
        },
      ],
    },
  },
];

export const QueuingToast = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const errorToastEl = useRef(null);
  const autoDismissToastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  const handleErrorClick = () => {
    toastRegionEl.current.openToast = errorToastEl.current;
  };
  const handleAutoDismissClick = () => {
    toastRegionEl.current.openToast = autoDismissToastEl.current;
  };
  return (
    <>
      <div style={{ display: "flex", gap: "0.5rem" }}>
        <IcButton onClick={handleClick}>Display default toast</IcButton>
        <IcButton onClick={handleErrorClick}>Display error toast</IcButton>
        <IcButton onClick={handleAutoDismissClick}>
          Display auto dismiss toast
        </IcButton>
      </div>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast heading="Your coffee is ready" ref={toastEl} />
        <IcToast
          heading="There is no coffee left"
          variant="error"
          ref={errorToastEl}
        />
        <IcToast
          heading="Your coffee is ready"
          dismissMode="automatic"
          autoDismissTimeout={10000}
          ref={autoDismissToastEl}
        />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={queuingSnippet}>
  <QueuingToast />
</ComponentPreview>

### Status variant

export const withVariantSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="displayToast()">Display success toast</ic-button>
<ic-toast-region>
  <ic-toast variant="success" id="toast-02" heading="Your coffee is ready" message="Please dismiss and collect"></ic-toast>
</ic-toast-region>`,
      long: `{shortCode}
<script>
  const toastRegion = document.querySelector("ic-toast-region");
  function displayToast() {
    const successToast = document.querySelector("#toast-02");
    toastRegion.openToast = successToast;
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleClick}>Display success toast</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast
    heading='Your coffee is ready'
    ref={toastEl}
    message='Please dismiss and collect'
    variant='success'
  />
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const toastEl = useRef<HTMLIcToastElement | null>(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const toastEl = useRef(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const WithVariantToast = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  return (
    <>
      <IcButton onClick={handleClick}>Display success toast</IcButton>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast
          heading="Your coffee is ready"
          ref={toastEl}
          message="Please dismiss and collect"
          variant="success"
        />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={withVariantSnippet}>
  <WithVariantToast />
</ComponentPreview>

### Multi-line

export const withMultilineSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="displayToast()">Display multi-line toast</ic-button>
<ic-toast-region>
  <ic-toast id="toast-03" heading="Your coffee is ready" message="Please dismiss and come to collect your delicious coffee from the barista right away before it gets cold."></ic-toast>
</ic-toast-region>`,
      long: `{shortCode}
<script>
  const toastRegion = document.querySelector("ic-toast-region");
  function displayToast() {
    const multilineToast = document.querySelector("#toast-03");
    toastRegion.openToast = multilineToast;
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleClick}>Display multi-line toast</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast
    heading='Your coffee is ready'
    ref={toastEl}
    message='Please dismiss and come to collect your delicious coffee from the barista right away before it gets cold.'
  />
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const toastEl = useRef<HTMLIcToastElement | null>(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const toastEl = useRef(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const MultilineToast = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  return (
    <>
      <IcButton onClick={handleClick}>Display multi-line toast</IcButton>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast
          heading="Your coffee is ready"
          ref={toastEl}
          message="Please dismiss and come to collect your delicious coffee from the barista right away before it gets cold."
        />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={withMultilineSnippet}>
  <MultilineToast />
</ComponentPreview>

### Slotted 'action' toast

export const slottedActionsSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="displayButtonToast()">Display slotted buttons toast</ic-button>
<ic-button onclick="displayLinkToast()">Display slotted buttons toast</ic-button>
<ic-toast-region>
  <ic-toast id="toast-04" heading="Your order could not be placed" message="Please try again" variant='warning'>
    <ic-button slot='action' appearance='light'>Retry</ic-button>
  </ic-toast>
  <ic-toast id="toast-05" heading="Your order could not be placed" message="Please try again" variant='warning'>
    <ic-link slot='action' appearance='light'>Retry</ic-link>
  </ic-toast>
</ic-toast-region>`,
      long: `.btn-container {
    display: flex;
    gap: var(--ic-space-xs);
    flex-wrap: wrap;
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="btn-container">
    <ic-button onclick="displayButtonToast()"
      >Display slotted buttons toast</ic-button
    >
    <ic-button onclick="displayLinkToast()"
      >Display slotted buttons toast</ic-button
    >
  </div>
  <ic-toast-region>
    <ic-toast
      id="toast-04"
      heading="Your order could not be placed"
      message="Please try again"
      variant="warning"
    >
      <ic-button slot="action" appearance="light">Retry</ic-button>
    </ic-toast>
    <ic-toast
      id="toast-05"
      heading="Your order could not be placed"
      message="Please try again"
      variant="warning"
    >
      <ic-link slot="action" appearance="light">Retry</ic-link>
    </ic-toast>
  </ic-toast-region>
  <script>
    const toastRegion = document.querySelector("ic-toast-region");
    function displayButtonToast() {
      const slottedButtonToast = document.querySelector("#toast-04");
      toastRegion.openToast = slottedButtonToast;
    }
    function displayLinkToast() {
      const slottedLinkToast = document.querySelector("#toast-05");
      toastRegion.openToast = slottedLinkToast;
    }
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleButtonToastClick}>Display slotted button toast</IcButton>
<IcButton onClick={handleLinkToastClick}>Display slotted link toast</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast
    heading='Your order could not be placed'
    ref={buttonToastEl}
    message='Please try again'
    variant='warning'
  >
    <IcButton slot='action' appearance='light'>Retry</IcButton>
  </IcToast>
  <IcToast
    heading='Your order could not be placed'
    ref={linkToastEl}
    message='Please try again'
    variant='warning'
  >
    <IcLink href="#" slot="action" appearance="light">Retry</IcLink>
  </IcToast>
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const buttonToastEl = useRef<HTMLIcToastElement | null>(null);
const linkToastEl = useRef<HTMLIcToastElement | null>(null);
const handleButtonToastClick = () => {
  if (toastRegionEl.current && buttonToastEl.current) {
    toastRegionEl.current.openToast = buttonToastEl.current;
  }
};
const handleLinkToastClick = () => {
  if (toastRegionEl.current && linkToastEl.current) {
    toastRegionEl.current.openToast = linkToastEl.current;
  }
};
const useStyles = createUseStyles({
  btnContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <>
    <div className={classes.btnContainer}>
      <IcButton onClick={handleButtonToastClick}>
        Display slotted button toast
      </IcButton>
      <IcButton onClick={handleLinkToastClick}>
        Display slotted link toast
      </IcButton>
    </div>
    <IcToastRegion ref={toastRegionEl}>
      <IcToast
        heading="Your order could not be placed"
        ref={buttonToastEl}
        message="Please try again"
        variant="warning"
      >
        <IcButton slot="action" appearance="light">
          Retry
        </IcButton>
      </IcToast>
      <IcToast
        heading="Your order could not be placed"
        ref={linkToastEl}
        message="Please try again"
        variant="warning"
      >
        <IcLink href="#" slot="action" appearance="light">
          Retry
        </IcLink>
      </IcToast>
    </IcToastRegion>
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const buttonToastEl = useRef(null);
const linkToastEl = useRef(null);
const handleButtonToastClick = () => {
  if (toastRegionEl.current && buttonToastEl.current) {
    toastRegionEl.current.openToast = buttonToastEl.current;
  }
};
const handleLinkToastClick = () => {
  if (toastRegionEl.current && linkToastEl.current) {
    toastRegionEl.current.openToast = linkToastEl.current;
  }
};
const useStyles = createUseStyles({
  btnContainer: {
    display: "flex",
    flexWrap: "wrap",
    gap: "var(--ic-space-xs)",
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <>
    <div className={classes.btnContainer}>
      <IcButton onClick={handleButtonToastClick}>
        Display slotted button toast
      </IcButton>
      <IcButton onClick={handleLinkToastClick}>
        Display slotted link toast
      </IcButton>
    </div>
    <IcToastRegion ref={toastRegionEl}>
      <IcToast
        heading="Your order could not be placed"
        ref={buttonToastEl}
        message="Please try again"
        variant="warning"
      >
        <IcButton slot="action" appearance="light">
          Retry
        </IcButton>
      </IcToast>
      <IcToast
        heading="Your order could not be placed"
        ref={linkToastEl}
        message="Please try again"
        variant="warning"
      >
        <IcLink href="#" slot="action" appearance="light">
          Retry
        </IcLink>
      </IcToast>
    </IcToastRegion>
  </>
)`,
        },
      ],
    },
  },
];

export const SlottedActionsToast = () => {
  const toastRegionEl = useRef(null);
  const buttonToastEl = useRef(null);
  const linkToastEl = useRef(null);
  const handleButtonToastClick = () => {
    toastRegionEl.current.openToast = buttonToastEl.current;
  };
  const handleLinkToastClick = () => {
    toastRegionEl.current.openToast = linkToastEl.current;
  };
  return (
    <>
      <div style={{ display: "flex", gap: "0.5rem" }}>
        <IcButton onClick={handleButtonToastClick}>
          Display slotted button toast
        </IcButton>
        <IcButton onClick={handleLinkToastClick}>
          Display slotted link toast
        </IcButton>
      </div>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast
          heading="Your order could not be placed"
          ref={buttonToastEl}
          message="Please try again"
          variant="warning"
        >
          <IcButton slot="action" appearance="light">
            Retry
          </IcButton>
        </IcToast>
        <IcToast
          heading="Your order could not be placed"
          ref={linkToastEl}
          message="Please try again"
          variant="warning"
        >
          <IcLink href="#" slot="action" appearance="light">
            Retry
          </IcLink>
        </IcToast>
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={slottedActionsSnippet}>
  <SlottedActionsToast />
</ComponentPreview>

### Auto-dismiss

export const autoDismissSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="displayToast()">Display auto-dismiss toast</ic-button>
<ic-toast-region>
  <ic-toast
    id="toast-06"
    heading="Your coffee is ready"
    dismiss-mode="automatic"
    auto-dismiss-timeout="10000"
    variant="info"
  ></ic-toast>
</ic-toast-region>`,
      long: `{shortCode}
<script>
  const toastRegion = document.querySelector("ic-toast-region");
  function displayToast() {
    var toast = document.querySelector("#toast-06");
    toastRegion.openToast = toast;
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleClick}>Display auto-dismiss toast</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast
    heading="Your coffee is ready"
    ref={toastEl}
    dismissMode="automatic"
    autoDismissTimeout={10000}
    variant="info"
  />
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const toastEl = useRef<HTMLIcToastElement | null>(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const toastEl = useRef(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const AutoDismissToast = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  return (
    <>
      <IcButton onClick={handleClick}>Display auto-dismiss toast</IcButton>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast
          heading="Your coffee is ready"
          ref={toastEl}
          dismissMode="automatic"
          autoDismissTimeout={10000}
          variant="info"
        />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={autoDismissSnippet}>
  <AutoDismissToast />
</ComponentPreview>

### Custom neutral icon and aria-labels

export const customIconAriaLabelsSnippet = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button onclick="displayToast()">Display auto-dismiss toast</ic-button>
<ic-toast-region>
  <ic-toast
    id="toast-07"
    heading="Your coffee is ready"
    variant="neutral"
    neutral-icon-aria-label="It is time to collect your coffee"
    dismiss-button-aria-label="Dismiss me"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      slot="neutral-icon"
      viewBox="0 0 24 24"
    >
      <title>coffee-outline</title>
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toast>
</ic-toast-region>`,
      long: `{shortCode}
<script>
  const toastRegion = document.querySelector("ic-toast-region");
  function displayToast() {
    var toast = document.querySelector("#toast-07");
    toastRegion.openToast = toast;
  }
</script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleClick}>
  Display custom icon and aria-label toast
</IcButton>
<IcToastRegion ref={toastRegionEl}>
  <IcToast
    heading="Your coffee is ready"
    ref={toastEl}
    variant="neutral"
    neutralIconAriaLabel="It is time to collect your coffee"
    dismissButtonAriaLabel="Dismiss me"
  >
    <SlottedSVG slot="neutral-icon">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToast>
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const toastRegionEl = useRef<HTMLIcToastRegionElement | null>(null);
const toastEl = useRef<HTMLIcToastElement | null>(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
        {
          language: "Javascript",
          snippet: `const toastRegionEl = useRef(null);
const toastEl = useRef(null);
const handleClick = () => {
  if (toastRegionEl.current && toastEl.current) {
    toastRegionEl.current.openToast = toastEl.current;
  }
};
return (
  <>
    {shortCode}
  </>
)`,
        },
      ],
    },
  },
];

export const CustomIconAriaLabels = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  return (
    <>
      <IcButton onClick={handleClick}>
        Display custom icon and aria-labels toast
      </IcButton>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast
          heading="Your coffee is ready"
          ref={toastEl}
          variant="neutral"
          neutralIconAriaLabel="It is time to collect your coffee"
          dismissButtonAriaLabel="Dismiss me"
        >
          <SlottedSVG slot="neutral-icon">
            <title>coffee-outline</title>
            <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
          </SlottedSVG>
        </IcToast>
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={customIconAriaLabelsSnippet}>
  <CustomIconAriaLabels />
</ComponentPreview>

### Toast usage without useRef

export const toastWithoutRefsSnippet = [
  {
    technology: "React",
    snippets: {
      short: `
<IcToastRegion>
  <IcToast
    heading="Your coffee is ready"
  />
</IcToastRegion>`,
      long: [
        {
          language: "Typescript",
          snippet: `const handleClick = () => {
    const toastRegion = document.querySelector(
      "ic-toast-region",
    );
    const toastElement = document.getElementById("toast");
    if (toastRegion && toastElement) {
      toastRegion.openToast = toastElement;
    }
  };
  useEffect(() => {
    handleClick();
  }, []);
  return (
    <>
      <IcButton onClick={handleClick}>Display toast</IcButton>
      <IcToastRegion>
        <IcToast heading="Your coffee is ready" id="toast" />
      </IcToastRegion>
    </>
  );`,
        },
        {
          language: "Javascript",
          snippet: `const handleClick = () => {
    const toastRegion = document.querySelector(
      "ic-toast-region",
    );
    const toastElement = document.getElementById("toast");
    if (toastRegion && toastElement) {
      toastRegion.openToast = toastElement;
    }
  };
  useEffect(() => {
    handleClick();
  }, []);
  return (
    <>
      <IcButton onClick={handleClick}>Display toast</IcButton>
      <IcToastRegion>
        <IcToast heading="Your coffee is ready" id="toast" />
      </IcToastRegion>
    </>
  );`,
        },
      ],
    },
  },
];

export const ToastComponentWithoutRefs = () => {
  const handleClick = () => {
    const toastRegion = document.querySelector("ic-toast-region");
    const toastElement = document.getElementById("toast");
    if (toastRegion && toastElement) {
      toastRegion.openToast = toastElement;
    }
  };
  return (
    <>
      <IcButton onClick={handleClick}>Display toast</IcButton>
      <IcToastRegion>
        <IcToast heading="Your coffee is ready" id="toast" />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview snippets={toastWithoutRefsSnippet}>
  <ToastComponentWithoutRefs />
</ComponentPreview>

---

# Toggle button

URL: https://design.sis.gov.uk/components/toggle-button/code
Status: BETA
Subtitle: Toggle buttons provide an action capable of indicating a state. They are commonly used for turning settings either ‘on’ or ‘off’.


import {
  IcToggleButton,
  IcToggleButtonGroup,
  SlottedSVG,
  IcBadge,
} from "@ukic/react";

## Component demo

export const snippetsDefault = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button
  id="toggle-btn"
  label="Switch to oat milk"
></ic-toggle-button>`,
      long: `.toggle-btn-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="toggle-btn-container">
    {shortCode}
  </div>
  <script>
    const btn = document.querySelector('#toggle-btn');
    btn.addEventListener("icToggleChecked", function (event) {
      console.log(event.detail.checked);
    });
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton
  label="Switch to oat milk"
  onIcToggleChecked={(event) => console.log(event.detail.checked)}
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsDefault}>
  <IcToggleButton
    label="Switch to oat milk"
    onIcToggleChecked={(event) => console.log(event.detail.checked)}
  />
</ComponentPreview>

## Toggle button details

{
  "props": [
    {
      "name": "accessibleLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "accessible-label",
      "reflectToAttr": false,
      "docs": "The accessible label that will be applied to the toggle button. This is required for the icon variant of toggle buttons.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the toggle button.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle button will be in disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle button will fill the width of the container.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "iconPlacement",
      "type": "\"left\" | \"right\" | \"top\"",
      "complexType": {
        "original": "\"left\" | \"right\" | \"top\"",
        "resolved": "\"left\" | \"right\" | \"top\"",
        "references": {}
      },
      "mutable": false,
      "attr": "icon-placement",
      "reflectToAttr": false,
      "docs": "The placement of the icon in relation to the toggle button label.",
      "docsTags": [],
      "values": [
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The label to display in the toggle button. This is required for the default variant of toggle buttons.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle button will be in loading state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the toggle button to be displayed.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "toggleChecked",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "toggle-checked",
      "reflectToAttr": true,
      "docs": "If `true`, the toggle button will be in a checked state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "tooltipPlacement",
      "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
      "complexType": {
        "original": "IcButtonTooltipPlacement",
        "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
        "references": {
          "IcButtonTooltipPlacement": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcButtonTooltipPlacement"
          }
        }
      },
      "mutable": false,
      "attr": "tooltip-placement",
      "reflectToAttr": false,
      "docs": "The position of the tooltip in relation to the toggle button.",
      "docsTags": [],
      "default": "\"bottom\"",
      "values": [
        {
          "value": "bottom",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"default\" | \"icon\"",
      "complexType": {
        "original": "\"default\" | \"icon\"",
        "resolved": "\"default\" | \"icon\"",
        "references": {}
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": true,
      "docs": "The variant of the toggle button.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "icon",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [
    {
      "name": "badge",
      "docs": "Badge component overlaying the top right of the toggle button."
    },
    {
      "name": "icon",
      "docs": "Content will be displayed alongside the toggle button label."
    }
  ],
  "styles": [],
  "events": [
    {
      "event": "icToggleChecked",
      "detail": "{ checked: boolean; }",
      "bubbles": true,
      "complexType": {
        "original": "{\n    checked: boolean;\n  }",
        "resolved": "{ checked: boolean; }",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user clicks a toggle button.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "click",
      "capture": true,
      "passive": false
    }
  ]
}


## Toggle button group details

{
  "props": [
    {
      "name": "accessibleLabel",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "accessible-label",
      "reflectToAttr": false,
      "docs": "The accessible label of the toggle button group component to provide context for screen reader users.",
      "docsTags": [],
      "default": "\"Toggle button group\"",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "appearance",
      "type": "\"dark\" | \"default\" | \"light\"",
      "complexType": {
        "original": "IcThemeForeground",
        "resolved": "\"dark\" | \"default\" | \"light\"",
        "references": {
          "IcThemeForeground": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcThemeForeground"
          }
        }
      },
      "mutable": false,
      "attr": "appearance",
      "reflectToAttr": false,
      "docs": "The appearance of the toggle button group, e.g dark, or light.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle button group will be set to the disabled state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "full-width",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle button group will fill the width of the container.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "iconPlacement",
      "type": "\"left\" | \"right\" | \"top\"",
      "complexType": {
        "original": "\"left\" | \"right\" | \"top\"",
        "resolved": "\"left\" | \"right\" | \"top\"",
        "references": {}
      },
      "mutable": false,
      "attr": "icon-placement",
      "reflectToAttr": false,
      "docs": "The placement of the icons in relation to the toggle button labels.",
      "docsTags": [],
      "values": [
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "loading",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "loading",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle button group will be in loading state.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selectMethod",
      "type": "\"auto\" | \"manual\"",
      "complexType": {
        "original": "IcSelectMethodTypes",
        "resolved": "\"auto\" | \"manual\"",
        "references": {
          "IcSelectMethodTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSelectMethodTypes"
          }
        }
      },
      "mutable": true,
      "attr": "select-method",
      "reflectToAttr": false,
      "docs": "If `auto`, controls are toggled automatically when navigated to. If `manual`, the controls must be actioned to change their toggled state. The value of this prop is ignored if `selectType` is set to`multi`.",
      "docsTags": [],
      "default": "\"manual\"",
      "values": [
        {
          "value": "auto",
          "type": "string"
        },
        {
          "value": "manual",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "selectType",
      "type": "\"multi\" | \"single\"",
      "complexType": {
        "original": "IcSelectTypes",
        "resolved": "\"multi\" | \"single\"",
        "references": {
          "IcSelectTypes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSelectTypes"
          }
        }
      },
      "mutable": false,
      "attr": "select-type",
      "reflectToAttr": false,
      "docs": "Sets whether single or multiple options can be toggled. If `multi`, then the `selectMethod` is always `manual`.",
      "docsTags": [],
      "default": "\"single\"",
      "values": [
        {
          "value": "multi",
          "type": "string"
        },
        {
          "value": "single",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\"",
      "complexType": {
        "original": "IcSizes",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "IcSizes": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcSizes"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "The size of the toggle buttons to be displayed. This does not affect the font size of the accessible label.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "tooltipPlacement",
      "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
      "complexType": {
        "original": "IcButtonTooltipPlacement",
        "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
        "references": {
          "IcButtonTooltipPlacement": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcButtonTooltipPlacement"
          }
        }
      },
      "mutable": false,
      "attr": "tooltip-placement",
      "reflectToAttr": false,
      "docs": "The position of the tooltip in relation to the toggle buttons.",
      "docsTags": [],
      "default": "\"bottom\"",
      "values": [
        {
          "value": "bottom",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"default\" | \"icon\"",
      "complexType": {
        "original": "\"default\" | \"icon\"",
        "resolved": "\"default\" | \"icon\"",
        "references": {}
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": true,
      "docs": "The variant of the toggle button.",
      "docsTags": [],
      "default": "\"default\"",
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "icon",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [
    {
      "event": "icChange",
      "detail": "IcChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "IcChangeEventDetail",
        "resolved": "IcChangeEventDetail",
        "references": {
          "IcChangeEventDetail": {
            "location": "import",
            "path": "./ic-toggle-button-group.types",
            "id": "src/components/ic-toggle-button-group/ic-toggle-button-group.types.ts::IcChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a toggle button is selected.",
      "docsTags": []
    }
  ],
  "methods": [],
  "listeners": [
    {
      "event": "icToggleChecked",
      "capture": false,
      "passive": false
    }
  ]
}


## Variants

### Other states

export const snippetsOtherStates = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button
  label="Switch to oat milk"
  disabled="true"
></ic-toggle-button>
<ic-toggle-button
  label="Switch to oat milk"
  disabled="true"
  toggle-checked="true"
></ic-toggle-button>
<ic-toggle-button
  label="Switch to oat milk"
  loading="true"
></ic-toggle-button>
<ic-toggle-button
  label="Switch to oat milk"
  loading="true"
  toggle-checked="true"
></ic-toggle-button>`,
      long: `.toggle-btn-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="toggle-btn-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton label="Switch to oat milk" disabled />
<IcToggleButton label="Switch to oat milk" disabled toggleChecked />
<IcToggleButton label="Switch to oat milk" loading />
<IcToggleButton label="Switch to oat milk" loading toggleChecked />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsOtherStates}>
  <IcToggleButton label="Switch to oat milk" disabled />
  <IcToggleButton label="Switch to oat milk" disabled toggleChecked />
  <IcToggleButton label="Switch to oat milk" loading />
  <IcToggleButton label="Switch to oat milk" loading toggleChecked />
</ComponentPreview>

### With icon

export const snippetsWithIcon = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button label="Switch to oat milk">
  <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
    />
  </svg>
</ic-toggle-button>`,
      long: `.toggle-btn-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="toggle-btn-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton label="Switch to oat milk">
  <SlottedSVG
    slot="icon"
    xmlns="http://www.w3.org/2000/svg"
    height="24"
    viewBox="0 0 24 24"
    width="24"
    fill="#000000"
  >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
  </SlottedSVG>
</IcToggleButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWithIcon}>
  <IcToggleButton label="Switch to oat milk">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToggleButton>
</ComponentPreview>

### Sizing

export const snippetsSizing = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button
  label="Switch to oat milk"
  size="small"
></ic-toggle-button>
<ic-toggle-button label="Switch to oat milk"></ic-toggle-button>
<ic-toggle-button
  label="Switch to oat milk"
  size="large"
></ic-toggle-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton label="Switch to oat milk" size="small" />
<IcToggleButton label="Switch to oat milk" size="default" />
<IcToggleButton label="Switch to oat milk" size="large" />`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsSizing}>
  <IcToggleButton label="Switch to oat milk" size="small" />
  <IcToggleButton label="Switch to oat milk" size="default" />
  <IcToggleButton label="Switch to oat milk" size="large" />
</ComponentPreview>

### With badge

export const snippetsWithBadge = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button label="Switch to oat milk">
    <ic-badge text-label="1" slot="badge" variant="success"></ic-badge>
</ic-toggle-button>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton label="Switch to oat milk">
  <IcBadge textLabel="1" slot="badge" variant="success" />
</IcToggleButton>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsWithBadge}>
  <IcToggleButton label="Switch to oat milk">
    <IcBadge textLabel="1" slot="badge" variant="success" />
  </IcToggleButton>
</ComponentPreview>

### Dark

export const snippetsDark = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button
  label="Switch to oat milk"
  appearance="dark"
></ic-toggle-button>
<ic-toggle-button
  label="Switch to oat milk"
  appearance="dark"
  loading="true"
></ic-toggle-button>
<ic-toggle-button
  label="Switch to oat milk"
  appearance="dark"
  loading="true"
  toggle-checked="true"
></ic-toggle-button>`,
      long: `.parent-container {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ic-space-md);
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton label="Switch to oat milk" appearance="dark" />
<IcToggleButton label="Switch to oat milk" appearance="dark" loading />
<IcToggleButton
  label="Switch to oat milk"
  appearance="dark"
  loading
  toggleChecked
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    display: "flex",
    flexWrap: "wrap",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ gap: "0.5rem" }} snippets={snippetsDark}>
  <IcToggleButton label="Switch to oat milk" appearance="dark" />
  <IcToggleButton label="Switch to oat milk" appearance="dark" loading />
  <IcToggleButton
    label="Switch to oat milk"
    appearance="dark"
    loading
    toggleChecked
  />
</ComponentPreview>

### Light

export const snippetsLight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button label="Switch to oat milk" appearance="light"></ic-toggle-button>
<ic-toggle-button label="Switch to oat milk" appearance="light" loading="true"></ic-toggle-button>
<ic-toggle-button label="Switch to oat milk" appearance="light" loading="true" toggle-checked="true"></ic-toggle-button>`,
      long: `.dark-background {
    display: flex;
    flex-wrap: wrap;
    background-color: #2c2f34;
    padding: var(--ic-space-md);
    gap: var(--ic-space-xs);
  }
</style>
<body>
  <div class="dark-background">
      {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButton label="Switch to oat milk" appearance="light" />
<IcToggleButton label="Switch to oat milk" appearance="light" loading />
<IcToggleButton
  label="Switch to oat milk"
  appearance="light"
  loading
  toggleChecked
/>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    display: "flex",
    flexWrap: "wrap",
    backgroundColor: "#2c2f34",
    padding: "var(--ic-space-md)",
    gap: "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.darkBackground}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  darkBackground: {
    display: "flex",
    flexWrap: "wrap",
    backgroundColor: "#2c2f34",
    padding: "var(--ic-space-md)",
    gap; "var(--ic-space-xs)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.darkBackground}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{ backgroundColor: "#2c2f34", gap: "0.5rem" }}
  snippets={snippetsLight}
>
  <IcToggleButton label="Switch to oat milk" appearance="light" />
  <IcToggleButton label="Switch to oat milk" appearance="light" loading />
  <IcToggleButton
    label="Switch to oat milk"
    appearance="light"
    loading
    toggleChecked
  />
</ComponentPreview>

### Full width

export const snippetsFullWidth = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button-group
  accessible-label="Alternatives to milk selection"
  full-width="true"
  select-type="single"
>
  <ic-toggle-button label="Switch to oat milk"></ic-toggle-button>
  <ic-toggle-button label="Switch to almond milk"></ic-toggle-button>
  <ic-toggle-button label="Switch to coconut milk"></ic-toggle-button>
  <ic-toggle-button label="Switch to rice milk"></ic-toggle-button>
</ic-toggle-button-group>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButtonGroup
  accessibleLabel="Alternatives to milk selection"
  fullWidth
  selectType="single"
>
  <IcToggleButton label="Switch to oat milk" />
  <IcToggleButton label="Switch to almond milk" />
  <IcToggleButton label="Switch to coconut milk" />
  <IcToggleButton label="Switch to rice milk" />
</IcToggleButtonGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview style={{ display: "block" }} snippets={snippetsFullWidth}>
  <IcToggleButtonGroup
    accessibleLabel="Alternatives to milk selection"
    fullWidth
    selectType="single"
  >
    <IcToggleButton label="Switch to oat milk" />
    <IcToggleButton label="Switch to almond milk" />
    <IcToggleButton label="Switch to coconut milk" />
    <IcToggleButton label="Switch to rice milk" />
  </IcToggleButtonGroup>
</ComponentPreview>

### Icon only

export const snippetsIconOnly = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button-group
  accessible-label="Coffee icon variants"
  variant="icon"
>
  <ic-toggle-button accessible-label="Coffee icon" variant="icon">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
  <ic-toggle-button
    accessible-label="Loading coffee"
    variant="icon"
    loading="true"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
  <ic-toggle-button
    accessible-label="Disabled coffee"
    variant="icon"
    disabled="true"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
</ic-toggle-button-group>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButtonGroup accessibleLabel="Coffee icon variants" variant="icon">
  <IcToggleButton variant="icon" accessibleLabel="Coffee icon">
    <SlottedSVG
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToggleButton>
  <IcToggleButton variant="icon" accessibleLabel="Loading coffee" loading>
    <SlottedSVG
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToggleButton>
  <IcToggleButton variant="icon" accessibleLabel="Disabled coffee" disabled>
    <SlottedSVG
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToggleButton>
</IcToggleButtonGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIconOnly}>
  <IcToggleButtonGroup accessibleLabel="Coffee icon variants" variant="icon">
    <IcToggleButton variant="icon" accessibleLabel="Coffee icon">
      <SlottedSVG
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
    <IcToggleButton variant="icon" accessibleLabel="Loading coffee" loading>
      <SlottedSVG
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
    <IcToggleButton variant="icon" accessibleLabel="Disabled coffee" disabled>
      <SlottedSVG
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
  </IcToggleButtonGroup>
</ComponentPreview>

### Icon right

export const snippetsIconRight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button-group
  accessible-label="Alternatives to milk selection"
  icon-placement="right"
>
  <ic-toggle-button label="Switch to oat milk">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
  <ic-toggle-button label="Switch to almond milk">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
</ic-toggle-button-group>`,
      long: `.parent-container {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-container">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButtonGroup
  accessibleLabel="Alternatives to milk selection"
  iconPlacement="right"
>
  <IcToggleButton label="Switch to oat milk" iconPlacement="right">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToggleButton>
  <IcToggleButton label="Switch to almond milk" iconPlacement="right">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcToggleButton>
</IcToggleButtonGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIconRight}>
  <IcToggleButtonGroup
    accessibleLabel="Alternatives to milk selection"
    iconPlacement="right"
  >
    <IcToggleButton label="Switch to oat milk" iconPlacement="right">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
    <IcToggleButton label="Switch to almond milk" iconPlacement="right">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
  </IcToggleButtonGroup>
</ComponentPreview>

### Icon top

export const snippetsIconTopGroup = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-toggle-button-group
  accessible-label="Alternatives to milk selection"
  icon-placement="top"
>
  <ic-toggle-button label="Switch to oat milk">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
  <ic-toggle-button label="Switch to almond milk">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-toggle-button>
</ic-toggle-button-group>`,
      long: `.parent- {
    padding: var(--ic-space-md);
  }
</style>
<body>
  <div class="parent-">
    {shortCode}
  </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcToggleButtonGroup
  accessibleLabel="Alternatives to milk selection"
  iconPlacement="top"
>
  <IcToggleButton label="First toggle" iconPlacement="top">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </SlottedSVG>
  </IcToggleButton>
  <IcToggleButton label="Second toggle" iconPlacement="top">
    <SlottedSVG
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
    </SlottedSVG>
  </IcToggleButton>
</IcToggleButtonGroup>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  parentContainer: {
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return ( 
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsIconTopGroup}>
  <IcToggleButtonGroup
    accessibleLabel="Alternatives to milk selection"
    iconPlacement="top"
  >
    <IcToggleButton label="Switch to oat milk" iconPlacement="top">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
    <IcToggleButton label="Switch to almond milk" iconPlacement="top">
      <SlottedSVG
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 0 24 24"
        width="24"
        fill="#000000"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
    </IcToggleButton>
  </IcToggleButtonGroup>
</ComponentPreview>

---

# Tooltip

URL: https://design.sis.gov.uk/components/tooltip/code
Status: BETA
Subtitle: Tooltips provide helpful information when the cursor hovers over an element or when focus is applied.


import { IcTooltip, IcButton, IcChip } from "@ukic/react";
import { useRef, useState } from "react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tooltip
  target="test-button-0"
  label="Add Americano to favourites"
  placement="top"
>
  <ic-button id="test-button-0" aria-describedby="ic-tooltip-test-button-0">
    Add
  </ic-button>
</ic-tooltip>
<ic-tooltip
  target="test-button-1"
  label="Remove Americano from favourites"
  placement="bottom"
>
  <ic-button id="test-button-1" aria-describedby="ic-tooltip-test-button-1">
    Remove
  </ic-button>
</ic-tooltip>`,
      long: `.tooltip-container {
      display: flex; 
      flex-direction: column;
      gap: 0.5rem; 
      padding: var(--ic-space-md);
    }
  </style>
  <body>
    <div class="tooltip-container">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTooltip
  target="test-button-0"
  label="Add Americano to favourites"
  placement="top"
>
  <IcButton
    id="test-button-0"
    aria-describedby="ic-tooltip-test-button-0"
  >
    Add
  </IcButton>
</IcTooltip>
<IcTooltip
  target="test-button-1"
  label="Remove Americano from favourites"
  placement="bottom"
>
  <IcButton
    id="test-button-1"
    aria-describedby="ic-tooltip-test-button-1"
  >
    Remove
  </IcButton>
</IcTooltip>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  tooltipContainer: {
    display: "flex", 
    flexDirection: "column",
    gap: "var(--ic-space-xs)", 
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.tooltipContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  tooltipContainer: {
    display: "flex", 
    flexDirection: "column",
    gap: "var(--ic-space-xs)", 
    padding: "var(--ic-space-md)",
  },
});
const classes = useStyles();
return (
  <div className={classes.tooltipContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
    <IcTooltip
      label="Add Americano to favourites"
      target="test-button-0"
      placement="top"
    >
      <IcButton id="test-button-0" aria-describedby="ic-tooltip-test-button-0">
        Add
      </IcButton>
    </IcTooltip>
    <IcTooltip
      label="Remove Americano from favourites"
      target="test-button-1"
      placement="bottom"
    >
      <IcButton id="test-button-1" aria-describedby="ic-tooltip-test-button-1">
        Remove
      </IcButton>
    </IcTooltip>
  </div>
</ComponentPreview>

## Tooltip details

{
  "props": [
    {
      "name": "disableClick",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-click",
      "reflectToAttr": false,
      "docs": "If `true`, the tooltip will not be displayed on click, it will require hover or using the display method.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disableHover",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disable-hover",
      "reflectToAttr": false,
      "docs": "If `true`, the tooltip will not be displayed on hover, it will require a click.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The text to display on the tooltip.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "maxLines",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max-lines",
      "reflectToAttr": false,
      "docs": "The number of lines to display before truncating the text.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "placement",
      "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
      "complexType": {
        "original": "IcTooltipPlacements",
        "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
        "references": {
          "IcTooltipPlacements": {
            "location": "import",
            "path": "./ic-tooltip.types",
            "id": "src/components/ic-tooltip/ic-tooltip.types.ts::IcTooltipPlacements"
          }
        }
      },
      "mutable": true,
      "attr": "placement",
      "reflectToAttr": false,
      "docs": "The position of the tooltip in relation to the parent element.",
      "docsTags": [],
      "default": "\"bottom\"",
      "values": [
        {
          "value": "bottom",
          "type": "string"
        },
        {
          "value": "bottom-end",
          "type": "string"
        },
        {
          "value": "bottom-start",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "left-end",
          "type": "string"
        },
        {
          "value": "left-start",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "right-end",
          "type": "string"
        },
        {
          "value": "right-start",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        },
        {
          "value": "top-end",
          "type": "string"
        },
        {
          "value": "top-start",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": true,
      "docs": "The ID of the element the tooltip is describing - for when aria-labelledby or aria-describedby is used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [
    {
      "name": "--ic-z-index-tooltip",
      "annotation": "prop",
      "docs": "z-index of tooltip"
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "displayTooltip",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(show: boolean, persistTooltip?: boolean) => Promise<void>",
        "parameters": [
          {
            "name": "show",
            "type": "boolean",
            "docs": "Whether to show or hide the tooltip"
          },
          {
            "name": "persistTooltip",
            "type": "boolean",
            "docs": "Whether the tooltip should stay on the screen when actions are performed that would previously dismiss the tooltip, such as on hover"
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "displayTooltip(show: boolean, persistTooltip?: boolean) => Promise<void>",
      "parameters": [
        {
          "name": "show",
          "type": "boolean",
          "docs": "Whether to show or hide the tooltip"
        },
        {
          "name": "persistTooltip",
          "type": "boolean",
          "docs": "Whether the tooltip should stay on the screen when actions are performed that would previously dismiss the tooltip, such as on hover"
        }
      ],
      "docs": "Method to programmatically show/hide the tooltip without needing to interact with an anchor element",
      "docsTags": [
        {
          "name": "param",
          "text": "show Whether to show or hide the tooltip"
        },
        {
          "name": "param",
          "text": "persistTooltip Whether the tooltip should stay on the screen when actions are performed that would previously dismiss the tooltip, such as on hover"
        }
      ]
    }
  ],
  "listeners": []
}


## Variants

### Left placement

export const snippetsLeft = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tooltip
  target="test-button"
  label="Add Americano to favourites"
  placement="left"
>
  <ic-button id="test-button" aria-describedby="ic-tooltip-test-button">
    Add
  </ic-button>
</ic-tooltip>`,
      long: `.tooltip-container {
      display: flex; 
      justify-content: flex-end;
    }
  </style>
  <body>
    <div class="tooltip-container">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTooltip
  target="test-button"
  label="Add Americano to favourites"
  placement="left"
>
  <IcButton id="test-button" aria-describedby="ic-tooltip-test-button">
    Add
  </IcButton>
</IcTooltip>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  tooltipContainer: {
    display: "flex",
    justifyContent: "flex-end"
  },
});
const classes = useStyles();
return (
  <div className={classes.tooltipContainer}>
    {shortCode}
  </div>
)}`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  tooltipContainer: {
    display: "flex",
    justifyContent: "flex-end"
  },
});
const classes = useStyles();
return (
  <div className={classes.tooltipContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "flex-end",
  }}
  snippets={snippetsLeft}
>
  <IcTooltip
    label="Add Americano to favourites"
    target="test-button"
    placement="left"
  >
    <IcButton id="test-button" aria-describedby="ic-tooltip-test-button">
      Add
    </IcButton>
  </IcTooltip>
</ComponentPreview>

### Right placement

export const snippetsRight = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tooltip target="test-button" label="Add Americano to favourites" placement="right">  
  <ic-button id="test-button" aria-describedby="ic-tooltip-test-button">Add</ic-button>
</ic-tooltip>`,
      long: `.tooltip-container {
      display: flex; 
      justify-content: flex-start;
    }
  </style>
  <body>
    <div class="tooltip-container">
      {shortCode}
    </div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTooltip
  target="test-button"
  label="Add Americano to favourites"
  placement="right"
>
  <IcButton id="test-button" aria-describedby="ic-tooltip-test-button">
    Add
  </IcButton>
</IcTooltip>`,
      long: [
        {
          language: "Typescript",
          snippet: `const useStyles = createUseStyles({
  tooltipContainer: {
    display: "flex",
    justifyContent: "flex-start"
  },
});
const classes = useStyles();
return (
  <div className={classes.tooltipContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const useStyles = createUseStyles({
  tooltipContainer: {
    display: "flex",
    justifyContent: "flex-start"
  },
});
const classes = useStyles();
return (
  <div className={classes.tooltipContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "flex-start",
  }}
  snippets={snippetsRight}
>
  <IcTooltip
    label="Add Americano to favourites"
    target="test-button"
    placement="right"
  >
    <IcButton id="test-button" aria-describedby="ic-tooltip-test-button">
      Add
    </IcButton>
  </IcTooltip>
</ComponentPreview>

### Chip

export const snippetsChip = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-tooltip target="small-chip" label="An espresso-based drink">
  <ic-chip id="small-chip" label="Americano" size="small">
    <svg
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z"
      />
    </svg>
  </ic-chip>
</ic-tooltip>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTooltip target="small-chip" label="An espresso-based drink">
  <IcChip id="small-chip" label="Americano" size="small">
    <SlottedSVG
      slot="icon"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </SlottedSVG>
  </IcChip>
</IcTooltip>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview
  style={{
    gap: "0.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
  snippets={snippetsChip}
>
  <IcTooltip target="small-chip" label="An espresso-based drink">
    <IcChip id="small-chip" label="Americano" size="small">
      <svg
        slot="icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </svg>
    </IcChip>
  </IcTooltip>
</ComponentPreview>

### Programmatic trigger

export const snippetsProgrammatic = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-button id="clickMe">Show tooltip</ic-button>
<ic-tooltip
  id="targetTooltip"
  label="Add Americano to favourites"
  target="test-button"
>
  <ic-button id="test-button" aria-describedby="ic-tooltip-test-button">
    Add
  </ic-button>
</ic-tooltip>`,
      long: `{shortCode}
  <script>
    let display = true;
    document
      .querySelector("#clickMe")
      .addEventListener("click", handleDisplay);
    const tooltip = document.querySelector("#targetTooltip");
    function handleDisplay() {
      tooltip.displayTooltip(display, display);
      display = !display;
    }
  </script>`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcButton onClick={handleDisplay}>Show tooltip</IcButton>
<IcTooltip
  ref={tooltipEl}
  label="Add Americano to favourites"
  target="test-button"
>
  <IcButton aria-describedby="ic-tooltip-test-button" id="test-button">
    Add
  </IcButton>
</IcTooltip>`,
      long: [
        {
          language: "Typescript",
          snippet: `const [display, setDisplay] = useState<boolean>(true);
const tooltipEl = useRef<HTMLIcTooltipElement | null>(null);
const handleDisplay =  () => {
  tooltipEl.current?.displayTooltip(display, display);
  setDisplay(!display);
};
const useStyles = createUseStyles({
  parentContainer: {
    display: 'flex',
    gap: 'var(--ic-space-xs)',
    padding: 'var(--ic-space-md)',
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
        {
          language: "Javascript",
          snippet: `const [display, setDisplay] = useState(true);
const tooltipEl = useRef(null);
const handleDisplay =  () => {
  tooltipEl.current?.displayTooltip(display, display);
  setDisplay(!display);
};
const useStyles = createUseStyles({
  parentContainer: {
    display: 'flex',
    gap: 'var(--ic-space-xs)',
    padding: 'var(--ic-space-md)',
  },
});
const classes = useStyles();
return (
  <div className={classes.parentContainer}>
    {shortCode}
  </div>
)`,
        },
      ],
    },
  },
];

export const TriggerExample = () => {
  const [display, setDisplay] = useState(true);
  const tooltipEl = useRef(null);
  const handleDisplay = async () => {
    await tooltipEl.current?.displayTooltip(display, display);
    setDisplay(!display);
  };
  return (
    <>
      <IcButton onClick={handleDisplay}>Show tooltip</IcButton>
      <IcTooltip
        ref={tooltipEl}
        target="test-button"
        label="Add Americano to favourites"
      >
        <IcButton id="test-button" aria-describedby="ic-tooltip-test-button">
          Add
        </IcButton>
      </IcTooltip>
    </>
  );
};

<ComponentPreview
  style={{
    gap: "0.5rem",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  }}
  snippets={snippetsProgrammatic}
>
  <TriggerExample />
</ComponentPreview>

---

# Typography

URL: https://design.sis.gov.uk/components/typography/code
Status: BETA
Subtitle: Use the typography component for consistent styling across typographical elements.


import { IcTypography } from "@ukic/react";

## Component demo

export const snippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography variant="h1"><h1>H1</h1></ic-typography>
<ic-typography variant="h2"><h2>H2</h2></ic-typography>
<ic-typography variant="h3"><h3>H3</h3></ic-typography>
<ic-typography variant="h4"><h4>H4</h4></ic-typography>
<ic-typography>Body</ic-typography>
<ic-typography variant="subtitle-large">Subtitle large</ic-typography>
<ic-typography variant="subtitle-small">Subtitle small</ic-typography>
<ic-typography variant="label">Label</ic-typography>
<ic-typography variant="label-uppercase">Label uppercase</ic-typography>
<ic-typography variant="caption">Caption</ic-typography>
<ic-typography variant="caption-uppercase">Caption uppercase</ic-typography>
<ic-typography variant="code-large">Code large</ic-typography>
<ic-typography variant="code-small">Code small</ic-typography>
<ic-typography variant="code-extra-small">Code extra small</ic-typography>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography variant="h1">H1</IcTypography>
<IcTypography variant="h2"><h2>H2</h2></IcTypography>
<IcTypography variant="h3"><h3>H3</h3></IcTypography>
<IcTypography variant="h4"><h4>H4</h4></IcTypography>
<IcTypography>Body</IcTypography>
<IcTypography variant="subtitle-large">Subtitle large</IcTypography>
<IcTypography variant="subtitle-small">Subtitle small</IcTypography>
<IcTypography variant="label">Label</IcTypography>
<IcTypography variant="label-uppercase">Label uppercase</IcTypography>
<IcTypography variant="caption">Caption</IcTypography>
<IcTypography variant="caption-uppercase">Caption uppercase</IcTypography>
<IcTypography variant="code-large">Code large</IcTypography>
<IcTypography variant="code-small">Code small</IcTypography>
<IcTypography variant="code-extra-small">Code extra small</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippets}>
  <div>
    <IcTypography variant="h1">
      <h1>H1</h1>
    </IcTypography>
    <IcTypography variant="h2">
      <h2>H2</h2>
    </IcTypography>
    <IcTypography variant="h3">
      <h3>H3</h3>
    </IcTypography>
    <IcTypography variant="h4">
      <h4>H4</h4>
    </IcTypography>
    <IcTypography>Body</IcTypography>
    <IcTypography variant="subtitle-large">Subtitle large</IcTypography>
    <IcTypography variant="subtitle-small">Subtitle small</IcTypography>
    <IcTypography variant="label">Label</IcTypography>
    <IcTypography variant="label-uppercase">Label uppercase</IcTypography>
    <IcTypography variant="caption">Caption</IcTypography>
    <IcTypography variant="caption-uppercase">Caption uppercase</IcTypography>
    <IcTypography variant="code-large">Code large</IcTypography>
    <IcTypography variant="code-small">Code small</IcTypography>
    <IcTypography variant="code-extra-small">Code extra small</IcTypography>
  </div>
</ComponentPreview>

## Typography details

{
  "props": [
    {
      "name": "applyVerticalMargins",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "apply-vertical-margins",
      "reflectToAttr": false,
      "docs": "If `true`, appropriate top and bottom margins will be applied to the typography.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "bold",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "bold",
      "reflectToAttr": false,
      "docs": "If `true`, the typography will have a bold font weight.\nNote: This will have no impact on variants that already use an equivalent or higher font weight (h1, h2, and subtitle-large).",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "italic",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "italic",
      "reflectToAttr": false,
      "docs": "If `true`, the typography will have an italic font style.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "maxLines",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": true,
      "attr": "max-lines",
      "reflectToAttr": false,
      "docs": "The number of lines to display before truncating the text, only used for the 'body' variant.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "strikethrough",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "strikethrough",
      "reflectToAttr": false,
      "docs": "If `true`, the typography will have a line through it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "underline",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "underline",
      "reflectToAttr": false,
      "docs": "If `true`, the typography will have a line under it.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "variant",
      "type": "\"badge\" | \"badge-small\" | \"body\" | \"caption\" | \"caption-uppercase\" | \"code-extra-small\" | \"code-large\" | \"code-small\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"label\" | \"label-uppercase\" | \"subtitle-large\" | \"subtitle-small\"",
      "complexType": {
        "original": "IcTypographyVariants",
        "resolved": "\"badge\" | \"badge-small\" | \"body\" | \"caption\" | \"caption-uppercase\" | \"code-extra-small\" | \"code-large\" | \"code-small\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"label\" | \"label-uppercase\" | \"subtitle-large\" | \"subtitle-small\"",
        "references": {
          "IcTypographyVariants": {
            "location": "import",
            "path": "../../utils/types",
            "id": "src/utils/types.ts::IcTypographyVariants"
          }
        }
      },
      "mutable": false,
      "attr": "variant",
      "reflectToAttr": false,
      "docs": "The ICDS typography style to use.",
      "docsTags": [],
      "default": "\"body\"",
      "values": [
        {
          "value": "badge",
          "type": "string"
        },
        {
          "value": "badge-small",
          "type": "string"
        },
        {
          "value": "body",
          "type": "string"
        },
        {
          "value": "caption",
          "type": "string"
        },
        {
          "value": "caption-uppercase",
          "type": "string"
        },
        {
          "value": "code-extra-small",
          "type": "string"
        },
        {
          "value": "code-large",
          "type": "string"
        },
        {
          "value": "code-small",
          "type": "string"
        },
        {
          "value": "h1",
          "type": "string"
        },
        {
          "value": "h2",
          "type": "string"
        },
        {
          "value": "h3",
          "type": "string"
        },
        {
          "value": "h4",
          "type": "string"
        },
        {
          "value": "label",
          "type": "string"
        },
        {
          "value": "label-uppercase",
          "type": "string"
        },
        {
          "value": "subtitle-large",
          "type": "string"
        },
        {
          "value": "subtitle-small",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "slots": [],
  "styles": [],
  "events": [],
  "methods": [],
  "listeners": []
}


## Variants

### Re-styled typography

Add a variant to the typography element to change its style. This does not change the semantic level of the typography element.

export const snippetsRestyled = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography variant="h2">
  <h5>H5 with H2 styling</h5>
</ic-typography>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography variant="h2">
  <h5>H5 with H2 styling</h5>
</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={snippetsRestyled}>
  <IcTypography variant="h2">
    <h5>H5 with H2 styling</h5>
  </IcTypography>
</ComponentPreview>

### Vertical margins applied

export const spacingSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography apply-vertical-margins="true">
  <h5>H5 with margins applied</h5>
</ic-typography>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography applyVerticalMargins>
  <h5>H5 with margins applied</h5>
</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={spacingSnippets}>
  <IcTypography applyVerticalMargins>
    <h5>H5 with margins applied</h5>
  </IcTypography>
</ComponentPreview>

### Vertical margins applied on re-styled typography

export const spacingRestyledSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography variant="h2" apply-vertical-margins="true">
  <h5>H5 with H2 styling and margins applied</h5>
</ic-typography>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography variant="h2" applyVerticalMargins>
  <h5>H5 with H2 styling and margins applied</h5>
</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={spacingRestyledSnippets}>
  <IcTypography variant="h2" applyVerticalMargins>
    <h5>H5 with H2 styling and margins applied</h5>
  </IcTypography>
</ComponentPreview>

### Truncation

Text can be truncated to a maximum number of lines when using `variant="body"`.

export const truncationSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography max-lines="3" variant="body">
  Body of text that is truncated to three lines. Click the 'See more' link
  to expand the text, then click 'See less' to truncate the text once
  more!
  <br />
  Dripper caramelization java saucer grounds galão, mocha, and robusta
  kopi-luwak, percolator, instant, qui saucer latte in brewed café au
  lait. Con panna, cup, cream, body americano affogato cup espresso, rich
  milk seasonal saucer grinder spoon that cultivar strong redeye
  frappuccino barista extraction redeye mazagran. Grounds, french press
  dripper organic and foam id saucer, crema, black rich dark, grounds
  breve coffee steamed caramelization percolator.
</ic-typography>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography maxLines="3" variant="body">
  Body of text that is truncated to three lines. Click the 'See more' link
  to expand the text, then click 'See less' to truncate the text once
  more!
  <br />
  Dripper caramelization java saucer grounds galão, mocha, and robusta
  kopi-luwak, percolator, instant, qui saucer latte in brewed café au
  lait. Con panna, cup, cream, body americano affogato cup espresso, rich
  milk seasonal saucer grinder spoon that cultivar strong redeye
  frappuccino barista extraction redeye mazagran. Grounds, french press
  dripper organic and foam id saucer, crema, black rich dark, grounds
  breve coffee steamed caramelization percolator.
</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `{shortCode}`,
        },
        {
          language: "Javascript",
          snippet: `{shortCode}`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={truncationSnippets}>
  <IcTypography maxLines="3" variant="body">
    Body of text that is truncated to three lines. Click the 'See more' link to
    expand the text, then click 'See less' to truncate the text once more!
    <br />
    Dripper caramelization java saucer grounds galão, mocha, and robusta
    kopi-luwak, percolator, instant, qui saucer latte in brewed café au lait.
    Con panna, cup, cream, body americano affogato cup espresso, rich milk
    seasonal saucer grinder spoon that cultivar strong redeye frappuccino
    barista extraction redeye mazagran. Grounds, french press dripper organic
    and foam id saucer, crema, black rich dark, grounds breve coffee steamed
    caramelization percolator.
  </IcTypography>
</ComponentPreview>

### Additional styling

export const additionalStylingSnippets = [
  {
    technology: "Web component",
    snippets: {
      short: `<ic-typography variant="h4" bold="true">Bold</ic-typography>
<ic-typography variant="h4" italic="true">Italic</ic-typography>
<ic-typography variant="h4" underline="true">Underline</ic-typography>
<ic-typography variant="h4" strikethrough="true">Strikethrough</ic-typography>`,
      long: `{shortCode}`,
    },
  },
  {
    technology: "React",
    snippets: {
      short: `<IcTypography variant="h4" bold>Bold</IcTypography>
<IcTypography variant="h4" italic>Italic</IcTypography>
<IcTypography variant="h4" underline>Underline</IcTypography>
<IcTypography variant="h4" strikethrough>Strikethrough</IcTypography>`,
      long: [
        {
          language: "Typescript",
          snippet: `<>
  {shortCode}
</>`,
        },
        {
          language: "Javascript",
          snippet: `<>
  {shortCode}
</>`,
        },
      ],
    },
  },
];

<ComponentPreview snippets={additionalStylingSnippets}>
  <div>
    <IcTypography variant="h4" bold>
      <h4>Bold</h4>
    </IcTypography>
    <IcTypography variant="h4" italic>
      <h4>Italic</h4>
    </IcTypography>
    <IcTypography variant="h4" underline>
      <h4>Underline</h4>
    </IcTypography>
    <IcTypography variant="h4" strikethrough>
      <h4>Strikethrough</h4>
    </IcTypography>
  </div>
</ComponentPreview>

---

# Date input

URL: https://design.sis.gov.uk/components/date-input
Status: CANARY
Subtitle: A date input is used when gathering a specific date in a text-based format.


import { IcAlert, IcLink } from "@ukic/react";
import { IcDateInput } from "@ukic/canary-react";
import fig1 from "./images/fig-1-do-use-date-input-to-collect-distant-dates.png";
import fig2 from "./images/fig-2-do-use-seperate-date-input-when-capturing-partial-dates.png";
import fig3 from "./images/fig-3-with-helper-text.png";
import fig4 from "./images/fig-4-with-no-helper-text.png";
import fig5 from "./images/fig-5-adjust-input-size-to-match-other-form-components.png";
import fig6 from "./images/fig-6-dont-use-mixed-size-components.png";
import fig7 from "./images/fig-7-short-date-input-width.png";
import fig8 from "./images/fig-8-matched-date-input-width.png";
import fig9 from "./images/fig-9-excessive-matched-date-input-width.png";
import fig10 from "./images/fig-10-success-validation.png";
import fig11 from "./images/fig-11-error-validation-correct.png";

<IcAlert
  heading="Canary component"
  variant="info"
  message="This component is new and its guidance will be updated over time."
/>

## Canary components

Canary components are unstable components that are released for testing purposes.

We value any feedback from users willing to try them in their applications.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

For more information on Canary components, read our approach to [releases and versions](/get-started/releases-versions).

<p>
  Additional details on the props and events for this component can be found in
  the{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-web-components/?path=/docs/web-components-date-input--docs"
    target="_blank"
  >
    Canary web components
  </IcLink>{" "}
  and{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-react/?path=/docs/react-components-date-input--docs"
    target="_blank"
  >
    Canary React
  </IcLink>{" "}
  storybooks.
</p>

## Component demo

<ComponentPreview>
  <IcDateInput label="When would you like to collect your coffee?" />
</ComponentPreview>

## When to use

Use a date input when asking people for a date they already know or can input without the use of a calendar.

Use a date input to select a past, present or future date. For example, use a date input when asking for a person’s birthday as it may be quicker than navigating through a [date picker](/components/date-picker).

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={fig1}
    imageAlt="A date input being used to select a birthday"
    caption="Use a date input to collect distant dates."
    state="good"
  />
</DoubleDoDontCaution>

## When not to use

Do not use a date input when asking for parts of a date where some elements may not be known. For example, knowing the month and year, but not the day. Instead, consider using three separate fields for date, month and year, and set all to optional.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={fig2}
    imageAlt="Three separate date inputs being used to capture day month and year independently."
    caption="Three separate input fields can be used when capturing partial dates."
    state="good"
  />
</DoubleDoDontCaution>

## Content

### Labels

Use [content styling](/styles/content-style/principles) for help with building effective labels for people using date input.

### Helper text

Use helper text to provide additional information.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={fig3}
    imageAlt="An example of the benefits of using helper text in a date input."
    caption="Use helper text to give context to the current required input."
    state="good"
  />
  <DoDontCaution
    imageSrc={fig4}
    imageAlt="An example of a date input with no helper text included."
    caption="Avoiding helper text removes context."
    state="bad"
  />
</DoubleDoDontCaution>

## Date formatting

Use the date input `dateFormat` property to change the default input format between DD/MM/YYYY, MM/DD/YYYY and YYYY/MM/DD. Use differing labels on the helper text and within a date input, when catering for regional input preferences.

## Interaction behaviour

Use the `disablePast` property when using date input to gather information about future dates, such as hotel bookings.

Use the `disableFuture` property when using a date input to gather information about days in the past, such as birthdays.

Set the default date on a date input to help people quickly complete the input by sticking with the default value. For example, set the default date to the next available delivery date when asking for a delivery date preference.

Do not use default date when using date input to collect a date far in the past. For example, do not use “now” as default when asking for date of birth. Instead, use placeholder text of date format until the user selects their input.

Use `html autofocus` to automatically focus a date input when it is the only input on a page.

Do not use `html autofocus` on a date input when it is part of a form with other inputs.

You can copy and paste a complete date into the date input.

## Sizing

Use the date input size properties to change its vertical size and achieve compact or spacious layouts.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={fig5}
    imageAlt="A date input matching the height of the button component next to it."
    caption="Adjust a date input’s size properties to help it match the rest of your form."
    state="good"
  />
  <DoDontCaution
    imageSrc={fig6}
    imageAlt="A date input that is larger than the button component it is next to."
    caption="Don’t mix different sized components."
    state="bad"
  />
</DoubleDoDontCaution>

### Width

Ensure the width of the date input allows enough space for the full length of a person’s potential input.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={fig7}
    imageAlt="A date input matching the width of its expected input."
    caption="Where appropriate to form size, adjust the width of a date input to match other elements."
    state="good"
  />
  <DoDontCaution
    imageSrc={fig8}
    imageAlt="A date input matching the width of other elements in a form."
    state="bad"
  />
</DoubleDoDontCaution>

<DoDontCaution
  imageSrc={fig9}
  imageAlt="A date input matching the width of a much longer form element."
  caption="Avoid matching a date input to considerably wider form elements."
  state="caution"
/>

## Validation

Use validation on input fields to tell people when any warning or errors occur within their input. The date input component offers some standard validation scenarios as well as a method for creating custom validation scenarios.

Use the custom validation options to configure your own validation scenarios. For example, if it is required that the input date must be after another specific date then use an error validation message if the input date doesn’t meet the condition.

Use error, warning or success validation messages according to the validation scenario.

Use error messaging when the person can’t proceed without fixing their input, and use a warning message when the input can be used, but may not be expected. For example, when capturing a date of birth, show a warning message if it would indicate the person being unreasonably old, such as with 01/01/1880.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={fig10}
    imageAlt="A date input showing the successful validation of an input."
    caption="Use success validation when checking input against limited availability."
    state="good"
  />
  <DoDontCaution
    imageSrc={fig11}
    imageAlt="A date input correctly displaying an invalid entry errored state."
    caption="Use the correct validation message with each validation state."
    state="good"
  />
</DoubleDoDontCaution>

---

# Date picker

URL: https://design.sis.gov.uk/components/date-picker
Status: CANARY
Subtitle: A date picker is a type of drop-down control that allows people to easily view and select dates.


import { IcAlert, IcLink } from "@ukic/react";
import { IcDatePicker } from "@ukic/canary-react";
import figure1 from "./images/fig1-use-date-picker-to-visualise-dates.png";
import figure2 from "./images/fig2-avoid-using-for-distant-dates.png";
import figure3 from "./images/fig3-custom-width.png";
import figure4 from "./images/fig4-clear-error-message.png";

<IcAlert
  heading="Canary component"
  variant="info"
  message="This component is new and its guidance will be updated over time."
/>

## Canary components

Canary components are unstable components that are released for testing purposes.

We value any feedback from users willing to try them in their applications.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

For more information on Canary components, read our approach to [releases and versions](/get-started/releases-versions).

<p>
  Additional details on the props and events for this component can be found in
  the{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-web-components/?path=/docs/web-components-date-picker--docs"
    target="_blank"
  >
    Canary web components
  </IcLink>{" "}
  and{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-react/?path=/docs/react-components-date-picker--docs"
    target="_blank"
  >
    Canary React
  </IcLink>{" "}
  storybooks.
</p>

## Component demo

<ComponentPreview>
  <IcDatePicker label="When would you like to collect your coffee?" />
</ComponentPreview>

## When to use

Use a date picker to select an event that is near to the present time.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={figure1}
    imageAlt="A date picker being used to select a nearby date"
    caption="Use a date picker to visualise and select dates."
    state="good"
  />
</DoubleDoDontCaution>

Use a date picker to select a date that is known or desired, such as an appointment.

Use a date picker to select a single date where visualising that date could be useful.

Use a date picker when there is a need to view a date in context. For example, if there is a need to see which day of the week a future event occurs.

## When not to use

Avoid using a date picker for well-known dates, such as dates of birth, because it is often easier to type this into a field. For example, if selecting 30/07/1966, consider using [date input](/components/date-input) as a date picker would require many clicks to arrive at the same date.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={figure2}
    imageAlt="A date picker being used to select a very distant date"
    caption="Avoid using a date picker when dealing with distant dates."
    state="caution"
  />
</DoubleDoDontCaution>

## Sizing

Use the date picker size properties to change its vertical size and achieve compact or spacious layouts.

### Width

Use the resizing options to increase or decrease width to match other elements in a form.

Use the [date input](/components/date-input) resizing options to change size of the input and calendar between minimum and maximum widths. For example, to create a larger date picker, resize width of [date input](/components/date-input).

<DoDontCaution
  imageSrc={figure3}
  imageAlt="Two date picker examples at their maximum and minimum width"
  caption="Change the width of the date input to adjust the date picker width."
  state="good"
/>

## Content

### Labels

Use [content styling](/styles/content-style/principles) for help with building effective labels for people using date input.

### Helper text

Use helper text to indicate restrictions in your date input such as not allowing weekends.

### Placeholder

Use a placeholder to demonstrate an example of the desired input. Do not add essential information into the placeholder as it will be hidden when a date is entered into the field.

## Interaction

Set `open-at-date` to specify the date in view when the date picker is opened. If no date is set, the date picker will default to showing the current date.

The [date input](/components/date-input) and the date picker update according to any input made. For example, if 10/10/2100 is entered in the [date input](/components/date-input), the date picker will open to display the selection.

## Validation

See [date input](/components/date-input#validation) for detailed guidance on how to display errors within the date picker.

<DoDontCaution
  imageSrc={figure4}
  imageAlt="A date picker with error caused by choosing a date outside of allowed range."
  caption="Make sure to be clear and instructive when writing error messages. Avoid ambiguity or terms like please when writing error messages."
  state="good"
/>

---

# Badge

URL: https://design.sis.gov.uk/components/badge
Status: BETA
Subtitle: Badges are attached to other components to provide an indication that something new is available, or that something has changed.


import { IcBadge, IcButton } from "@ukic/react";
import badgeFig1 from "./images/fig-1-badge-types.png";
import badgeFig2 from "./images/fig-2-badge-notification-on-inbox.png";
import badgeFig3 from "./images/fig-3-text-badge-notification-on-new-list-item.png";
import badgeFig4 from "./images/fig-4-dont-use-text-badge-with-long-label.png";
import badgeFig5 from "./images/fig-5-use-dot-badges.png";
import badgeFig6 from "./images/fig-6-use-icon-badges.png";
import badgeFig7 from "./images/fig-7-dont-add-badges-to-non-components.png";
import badgeFig9 from "./images/fig-9-use-plus-symbol-for-large-numbers.png";
import badgeFig10 from "./images/fig-10-use-high-contrast-combinations.png";
import badgeFig11 from "./images/fig-11-dont-use-low-conotrast-combinations.png";
import badgeFig12 from "./images/fig-12-badge-positioning.png";
import badgeFig13 from "./images/fig-13-understandable-badge-content.png";
import badgeFig14 from "./images/fig-14-confusing-badge-content.png";

## Introduction

An example of the badge component.

<ComponentPreview>
  <IcButton variant="secondary" style={{ marginRight: "1rem" }}>
    <IcBadge textLabel="1000" maxNumber={99} slot="badge" variant="info" />
    Coffee orders
  </IcButton>
</ComponentPreview>

## Component variants

There are three types of badge available:

- Text badge: Contains a short text label.
- Icon badge: Contains an icon.
- Dot badge: Badge background without any content.

<DoDontCaution
  imageSrc={badgeFig1}
  imageAlt="Three types of badges applied to a secondary button titled ‘inbox’."
  caption="Three types of badge are available: a text, icon and a dot badge."
/>

## When to use

Use badges to draw attention to new or updated information. For example, use them to display an item count such as the number of new notifications, or to display an icon such as a padlock icon for locked content.

<DoDontCaution
  imageSrc={badgeFig2}
  imageAlt="An example app showing a top navigation bar that includes an icon button for messages. A badge is displayed on the messages icon button showing the number 8 in its label."
  state="good"
  caption="Use text badges to draw attention to new information such as new messages in an inbox."
/>

Use text badges to attach short labels to other information. For example, a badge could be used to highlight a new item in a list. Remember to keep labels concise.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={badgeFig3}
    imageAlt="Use text badges to add short labels to other page elements."
    state="good"
    caption="A list of cards showing coffee-themed blog posts. The top card has a text badge displaying the label ‘New’."
  />
  <DoDontCaution
    imageSrc={badgeFig4}
    imageAlt="A list of cards showing coffee themed blog posts. The top card has a text badge displaying the label ‘Brand new content’."
    state="bad"
    caption="Don’t use long labels in text badges."
  />
</DoubleDoDontCaution>

Use a dot badge to indicate that something has changed or updated without displaying a text label or icon.

Use a text badge with numerical label to show the number of updates.

For example, use a dot badge to highlight that new comments are available to review, without giving the number of new comments.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={badgeFig5}
    imageAlt="A side navigation component with an icon button for accessing an inbox. The icon button shows a dot badge indicating that something is available in the inbox."
    state="good"
    caption="Use dot badges as a subtle way to indicate the presence of something without using a text label or an icon."
  />
</DoubleDoDontCaution>

Only use badges when the component that it is attached to allows navigation to where the information related to the badge is stored. For example, a button that navigates someone to their inbox may show a badge displaying the number of new notifications that can be found there.

One exception is when using icon badges to add additional meaning only. For example, use an icon badge with a padlock icon to indicate that something may be currently locked due to access rights.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={badgeFig6}
    imageAlt="A side navigation showing an icon button for accessing a trends page. An icon badge is displayed showing a closed padlock icon indicating that it can’t be accessed."
    state="good"
    caption="Use icon badges to add additional information. Here a lock icon is used to indicate limited access rights to a feature of the app."
  />
</DoubleDoDontCaution>

Use badges to convey status, but make sure to use a status icon on the badge to provide a clear way of understanding the status. Don’t rely only on the colour of the badge to indicate status.

For example, use a success status dot badge to indicate that something has gone online, but always try to back up the status message with textual messaging elsewhere on the page.

## When not to use

Don’t use text badges as the only method of showing information, back the message up elsewhere. For example, show a toast notification for a new message whilst also adding a text badge to an inbox icon button.

Avoid attaching badges to non-interactive components. Aim to attach a badge to components that allow navigation to the information that the badge relates to.

Don’t use an icon badge as the only means of showing information on a non-navigational component. Always back up the message by including written messaging elsewhere on the page or showing feedback when the component is clicked.

For example, if using an icon badge with a lock symbol to indicate limited access to a navigation button, then allow the navigation button to still be clicked, but show a message stating that it is locked using a dialog or alert.

<DoDontCaution
  imageSrc={badgeFig7}
  imageAlt="An example app with a hero component with the title ‘Come and taste our cool beans.’ A text badge is attached to the title and shows the number 8."
  state="bad"
  caption="Don’t add badges to non-navigational components as it can be hard to understand what it means."
/>

Avoid using badges as the only way of indicating status. Always show information about the status in full on the page that the badged component navigates to.

Don’t use multiple badges to indicate many different statuses at the same time as it is hard to understand what the different statuses could mean. When using badges to convey status, use one type of status badge at a time.

For an application showing different system statuses, don’t place multiple status badges on a component to show separate information such as online status as well as system health status.

For example, on an app for displaying coffee orders to baristas, don’t show multiple status badges on a single order. Don't display a badge to indicate time since the order was placed as well as a badge to indicate remaining number of products.

Avoid using badges with more than four characters, including the ‘+’ symbol. Use the ‘maxNumber’ property to limit what is displayed before a ‘+’ symbol is added. For example, this can be used to show ‘99+’ notifications.

<DoDontCaution
  imageSrc={badgeFig9}
  imageAlt="An example app with a top navigation showing an icon button for an inbox page. The inbox icon button shows a badge that reads ‘99+’."
  state="bad"
  caption="Use the maxNumber property to limit large numbers in text badges and display a ‘+’ symbol instead."
/>

## Colour

Use the different colour variations of badges to make sure it achieves at least 3:1 colour contrast ratio with its background.

Specify a custom colour for the badge, but take care to make sure the colour contrast requirements are met.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={badgeFig10}
    imageAlt="A secondary button on a white background showing a badge with a contrasting blue colour."
    state="good"
    caption="Use high contrast badges so that they stand out against background colours."
  />
  <DoDontCaution
    imageSrc={badgeFig11}
    imageAlt="A secondary button on a white background showing a badge with a light grey colour that has a low contrast. The badge is difficult to make out."
    state="bad"
    caption="Don’t use colour combinations with low contrast ratios."
  />
</DoubleDoDontCaution>

## Sizing

Use the same sized badge for the size of the component that the badge is attached to. For example, use a large sized badge with a large sized button.

## Layout and placement

Badges are always positioned in the top right corner of the component they are attached to. Make sure the badge overlaps the border of the component by adjusting the badge’s positioning using the ‘far’ and ‘near’ positioning options. For square components use the ‘far’ positioning option, and for rounded components use the ‘near’ positioning.

For components that are adjacent to one another, such as tabs, use ‘inline’ badge positioning so that the badge sits in line with the component’s label.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={badgeFig12}
    imageAlt="A secondary button with a badge using ‘far’ positioning, a chip with a badge using ‘near’ positioning, and a tab bar containing a tab with a badge using ‘inline’ positioning."
    state="good"
    caption="Use the badge positioning options to change where a badge is placed on a component."
  />
</DoubleDoDontCaution>

## Content

Make sure that it is obvious what the badge relates to. Only use badges when the component it is attached to is labelled clearly to indicate what the badge references. For example, a numeric badge on an inbox is easily understandable, whereas a numeric badge on a menu button may not be as clear as to what the badge represents.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={badgeFig13}
    imageAlt="An app showing a top navigation with an icon button for an inbox page. It shows a badge showing the number 5, representing the number of messages in the inbox."
    state="good"
    caption="Use badges where it is understandable what they represent. In this example the badge clearly indicates 5 messages in the inbox."
  />
  <DoDontCaution
    imageSrc={badgeFig14}
    imageAlt="An app showing a menu button with a badge showing the number 5. It is not clear what the number 5 represents."
    state="caution"
    caption="Avoid using them in cases where the badge’s meaning is difficult to understand. In this example it is not clear what the 5 in the badge represents."
  />
</DoubleDoDontCaution>

When using text badges, keep the text label short and only use a single word. Avoid using more than four characters on a text badge. For example, use a text badge to label something as ‘New’. Don’t use badges to add long labels; consider adding that information elsewhere instead.

If displaying numbers in a text badge, then set the ‘maxNumber’ property to limit the number of characters shown. This will show a ‘+’ symbol if the value is larger than the maxNumber.

Always provide an accessible label to add context to a badge’s label for the benefit of people who use a screen reader. Make sure to include any visible label within the accessible label.

Take care when using icon badges so that the icon is immediately understandable to its context. Don’t use abstract or ambiguous icons as this will make it hard to understand what the badge represents.

## Accessibility considerations

Always provide a badge with an accessible label to add context for people who use screen readers. For example, a text badge displaying the number 10 might have an accessible label that reads ‘10 new notifications’.

When using an icon badge, make sure that the icon alt-text makes sense to its function and use the accessible label to add context.

When setting a badge’s colour, make sure it meets the minimum contrast requirement of 3:1 for non-text elements.

If a badge is added to a page because of a status update, make sure that screen readers announce its presence by using a live region.

---

# Button

URL: https://design.sis.gov.uk/components/button
Status: BETA
Subtitle: Buttons are used to allow or encourage people to take an action.


import { IcButton } from "@ukic/react";
import buttonFig1 from "./images/fig-1-use-buttons-to-complete-actions-on-the-page.png";
import buttonFig2 from "./images/fig-2-do-not-use-buttons-to-navigate-users-to-a-new-page.png";
import buttonFig3 from "./images/fig-3-use-contrast-variants-on-different-coloured-backgrounds-to-ensure-good-contrast-and-avoid-colours-clashing.png";
import buttonFig4 from "./images/fig-4-make-sure-to-use-the-correct-button-variant-to-meet-minimum-contrast-requirements.png";
import buttonFig5 from "./images/fig-5-use-the-correct-buttons-sizes-to-match-other-UI-component-sizes.png";
import buttonFig6 from "./images/fig-6-do-not-mix-different-sized-components.png";
import buttonFig7 from "./images/fig-7-use-large-buttons-for-standalone-higher-priority-actions.png";
import buttonFig8 from "./images/fig-8-use-a-primary-button-for-the-most-important-action-or-to-influence-an-action.png";
import buttonFig9 from "./images/fig-9-two-primary-buttons-make-it-less-clear-what-the-expected-action-is.png";
import buttonFig10 from "./images/fig-10-use-secondary-buttons-for-lower-priority-actions-and-a-primary-button-for-the-higher-priority-action.png";
import buttonFig11 from "./images/fig-11-use-tertiary-buttons-to-provide-a-dismissive-or-cancellation-action-when-paired-with-a-primary-CTA-button.png";
import buttonFig12 from "./images/fig-12-use-a-primary-button-to-highlight-the-key-action-in-a-button-group.png";
import buttonFig13 from "./images/fig-13-do-not-use-different-button-types-for-different-actions-in-a-group.png";
import buttonFig14 from "./images/fig-14-position-primary-buttons-to-the-left-when-on-a-page.png";
import buttonFig15 from "./images/fig-15-do-position-primary-buttons-to-the-right-when-on-a-dialog.png";
import buttonFig16 from "./images/fig-16-use-concise-but-specific-labels.png";
import buttonFig17 from "./images/fig-17-do-not-use-long-labels-or-generic-labels.png";
import buttonFig18 from "./images/fig-18-use-icons-with-clear-meaning-to-add-clarity-to-the-action.png";
import buttonFig19 from "./images/fig-19-do-not-use-complicated-unrelated-or-ambiguous-icons-on-buttons.png";

## Component variants

There are five variants of button:

- Primary buttons
- Secondary buttons
- Tertiary buttons
- Destructive buttons
- Icon buttons

<ComponentPreview style={{ gap: "0.5rem" }}>
  <IcButton variant="primary">Add to order</IcButton>
  <IcButton variant="secondary">View coffees</IcButton>
  <IcButton variant="tertiary">Find out more</IcButton>
  <IcButton variant="destructive">Cancel order</IcButton>
  <IcButton variant="icon" aria-label="Coffee cup">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcButton>
</ComponentPreview>

## When to use

### Primary buttons

Use primary buttons to provide high emphasis to a key action. Use them for the most important action on a page or within a container.

### Secondary buttons

Use secondary buttons to provide medium emphasis for less important actions on a page or within a container.

Group these buttons to provide a set of actions of equal priority.

### Tertiary buttons

Use tertiary buttons to provide low emphasis for low priority actions on a page or within a container that aren't important or used frequently.

Use tertiary buttons for dismissive actions such as to close a dialog, navigate back a step or to cancel an action.

### Destructive buttons

Use destructive buttons for actions that can't be reversed. For example, use them for a delete action that can't be undone.

### Icon buttons

Icon buttons work like a normal button but don't include a visible text label. Use them to provide a compact method of triggering an action.

Use icon buttons for well understood actions that are represented clearly by the icon's visual content. For example, a 'bin' icon indicates a delete function. Read more about [iconography](/styles/icons) for guidance on selecting and creating icons.

Always provide a textual description available programmatically and a visible label that is displayed using a tooltip when hovering on an icon button.

## When not to use

### Buttons and links

Buttons should trigger actions and affect content on the current page or container. To navigate to a new page or open a new tab use links instead.

<DoDontCaution
  imageSrc={buttonFig1}
  imageAlt="An example page showing a primary button labelled 'submit' at the bottom of a page."
  state="good"
  caption="Use buttons to complete actions on the page such as adding or deleting an item, confirming or closing a dialog, or as a tool in a toolbar."
/>

<DoDontCaution
  imageSrc={buttonFig2}
  imageAlt="An example of a page with a hero banner with the title 'Today's good mood is sponsored by coffee.' A secondary button is displayed on the hero banner acting as a link to a new page called 'Get some coffee'."
  state="bad"
  caption="Don't use buttons to navigate users to a new page."
/>

## Interaction behaviour

When an action triggers a background task, use the button loading state to provide feedback to the user that something is happening.

<ComponentPreview style={{ gap: "0.5rem" }}>
  <IcButton variant="secondary" loading>
    Loading
  </IcButton>
</ComponentPreview>

## Colour

Don't change a button colour as this makes them less recognisable as actions.

### Appearance

Primary, secondary, tertiary and icon buttons have default, light and dark appearance options.

Use different button appearances when placing buttons on coloured backgrounds to ensure good contrast and avoid colours clashing. Use light appearance buttons on dark backgrounds and use dark appearance buttons on light backgrounds.

When you use the UI Kit components together they will select the appropriate variant.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={buttonFig3}
    imageAlt="Button variants on a white background, dark button variants on light coloured backgrounds, and light button variants on dark backgrounds."
    state="good"
    caption="Use different appearance options on different coloured backgrounds to ensure good contrast and avoid colours clashing."
  />
  <DoDontCaution
    imageSrc={buttonFig4}
    imageAlt="A bad example showing dark button variants used on a white background, coloured button variants on coloured backgrounds, and dark button variants on dark backgrounds."
    state="bad"
    caption="Use the correct button appearance to meet minimum contrast requirements."
  />
</DoubleDoDontCaution>

## Sizing

Buttons have three different sizing options: default, small and large.

Use components of the same size together. For example, use a default sized button with a default sized input component, or use a small sized button with a small sized input component.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={buttonFig5}
    imageAlt="A form with correctly sized components. A normal sized input component is paired with normal sized button, and a small sized input component is paired with a small sized button."
    state="good"
    caption="Use the correct buttons sizes to match other UI component sizes."
  />
  <DoDontCaution
    imageSrc={buttonFig6}
    imageAlt="A form with incorrectly sized components. A normal sized input component is paired with small sized button, and a small sized input component is paired with a normal sized button."
    state="bad"
    caption="Don't mix different sized components."
  />
</DoubleDoDontCaution>

Use large buttons only for high emphasis actions that sit independently from other UI elements.

<DoDontCaution
  imageSrc={buttonFig7}
  imageAlt="A page showing a large sized button on its own at the bottom of the page content."
  state="good"
  caption="Use large buttons for standalone, higher priority actions."
/>

## Layout and placement

### Button hierarchy

Use only one primary button on a page or within a container. Show the most important action with a primary button.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={buttonFig8}
    imageAlt="A dialog box reading 'Are you sure you want to continue?' using a primary button for the important 'continue' action and a tertiary button for the lower priority 'Go back' dismissive action."
    state="good"
    caption="Use a primary button for the most important action or when you want to influence an action."
  />
  <DoDontCaution
    imageSrc={buttonFig9}
    imageAlt="A dialog box reading 'Are you sure you want to continue?' using one primary button for the 'Continue' action and another primary button for the 'Go back' action."
    state="bad"
    caption="Two primary buttons make it less clear what the expected action is."
  />
</DoubleDoDontCaution>

Use secondary buttons to perform secondary or lower priority actions.

Group multiple secondary actions to provide a set of possible actions with an equal priority.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={buttonFig10}
    imageAlt="A dialog reading 'How would you like to continue?' showing a single primary button for the 'save' action and two secondary buttons for the 'save as...' and 'duplicate' actions."
    state="good"
    caption="Use multiple secondary buttons to provide lower priority actions, whilst using a primary button for the higher priority action."
  />
  <DoDontCaution
    imageSrc={buttonFig11}
    imageAlt="A dialog that reads 'Are you sure you want to continue?' showing a primary button for the 'continue' action, as well as a tertiary button providing the dismissive 'Go back' action."
    state="good"
    caption="Use tertiary buttons to provide a dismissive or cancellation action when paired with a primary button that provides the main call to action."
  />
</DoubleDoDontCaution>

### Button grouping

Group buttons to provide a set of actions.

Highlight the primary action in the group using a primary button. Use all secondary or all tertiary buttons for the rest of the actions.

Don't mix secondary and text buttons to provide multiple actions in a group.

<DoDontCaution
  imageSrc={buttonFig12}
  imageAlt="An example page showing a button group containing a primary button indicating the main ‘Submit’ call to action and two secondary buttons for the lower priority ‘Duplicate’ and ‘Save as’ options."
  state="good"
  caption="Use a primary button to highlight the key action in a button group."
/>

<DoDontCaution
  imageSrc={buttonFig13}
  imageAlt="An example page showing a button group comprised of a tertiary button for the ‘Cancel’ action, a destructive button for the ‘Delete’ action, a secondary button for the ‘Save as’ action and a primary button for the ‘submit’."
  state="bad"
  caption="Don’t use different button types for different actions in a group."
/>

Place primary buttons on the left of a button group unless presented in a modal window where they should be located on the right. This follows common reading patterns when viewing a page and a dialog.

<DoDontCaution
  imageSrc={buttonFig14}
  imageAlt="An example page showing a button group positioned in the main page content aligned to the left of the page. The group has a primary button positioned on the left and two secondary buttons to its right."
  state="good"
  caption="Position primary buttons to the left when on a page."
/>

<DoDontCaution
  imageSrc={buttonFig15}
  imageAlt="A dialog showing a button group positioned to the right. The group has a primary button positioned on the right of the group and two secondary buttons on its left."
  state="good"
  caption="Position primary buttons to the right when on a dialog."
/>

## Content

### Labels

Follow the [content style](/styles/content-style) guidelines when writing button labels.

Add useful labels to buttons so that they don't rely on context. Avoid using long labels and keep them specific and concise.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={buttonFig16}
    imageAlt="A dialog with the heading ‘Are you sure you want to continue?’. There are two buttons in the modal with labels which read ‘go back’ and ‘continue’."
    state="good"
    caption="Use concise but specific labels."
  />
  <DoDontCaution
    imageSrc={buttonFig17}
    imageAlt="A dialog with the heading ‘Are you sure you want to continue?’. There are two buttons in the modal with labels which read ‘No, take me out of here’ and ‘yes, continue to the next section’."
    state="bad"
    caption="Don’t use long labels or generic labels."
  />
</DoubleDoDontCaution>

Always specify an accessible label for the button. The accessible label can include more detail than is described in the visible label, but make sure that the visible label text is included within the accessible label.

For example, a button may have a visible label that reads ‘Submit’. The accessible label may read ‘Submit form’. This includes more information to aid assistive technology users, but still includes the full visible label.

### Icons

Use an icon on a button to provide additional meaning or to aid in recognition. All button types can display an icon.

Make sure that the icon is understandable and relevant to the action.

Always provide alternative descriptions for icons if they aren't decorative. Only use icons if they are necessary.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={buttonFig18}
    imageAlt="A set of buttons with icons that clearly relate to the action. The icons used are a circle arrow for refresh, a floppy disk for save, a back arrow for go back, and a bin for delete."
    state="good"
    caption="Use icons with clear meaning to add clarity to the action."
  />
  <DoDontCaution
    imageSrc={buttonFig19}
    imageAlt="A set of buttons with icons that are unrelated to the action. The icons used are a Christmas tree for refresh, a padlock for save, a box rectangle for go back and a box cross for delete."
    state="bad"
    caption="Don’t use complicated, unrelated or ambiguous icons on buttons."
  />
</DoubleDoDontCaution>

## Accessibility considerations

Add labels to all icon buttons using a [tooltip](/components/tooltip), which is useful to sighted users too.

Use useful and context-free labels. If necessary, add additional context in the accessible label.

## Related components

- [Links](/components/link)
- [Tooltips](/components/tooltip)

---

# Page header

URL: https://design.sis.gov.uk/components/page-header
Status: BETA
Subtitle: A page header defines the top of the page content and is a consistent way to show page context, key actions and secondary navigation.


import {
  IcPageHeader,
  IcButton,
  IcTextField,
  IcStepper,
  IcStep,
  IcChip,
} from "@ukic/react";
import pageHeaderFig1 from "./images/fig-1-page-header-anatomy.png";
import pageHeaderFig2 from "./images/fig-2-dont-use-global-actions-in-a-page-header.png";
import pageHeaderFig3 from "./images/fig-3-use-default-and-dense-sizing.png";
import pageHeaderFig4 from "./images/fig-4-set-width-of-page-header-to-match-width-of-main-content.png";
import pageHeaderFig5 from "./images/fig-5-dont-set-width-of-page-header-to-align-to-content.png";
import pageHeaderFig6 from "./images/fig-6-page-header-displayed-whilst-scroll-position-is-at-top-of-page.png";
import pageHeaderFig7 from "./images/fig-7-sticky-page-header-displayed-whilst-scrolled.png";
import pageHeaderFig8 from "./images/fig-8-centre-alignment.png";
import pageHeaderFig9 from "./images/fig-9-left-alignment.png";
import pageHeaderFig10 from "./images/fig-10-full-width.png";
import pageHeaderFig11 from "./images/fig-11-dont-mix-alignment.png";

## Introduction

An example of the page header component.

<ComponentPreview>
  <IcPageHeader
    heading="Latte recipe"
    subheading="A latte is a popular Italian coffee, made with espresso, steamed milk and a thin layer of foam. "
    reverseOrder
  >
    <IcChip slot="heading-adornment" label="BETA" size="large" />
    <IcButton slot="actions" variant="primary">
      Create coffee
    </IcButton>
    <IcButton slot="actions" variant="tertiary">
      Filter coffee
    </IcButton>
    <IcStepper slot="stepper">
      <IcStep stepTitle="Warm kettle" stepType="completed" />
      <IcStep
        stepTitle="Warm milk"
        stepSubtitle="Optional"
        stepType="completed"
      />
      <IcStep stepTitle="Pour milk" stepType="current" />
    </IcStepper>
    <IcTextField
      slot="input"
      placeholder="Search for ingredients…"
      label="Input"
      hideLabel
    />
  </IcPageHeader>
</ComponentPreview>

## When to use

Use a page header to display an introduction to the content of the page. Add additional elements to provide actions, navigation or inputs at the page level.

<DoDontCaution
  imageSrc={pageHeaderFig1}
  imageAlt="A diagram showing the positioning of the content areas within a page header. The content areas are a breadcrumb area, a title area, an action area, an input area, and a navigation area. "
  state="none"
  caption="The anatomy of a page header that includes areas for breadcrumbs, titling, actions, inputs and additional navigation.  "
/>

### With action

Use [buttons](/components/button) when you need to provide actions that affect all content on the page, for example to filter or to add a new record. Only use one primary button per page header. Use any type of button within the page header’s interaction area.

### With input

Include an [input field](/components/search-bar) to search or filter data displayed on the page. Don’t overload the input area with components, consider placing them in the page content instead.

### With breadcrumb navigation

Use a [breadcrumb](/components/breadcrumb) to show the current page’s position in the app’s hierarchy or show a link to the parent page.

### With navigation items

Use [navigation items](/components/top-navigation/code/#navigation-item-details) if the content grouped by the header can be split into distinct categories.

### With stepper

Use a [stepper](/components/stepper) to show progress through a multi-step process.

## When not to use

Don’t use the page header to include global actions or global navigation, instead use the [top navigation](/components/top-navigation) or [side navigation](/components/side-navigation).

<DoDontCaution
  imageSrc={pageHeaderFig2}
  imageAlt="An example app called ‘Better latte than never’ that displays a page titled ‘Top 5 reasons why coffee is a way better choice than tea’. The page’s page header contains an action button titled ‘Main menu’."
  state="bad"
  caption="Don‘t use global actions within a page header."
/>

## Sizing

<DoDontCaution
  imageSrc={pageHeaderFig3}
  imageAlt="A default sized page header with a large title that says ‘Grande Frappé’ and small sized page header with the same title displayed much smaller."
  state="none"
  caption="An example of default and small sized page headers."
/>

Set the width of the page header to match the width of the page’s main content.

<DoDontCaution
  imageSrc={pageHeaderFig4}
  imageAlt="An example app titled ‘Better latte than never’ showing a page called ‘Top 5 reasons why coffee is better than tea’ with a page header that spans the full width of the content area."
  state="good"
  caption="Set the width of the page header to fill the page’s main content area.  "
/>

<DoDontCaution
  imageSrc={pageHeaderFig5}
  imageAlt="An example app titled ‘Better latte than never’ showing a page called ‘Top 5 reasons why coffee is better than tea’ with a page header that is indented from the page margins to align with the page’s example content."
  state="bad"
  caption="Don’t set the width of the page header to align with content. The page header content will align to your content container automatically."
/>

## Layout and placement

### Sticky scroll

Set the page header to stick to the top of the screen if you need it to be visible when scrolling. Otherwise, set it to scroll with content to maximise available space for content.

<DoDontCaution
  imageSrc={pageHeaderFig6}
  imageAlt="An example app title ‘better latte than never’ that shows the top navigation component at the top of the screen, a page header below it, and some example content below that."
  state="none"
  caption="The page header sits at the top of the page when scrolled to the top."
/>

<DoDontCaution
  imageSrc={pageHeaderFig7}
  imageAlt="An example app that is scrolled partway down the page. A page header is displayed stuck to the top of the screen and overlaying other example content."
  state="none"
  caption="A sticky page header stays at the top of the screen when scrolling down the page."
/>

### Alignment

Align the page header either to the left, centre or full-width to match the rest of the content on the page.

<DoDontCaution
  imageSrc={pageHeaderFig9}
  imageAlt="An example app that shows a page header and some example content. The page header’s title, description and action button are aligned to the left hand side of the screen, and the example page content below is also aligned to the left of the screen."
  state="good"
  caption="Use left alignment to position page header content to the left of the page container."
/>

<DoDontCaution
  imageSrc={pageHeaderFig8}
  imageAlt="An example app that shows a page header and some example content. The page header’s title, description and action button are aligned to the centre of the screen, and the example page content below is also aligned to the centre of the screen."
  state="good"
  caption="Use centred alignment to position page header content to the middle of the page container."
/>

<DoDontCaution
  imageSrc={pageHeaderFig10}
  imageAlt="An example app that shows a page header and some example content. The page header’s content spans the full screen width with its title and description aligned to the left margin and its action button aligned to the right margin. The example page content below is aligned to the centre of the screen."
  state="good"
  caption="Use full-width to align page header content to the left and right margins of the page container."
/>

Don’t align a page header’s content differently to how the rest of the page content is aligned.

<DoDontCaution
  imageSrc={pageHeaderFig11}
  imageAlt="An example app that shows a page header and some example content. The page header’s content is aligned to the left of the screen. The example page content below is aligned to the centre of the screen."
  state="bad"
  caption="Don’t mix alignments in an app. Here the page header’s content has left alignment, whereas the rest of the page content is centre aligned."
/>

## Content

Use short titles that clearly describe the page's content.

Keep page subtitles concise within the page header. If more content is required, consider placing it within the page itself.

Include a title adornment to convey information such as a status or versioning.

## Related components

- [Hero](/components/hero)
- [Top navigation](/components/top-navigation)
- [Side navigation](/components/side-navigation)

---

# Roadmap

URL: https://design.sis.gov.uk/community/roadmap
Subtitle: Our roadmap shows an overview of recent work, current focus and work we have planned.


## Introduction

The purpose of sharing the roadmap is to give our community an insight into our strategic plan, goals and milestones.

Priorities may change because of organisation strategies, or community requirements. We will aim to keep this page up to date.

We welcome contributions of code, issues raised and more. You can read more about [how to contribute](/community/contribute).

Check out our [GitHub](https://github.com/orgs/mi6/projects/2/views/1) for a more detailed view of our day-to-day activities.

## Recently shipped

- Canary release of [data table component](/components/data-table).
- Canary release of [date input component](/components/date-input).
- Canary release of [date picker component](/components/date-picker).
- Canary release of [multi-select component](/components/multi-select).
- Development of [top navigation layout pattern](/patterns/navigation-patterns/top-navigation-layout).
- Development of [side navigation layout pattern](/patterns/navigation-patterns/side-navigation-layout).
- Development of [file upload component](/components/button/code/#file-upload).
- Development of [toggle button component](/components/toggle-button).
- Added [component images to component galley](/components).

## Current focus

- Customisation and theming of colours and components within the library.
- Understand the scope for dark mode.
- Development of drawer component.
- Development of tree navigation component.
- Continue Cypress test migration.
- Development of form pattern.
- Add StackBlitz and show more show less functionality to component demos.

## Future

- Understand the scope for v3 of the Design System.

---

# Select

URL: https://design.sis.gov.uk/components/select
Status: BETA
Subtitle: Selects allow users to select one or more values from a list of options.


import { IcSelect } from "@ukic/react";
import selectFig1 from "./images/fig-1-use-radio-or-checkbox-groups-when-less-than-four-options-are-available2x.png";
import selectFig2 from "./images/fig-2-dont-use-dropdowns-when-displaying-a-limited-number-of-options2x.png";
import selectFig3 from "./images/fig-3-use-labels-to-indicate-the-title-of-the-field.png";
import selectFig4 from "./images/fig-4-dont-replace-labels-with-placeholder-text.png";
import selectFig5 from "./images/fig-5-use-a-standard-select-when-providing-less-than-ten-options.png";
import selectFig6 from "./images/fig-6-do-not-use-the-searchable-variant-when-providing-less-than-ten-options.png";

## Component variants

There are two types of select component:

- Single-select
- Multi-select

### Single-select

An example of the single-select component.

export const SelectExample = () => (
  <IcSelect
    placeholder="Select an option..."
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
);

<ComponentPreview>
  <SelectExample />
</ComponentPreview>

### Multi-select

The multi-select is currently released in our canary packages, which means it is likely to change in future releases. Guidance and documentation can be found on the [multi-select page](/components/multi-select).

## When to use

Use the select component to allow the user to choose one or more options from four or more items. For less than four, use a [radio group](/components/radio) or a [checkbox group](/components/checkbox).
When more than ten options are available, consider using the [searchable variant](/components/select#searchable-single-select) of select to allow users to search the options, rather than scroll through the dropdown list.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={selectFig1}
    imageAlt="A graphic of a radio group labelled 'Single or double shot?' with two radio buttons labelled 'Single' and 'Double'."
    state="good"
    caption="Use radio or checkbox groups when less than four options are available."
  />
  <DoDontCaution
    imageSrc={selectFig2}
    imageAlt="A graphic of a select component labelled 'Single or double shot?' with two options 'Single' and 'Double' in the dropdown list."
    state="bad"
    caption="Don’t use select when displaying a limited number of options."
  />
</DoubleDoDontCaution>

## Validation

Real-time validation helps the user streamline their process and efficiently complete a form. All error validation should be accompanied by an error label.

## Content

### Option list

The options display a label by default for the option list, which can also include a description or custom elements. Any custom elements used should be non-interactive, such as status tags or icons.

Use a default option list to display all options without any grouping or recommendations.

#### Recommended

Use an option list with recommendations to display specific options at the top of the list for quick access.

#### Groups

Use an option list with groups to combine the options into groups with descriptive headings.

### Labels

Clear labels help users understand what information they should provide.

Labels should always be visible regardless of the state of the field and should be announced by a screen reader on focus.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={selectFig3}
    imageAlt="A graphic of a select component with the label 'Coffee type' and placeholder text 'Select one'."
    state="good"
    caption="Use labels to indicate the title of the field."
  />
  <DoDontCaution
    imageSrc={selectFig4}
    imageAlt="A graphic of a select component with no label and the placeholder text 'Coffee type'."
    state="bad"
    caption="Don't replace labels with placeholder text."
  />
</DoubleDoDontCaution>

### Helper text

Helper text should be included when additional information can help the user to either provide the right information or understand why or how the information will be used.

Make sure any helper text that appears under an input is read when an assistive technology user stops at an input using ARIA.

### Dismissible inputs

Always allow the user to clear their selection by including a clear button inside the input field.

## Searchable (single-select)

export const SearchableSelectExample = () => (
  <IcSelect
    label="What is your favourite coffee?"
    options={[
      { label: "Cappuccino", value: "Cap" },
      { label: "Latte", value: "Lat" },
      { label: "Americano", value: "Ame" },
      { label: "Flat white", value: "Fla" },
      { label: "Mocha", value: "Moc" },
      { label: "Macchiato", value: "Mac" },
      { label: "Café au lait", value: "Caf" },
      { label: "Espresso", value: "Esp" },
      { label: "Cortado", value: "Cor" },
      { label: "Latte macchiato", value: "Lam" },
    ]}
    searchable
    onIcChange={(event) => console.log(event.detail.value)}
  />
);

<ComponentPreview>
  <SearchableSelectExample />
</ComponentPreview>

The single-select component can be set to be searchable to filter options in the option list. A user can open the option list to view the available options, but can also type into the input field to filter the option list to more easily find the desired option.

Use the searchable variant when including several options in the option list, so that the user can quickly filter their desired selection.

Don’t use the searchable variant when providing less than ten options. The added functionality for short lists may confuse users while providing no benefit to their experience.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={selectFig5}
    imageAlt="A graphic of a select component with the label 'What’s your favourite type of coffee' and five options in the dropdown list."
    state="good"
    caption="Use a standard select when providing less than ten options."
  />
  <DoDontCaution
    imageSrc={selectFig6}
    imageAlt="A graphic of a select component with searchable functionality with the label 'What’s your favourite type of coffee' and five options in the dropdown list. Focus is on the input field rather than the dropdown list."
    state="bad"
    caption="Don’t use the searchable variant when providing less than ten options."
  />
</DoubleDoDontCaution>

### Content

The component can be configured to show values that either match the search term, or show values that contain the search term. For example, United Kingdom matches the search term ‘Un’, and Tunisia contains the search term ‘Un’.

For searches that take time to load results or suggestions, display the loading state whilst the search is loading. Use the empty state for searches that have no results or suggested options.

## Related components

- [Search bar](/components/search-bar)

---

# Date picker

URL: https://design.sis.gov.uk/components/date-picker/accessibility
Status: CANARY
Subtitle: A date picker is a type of drop-down control that allows people to easily view and select dates.


## Easy to use for everyone

A [date input](/components/date-input) is contained within the date picker.

Focus is managed in three sections within the date picker. The top section is managed left to right, through month and year selectors. The middle section contains the calendar view or month / year list, with focus depending on navigation method used. The bottom section contains the ‘go to today’ and ‘clear’ buttons, with focus managed left to right.

The date picker should act as a focus trap so the user only cycles through the date picker dropdown when the date picker is open.

Use the clear icon in a [date input](/components/date-input) or clear button in a date picker to clear an input.

The date picker can be navigated with keyboard only input.

## For Assistive Technology

When moving to a date selection, screen readers will announce in the format “Monday 06 October 2023”.

When focussing the date picker calendar dates, screen readers will announce the date as weekday, date, month and year sequentially, for example “Choose Wednesday, 8 November 2023”.

When focus is trapped in the date picker dropdown screen, reader should announce route to exit focus. For example, “ic-date-picker, 03 July 2024, press ESC to exit”.

The date picker will only open when users select the date picker icon from within date input.

## Based on

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/examples/datepicker-dialog/ "
      rel="noreferer noopener nofollow"
    >
      Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium
    </ic-link>
    , published 24 July 2023, accessed August 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-datepicker/ "
      rel="noreferer noopener nofollow"
    >
      Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium
    </ic-link>
    , published 05 June 2018, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/date-input/"
      rel="noreferer noopener nofollow"
    >
      Date picker UX design guidelines, Nielson Norman Group
    </ic-link>
    , published 22 January 2017.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.aditus.io/patterns/accordion/"
      rel="noreferer noopener nofollow"
    >
      Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium
    </ic-link>
    , published 20 June 2023, accessed February 2024.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Data table

URL: https://design.sis.gov.uk/components/data-table
Status: CANARY
Subtitle: Use a data table to organise and display large quantities of related data.


import { IcAlert, IcLink } from "@ukic/react";
import { IcDataTable } from "@ukic/canary-react";
import { COLUMNS, DATA } from "./story-data";

<IcAlert
  heading="Canary component"
  variant="info"
  message="This component is new and its guidance will be updated over time."
/>

## Canary components

Canary components are unstable components that are released for testing purposes.

We value any feedback from users willing to try them in their applications.

These components should not be used in production apps without understanding the risk that changes may occur in order to fix bugs or improve functionality.

For more information on Canary components, read our approach to [releases and versions](/get-started/releases-versions).

<p>
  Additional details on the props and events for this component can be found in
  the{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-web-components/?path=/docs/web-components-data-table--docs"
    target="_blank"
  >
    Canary web components
  </IcLink>{" "}
  and{" "}
  <IcLink
    href="https://mi6.github.io/ic-ui-kit/branches/develop/canary-react/?path=/docs/react-components-data-table--docs"
    target="_blank"
  >
    Canary React
  </IcLink>{" "}
  storybooks.
</p>

## Component demo

<ComponentPreview>
  <IcDataTable caption="Basic" columns={COLUMNS} data={DATA} />
</ComponentPreview>

---

# Date input

URL: https://design.sis.gov.uk/components/date-input/accessibility
Status: CANARY
Subtitle: A date input is used when gathering a specific date in a text-based format.


## Easy to use for everyone

### Keyboard navigation

The day, month and year values of a date input focus from left to right with focus moving between each date element.

The day, month and year values can be updated using the up and down arrow keys. For example, if hovering day input, people can use the arrow keys to increase or decrease the day.

Pressing tab and shift tab will move the cursor between day, month and year. Pressing forward slash or dash (hyphen), will move the cursor from left to right as these are commonly used date separators.

People can copy and paste into a date input component to quickly input a date into the date input field.

## For assistive technology

### Screen readers

To aid people in understanding how to navigate through a date input, the label, helper text and date input description are initially read out. The description announced for the date input includes the date format (if there is custom helper text) and how to add values using the arrow keys.

When selecting the day using the arrow keys, the day and then the phrase 'day' is announced, for example "01, day".

When selecting the month using arrow keys, the following message is announced, "01 – January, month".

When selecting the year using arrow keys, the year and phrase 'year' are announced. For example, "2024, year".

If further updates to the input are made once day, month and year have been set, the screen reader will announce "Selected date: _date changed to_". For example, if the input was changed from 01/01/2023 to 02/01/2023, it will announce "Selected date: Monday 2, January 2023".

## Based on

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/concurrent-input-mechanisms.html"
      rel="noreferer noopener nofollow"
    >
      Concurrent input mechanisms
    </ic-link>
    , Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium,
    published 05 October 2023, accessed February 2024.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/WCAG22/#identify-input-purpose"
      rel="noreferer noopener nofollow"
    >
      Identify input purpose
    </ic-link>
    , Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium,
    published 05 October 2023, accessed February 2024.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/WCAG22/#input-modalities"
      rel="noreferer noopener nofollow"
    >
      Input modalities
    </ic-link>
    , Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium,
    published 05 October 2023, accessed February 2024.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/WCAG22/#input-assistance"
      rel="noreferer noopener nofollow"
    >
      Input assistance
    </ic-link>
    , Web Content Accessibility Guidelines (WCAG) 2.2, World Wide Web Consortium,
    published 05 October 2023, accessed February 2024.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Gatsby

URL: https://design.sis.gov.uk/get-started/install-components/gatsby
Subtitle: How to use the components in a Gatsby-based application.


import { IcAlert } from "@ukic/react";

<IcAlert
  heading="Locking packages"
  variant="info"
  message="If you lock the React components to a particular version, you should also install and lock the corresponding web components package."
  dismissible
/>

## Step one

In the root of your project:

```shell
// using npm
npm install @ukic/react @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/react @ukic/fonts
```

## Step Two

Install the `gatsby-plugin-stencil` package to allow Gatsby to render the components server-side.

```shell
// using npm
npm install --save gatsby-plugin-stencil
```

## Step three

In your `gatsby-config.js` file (at the root of the project), add the following:

```js
plugins: [
  {
    resolve: `gatsby-plugin-stencil`,

    options: {
      module: "@ukic/web-components",
      renderToStringOptions: {
        prettyHtml: true,
      },
    },
  },
];
```

## Step four

Add the following to the top level index file of your project.

```jsx
import "@ukic/fonts/dist/fonts.css";
import "@ukic/react/dist/core/core.css";
```

<br />

<p>
  In order to be rendered consistently across browsers and in line with modern
  standards, each of the components uses styles from a global CSS file based on{" "}
  <ic-link
    target="_blank"
    href="https://necolas.github.io/normalize.css/"
    rel="noreferer noopener nofollow"
  >
    Normalize.css
  </ic-link>
  .
</p>

If you would like to import these styles to apply them to the rest of your project
and slotted elements used within any of the components, add the following into
the top level index file as well.

```jsx
import "@ukic/react/dist/core/normalize.css";
```

## Step five

Import the component(s) in your Gatsby pages.

```jsx
import { IcComponent } from "@ukic/react";
```

## Helpful links

<p>
  The Gatsby documentation contains more information on the{" "}
  <ic-link
    target="_blank"
    href="https://www.gatsbyjs.com/plugins/gatsby-plugin-stencil/"
    rel="noreferer noopener nofollow"
  >
    gatsby-plugin-stencil
  </ic-link>{" "}
  plugin. Further information can be found on{" "}
  <ic-link
    target="_blank"
    href="https://dev.to/brunnerlivio/use-stencil-with-gatsbyjs-1omo"
    rel="noreferer noopener nofollow"
  >
    using Stencil web components in Gatsby
  </ic-link>
  .
</p>

---

# React

URL: https://design.sis.gov.uk/get-started/install-components/react
Subtitle: How to use the components in a React-based application.


import { IcAlert } from "@ukic/react";

<IcAlert
  heading="Locking packages"
  variant="info"
  message="If you lock the React components to a particular version, you should also install and lock the corresponding web components package."
  dismissible
/>

## Step one

In the root of your project:

```shell
// using npm
npm install @ukic/react @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/react @ukic/fonts
```

## Step two

Add the following into the top level CSS file for your project.

```css
@import "@ukic/fonts/dist/fonts.css";
@import "@ukic/react/dist/core/core.css";
```

<p>
  In order to be rendered consistently across browsers and in line with modern
  standards, each of the components uses styles from a global CSS file based on{" "}
  <ic-link
    target="_blank"
    href="https://necolas.github.io/normalize.css/"
    rel="noreferer noopener nofollow"
  >
    Normalize.css
  </ic-link>
  .
</p>

If you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the components, add the following into the top level CSS file as well.

```css
@import "@ukic/react/dist/core/normalize.css";
```

## Step three

Import the component(s) in your React files.

```jsx
import { IcComponent } from "@ukic/react";
```

## Working with slotted SVGs

### Step one

To slot an SVG into one of our React components, import the `SlottedSVG` component from `@ukic/react` into your React files. This will prevent an error stating that property 'slot' doesn't exist.

<p>
  To scale the icons, use the{" "}
  <ic-link
    target="_blank"
    href="https://css-tricks.com/scale-svg/#aa-the-viewbox-attribute"
    rel="noreferer noopener nofollow"
  >
    <code style={{ backgroundColor: "#EEEFF0", color: "black" }}>viewBox</code>{" "}
    attribute
  </ic-link>
  .
</p>

```jsx
import { SlottedSVG } from "@ukic/react";
```

### Step two

Replace any instances of `<svg>` with `<SlottedSVG>`.

```jsx
//Before
<IcTopNavigation appTitle="App title">
  <svg slot="app-icon" path={path} />
  <svg slot="app-icon">
    <path d="..." />
  </svg>
</IcTopNavigation>

//After
<IcTopNavigation appTitle="App title">
  {/* Can be implemented either way */}
  <SlottedSVG slot="app-icon" path={path} viewBox="0 0 24 24" />
  <SlottedSVG slot="app-icon" viewBox="0 0 24 24">
    <path d="..." />

  </SlottedSVG>
</IcTopNavigation>
```

### Using Material Design Icons (MDI) with SlottedSVG

To use `<SlottedSVG>` with MDI Icons, install and import the `@mdi/js` package.

```bash
npm i @mdi/js
```

```jsx
import { mdiHome } from "@mdi/js";

<IcTopNavigation appTitle="App title">
  <SlottedSVG slot="app-icon" path={mdiHome} viewBox="0 0 24 24" />
</IcTopNavigation>;
```

---

# Svelte

URL: https://design.sis.gov.uk/get-started/install-components/svelte
Subtitle: How to use the components in a Svelte-based application.


import { IcAlert } from "@ukic/react";

<IcAlert
  variant="info"
  heading="Version check"
  message="These instructions were used with Svelte version 3.50.1."
/>

## Step one

In the root of your project:

```shell
// using npm
npm install @ukic/web-components @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/web-components @ukic/fonts
```

## Step two

Import defineCustomElements in your `main.ts` file.

```jsx
import { defineCustomElements } from "@ukic/web-components/loader";
```

## Step three

Call defineCustomElements in your `main.ts` file:

```jsx
//other configuration
...
defineCustomElements();
```

## Step four

Add the following into the top level CSS file for your project. For newly generated Svelte projects this will be `src/global.css`.

```css
@import "@ukic/fonts/dist/fonts.css";
@import "@ukic/web-components/dist/core/core.css";
```

<br />

<p>
  In order to be rendered consistently across browsers and in line with modern
  standards, each of the components uses styles from a global CSS file based on{" "}
  <ic-link
    target="_blank"
    href="https://necolas.github.io/normalize.css/"
    rel="noreferer noopener nofollow"
  >
    Normalize.css
  </ic-link>
  .
</p>

If you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the components, add the following into the top level CSS file as well.

```css
@import "@ukic/web-components/dist/core/normalize.css";
```

## Step five

In your HTML, you can now declare a component as follows:

```html
<ic-status-tag label="Neutral"></ic-status-tag>
```

---

# Vue

URL: https://design.sis.gov.uk/get-started/install-components/vue
Subtitle: How to use the components in a Vue-based application.


import { IcAlert } from "@ukic/react";

<IcAlert
  variant="info"
  heading="Version check"
  message="These instructions were used with Vue version 3.2.31."
/>

## Step one

In the root of your project:

```shell
// using npm
npm install @ukic/web-components @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/web-components @ukic/fonts
```

## Step two

Add options into your relevant config.

### In-Browser config

```jsx
// Only works if using in-browser compilation.
app.config.compilerOptions.isCustomElement = (tag) => tag.includes("-");
```

### Vite config

```jsx
// vite.config.js
import vue from "@vitejs/plugin-vue";

export default {
  plugins: [
    vue({
      template: {
        compilerOptions: {
          // treat all tags with a dash as custom elements
          isCustomElement: (tag) => tag.includes("-"),
        },
      },
    }),
  ],
};
```

### Vue CLI config

```jsx
// vue.config.js
module.exports = {
  chainWebpack: (config) => {
    config.module
      .rule("vue")
      .use("vue-loader")
      .tap((options) => ({
        ...options,
        compilerOptions: {
          // treat any tag that starts with ic- as custom elements
          isCustomElement: (tag) => tag.startsWith("ic-"),
        },
      }));
  },
};
```

## Step three

Import defineCustomElements in your `main.js` file.

```jsx
import { defineCustomElements } from "@ukic/web-components/loader";
```

## Step four

Call defineCustomElements at the bottom of `main.js`.

```jsx
//other configuration
...
defineCustomElements();
```

## Step five

Add the following into the top level CSS file for your project.

```css
@import "@ukic/fonts/dist/fonts.css";
@import "@ukic/web-components/dist/core/core.css";
```

<br />

<p>
  In order to be rendered consistently across browsers and in line with modern
  standards, each of the components uses styles from a global CSS file based on{" "}
  <ic-link
    target="_blank"
    href="https://necolas.github.io/normalize.css/"
    rel="noreferer noopener nofollow"
  >
    Normalize.css
  </ic-link>
  .
</p>

If you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the components, add the following into the top level CSS file as well.

```css
@import "@ukic/web-components/dist/core/normalize.css";
```

## Step six

Declare and use components in your file.

```html
<ic-status-tag label="Neutral"></ic-status-tag>
```

---

# Web components

URL: https://design.sis.gov.uk/get-started/install-components/web-components
Subtitle: How to use the web components.


## Step one

In the root of your project:

```shell
// using npm
npm install @ukic/web-components @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/web-components @ukic/fonts
```

## Step two

Import `defineCustomElements` in your file. Where you do this will depend on your framework or build tool, but the format is as follows:

```jsx
import { defineCustomElements } from "@ukic/web-components/loader";
```

## Step three

Call `defineCustomElements` in your file. Again, the file you edit will depend on your framework or build tool, but the format is as follows:

```jsx
//other code
...
defineCustomElements();
```

## Step four

Depending on your framework or build tool, this can be included in either a CSS file or Javascript\Typescript file.

Add the following into the top level CSS file for your project.

```css
@import "@ukic/fonts/dist/fonts.css";
@import "@ukic/web-components/dist/core/core.css";
```

<br />

<p>
  In order to be rendered consistently across browsers and in line with modern
  standards, each of the components uses styles from a global CSS file based on{" "}
  <ic-link
    target="_blank"
    href="https://necolas.github.io/normalize.css/"
    rel="noreferer noopener nofollow"
  >
    Normalize.css
  </ic-link>
  .
</p>

If you would like to import these styles to apply them to the rest of your project and slotted elements used within any of the components, add the following into the top level CSS file as well.

```css
@import "@ukic/web-components/dist/core/normalize.css";
```

## Step five

In your HTML, you can now declare a component as follows:

```jsx
<ic-status-tag label="Neutral"></ic-status-tag>
```

## Webpack example

Webpack is a tool for bundling web applications. This example assumes the following config in `webpack.config.js`. For more detailed information on Webpack configuration, please refer to the Webpack documentation.

```jsx
const path = require("path");

module.exports = {
  entry: "./src/index.js",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "dist"),
  },
  devServer: {
    static: "./dist",
  },
  mode: "development",
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ["style-loader", "css-loader"],
      },
    ],
  },
};
```

### Step one

```shell
// using npm
npm install @ukic/web-components @ukic/fonts

// using yarn
rm package-lock.json
yarn add @ukic/web-components @ukic/fonts

```

### Step two

In the file defined as the `entry` in the `webpack.config.js`, add the following:

```jsx
//src/index.js
import "@ukic/fonts/dist/fonts.css";
import "@ukic/web-components/dist/core/core.css";

import { defineCustomElements } from "@ukic/web-components/loader";
defineCustomElements();
```

### Step three

You can now use any of the components so long as your HTML page includes the output file defined in your `webpack.config.js`. For example, including an [ic-status-tag](/components/status-tag) below:

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Getting started</title>
  </head>
  <body>
    <script src="dist/main.js"></script>
    <ic-status-tag label="Neutral"></ic-status-tag>
  </body>
</html>
```

---

# Content style

URL: https://design.sis.gov.uk/styles/content-style
Subtitle: People read, understand and consume content in different ways. What we write should be understandable by all, regardless of how they work, think or interact.


## Introduction

The way we write, and [how we present it](/styles), can make or break an experience. Use this content style guide to support readability and engagement of your written content and apps.

<p>
  We've created this guide with inspiration from{" "}
  <ic-link
    target="_blank"
    href="https://mozilla.design/firefox/personality/"
    rel="noreferer noopener nofollow"
  >
    Mozilla
  </ic-link>
  , the <ic-link
    target="_blank"
    href="https://www.gov.uk/guidance/content-design/writing-for-gov-uk"
    rel="noreferer noopener nofollow"
  >
    UK Government Digital Service (GDS)
  </ic-link> and some of the best commercial design systems.
</p>

This guide applies to content you write in apps (like error messages) through to user guides and corporate comms.

Our goal is to create informative, helpful and clear content. This isn't about 'dumbing content down'&mdash;our job is to 'open it up'. We want as many people as possible to understand and engage with what we write.

<p>
  Have a look at{" "}
  <ic-link
    target="_blank"
    href="https://www.gov.uk/government/publications/govuk-content-principles-conventions-and-research-background"
    rel="noreferer noopener nofollow"
  >
    research commissioned by GDS on the impact of style guides.
  </ic-link>
  This will tell you more about why we recommend speaking in an 'active voice', using
  short sentences, subheadings, simple vocabulary and always writing in plain English.
</p>

The more readable text is the more easily users can understand its content. Text with poor readability turns off readers and can make it challenging for them to stay focused.

---

# Grammar and punctuation

URL: https://design.sis.gov.uk/styles/content-style/grammar
Subtitle: Grammar and punctuation are the building blocks of good writing.


## Abbreviations and acronyms

We regularly use abbreviations and acronyms, especially in technology. Write out the words the first time you mention it, then use the short version next time.

For example, write 'Secret Intelligence Service (SIS)' the first time you mention it. Then 'SIS' the second time.

## Ampersands

Don’t use ampersands in body text. “And” should be spelled out in sentences and paragraphs. Spelling out “and” improves readability and makes scanning easier. Use ampersands only if they are part of a logo or in a brand name.

## Paragraphs

A paragraph should be made up of two to three sentences if possible.

## Capitalisation

We don't use block capitals as they're difficult for people to read.

Capitalise proper nouns and write everything else in sentence case. A proper noun is often a specific place, person or thing.

Sentence case is where only the first letter of the first word in a sentence or phrase is capitalised. Using capital letters for special or important words can be highly subjective and can result in inconsistencies across an organisation.

| **Like this...**       | **Not like this...**   |
| 
---

# Numbers, dates and times

URL: https://design.sis.gov.uk/styles/content-style/numbers-dates-and-time
Subtitle: How to write numbers, dates and times consistently.


## Numbers

Write out the number in words if it starts a sentence.

| **Like this...**                                     | **Not like this...**                             |
| 
---

# Principles

URL: https://design.sis.gov.uk/styles/content-style/principles
Subtitle: Use the four writing principles to help create engaging and consistent content.


## Inclusive

We write for everyone. We realise people can interpret our words in different ways.

We assume no existing knowledge or technical skill.

We write non-gendered.

## Human

We write for real people and speak to them as if we're in a conversation.

We use contractions such as it's, you'll, you're, we're, let's and can't (in UI copy).

Read out your writing and check that it sounds natural.

## Useful

We tell people only what they need to know.

We keep content understandable, concise, relevant and to the point.

We write content that is serious but not pompous or emotionless. Adjectives can be subjective and make text sound more emotive.

Shorter sentences are easier for people to scan. They’re more accessible for people who struggle with reading or have a cognitive impairment. Check any sentences with more than 25 words to see if you can split them to make them clearer.

## Simple

Use simple words to make it easier to read.

We write only what we need to and strip excess words from what we write.

We aim for a reading age of 9 to 11 years old. Adults still prefer and recognise the words they learned as a child.

---

# Voice and tone

URL: https://design.sis.gov.uk/styles/content-style/voice-and-tone
Subtitle: Learn how to apply our familiar tongue and how to choose the right tone.


## Voice

Voice is like our personality. When we write, we want to appear that the 'user interface is talking to the user' and remember that everyone needs to understand what we're trying to say.
Therefore our voice is personal, inclusive and plain-spoken.

We:

- Address the user as 'you'.
- Avoid using 'should' as it can sound patronising.
- Use 'can' and 'may' appropriately &ndash; 'can' implies ability and 'may' implies permission and even uncertainty.
- Use language that is open, inclusive to all and that our users want us to use.

## Tone

Tone is like our mood. We adapt our tone depending on the context.

For example, we may use a direct, serious and reassuring tone when writing about a new government legislation or data handling policy.

## Tips

### Active not passive voice

Active voice is easier to read because it identifies the 'thing' that's doing the action.

Words like 'was' or 'by' may indicate that you're writing in a passive voice.

| **Like this...**                               | **Not like this...**                                  |
| 
---

# Why we built a Design System

URL: https://design.sis.gov.uk/get-started/a-design-system


## Our reasons behind building a Design System

Our Design System helps MI6, MI5 and GCHQ to create powerful and accessible capabilities that keep the UK and its partners safe and prosperous.

<p>
  We’ve built our own Design System because of our unique requirements. We
  needed both flexibility and solid accessibility to{" "}
  <ic-link
    target="_blank"
    href="https://gds.blog.gov.uk/2020/02/28/podcast-gov-uk-design-system/"
    rel="noreferer noopener nofollow"
  >
    unlock efficiencies
  </ic-link>{" "}
  at speed.
</p>

We’re passionate about making sure that everyone can contribute equitably to our shared missions. We believe our Design System is the best way to help our teams and partners do that.

## Changing a culture

Building our own Design System and UI Kit allows our teams and partners to join us on this journey. It’s key for our growth that they have a deep understanding of accessibility and good design practice.

We need teams to understand the value of consistent, usable and accessible design. To achieve this across departments, platforms, technologies and skill level requires a collaborative and community-driven approach.

## Game-changing potential

Faster capability development benefits everyone. The Design System has already proven that we can simultaneously speed up and improve the quality of what we build. This means the community and assets we adopt can better serve our fast-changing mission needs and we can be confident in them being accessible.

## This is for everyone

The complexity of the capabilities in use is high and user needs are often open-ended and require a high level of skill. The key value delivered by our Design System is repeatable patterns across a huge number of diverse but interconnected systems.

Inclusion and accessibility are core to our Design System. We’ve put a lot of effort into the atomic design components (such as typography and buttons) to instil confidence in the control of our ecosystem as we learn more about the vast use cases we encounter.

## What now?

We’re interested to see the potential of our work and where it can go now, sharing it with more and more people. Open sourcing is a big step, and opportunity, for MI6, MI5 and GCHQ.

We hope our experiences can support your efforts in improving accessibility and usability of complex government, enterprise and specialist technology.

We want our Design System to continue to evolve and we’re excited to see what happens next.

**- The IC Design System team from MI6, MI5, GCHQ and partners.**

---

# Styles

URL: https://design.sis.gov.uk/styles
Subtitle: This section introduces our style tokens, which describe how things look and feel.


## Introduction

Style tokens are key in creating accessible, usable and consistent experiences. These tokens are used in all [components](/components) and [patterns](/patterns).

We've tested that these styles meet or exceed the [accessibility requirement](/accessibility/requirement).

## Content style

An [inclusive content style](/styles/content-style) means anyone can understand the app or content, regardless of how they work or think.

## Contribute

We are expanding the Design System and UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you can help you can [read more on how to contribute](/community).

---

# CSS and inline styles

URL: https://design.sis.gov.uk/accessibility/coding/css
Subtitle: Follow our accessibility tips for CSS.


## Introduction

Write CSS in a way that can be overridden by the user via their browser.

Don't use inline styles; keep CSS separate to the HTML. This can be a separate CSS stylesheet or via other techniques like CSS-in-JS.

Decoupling the styling will create more flexibility as the visual styling can be updated without touching the HTML.

<p>
  Don't use <code style={{ backgroundColor: "#EEEFF0" }}>!important</code> on a
  style declaration as this overrides any other declarations. You can read more
  information from Mozilla on{" "}
  <ic-link
    target="_blank"
    href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#The_!important_exception"
    rel="noreferer noopener nofollow"
  >
    importance exception
  </ic-link>
  .
</p>

## When it goes wrong

Both inline styles and `!important` will override user-defined styles that can be set using browsers and assistive technologies.

Assistive technologies and users may change browser default styles to improve accessibility. For example, users with visual impairments or dyslexia may increase the font size or override colours.

---

# ARIA

URL: https://design.sis.gov.uk/accessibility/coding/aria
Subtitle: Follow our accessibility tips for ARIA.


## Introduction

Favour native HTML over ARIA.

The Web Accessibility Initiative's [accessible rich internet applications specification](https://www.w3.org/TR/wai-aria/) (WAI-ARIA, or just ARIA) is good for bridging areas with accessibility issues that can't be managed with native HTML.

ARIA does not affect how a page is visually presented. It only changes the information used by assistive technologies.

### The first rule or ARIA

The first rule of [using ARIA](https://www.w3.org/TR/using-aria/) is to favour using native HTML instead of re-purposing an element by adding an ARIA role, state or property to make it accessible.

By using the semantic HTML you not only get an implicit ARIA role, so the browser knows how to interpret the element, but also other standard functionality such as focus, keyboard and mouse support.

### Time to use ARIA

The main situation where ARIA can improve the usability even when semantic HTML has been used is with [live regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).

Live regions mean that any dynamic changes within it will be read out to assistive technologies, useful to identify errors or of a status change, for example.

To make an element a live region, use the `aria-live` attribute or a specialised live region `role` such as `role=”alert”`.

If you do have to add ARIA to unsemantic HTML, remember it’s not just about applying the right `role`, you also need to ensure all the other standard functionality is also applied including focus, keyboard and mouse support.

### Learn more about ARIA

To learn more about ARIA:

<ul>
  <li>
    Deque has an easily digestible 3 part blog post for the{" "}
    <ic-link
      target="_blank"
      href="https://www.deque.com/?s=ARIA%20Spec%20for%20the%20Uninitiated&post_type=post"
      rel="noreferer noopener nofollow"
    >
      ARIA spec for the uninitiated
    </ic-link>
    .
  </li>
  <li>
    Mozilla also covers{" "}
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"
      rel="noreferer noopener nofollow"
    >
      ARIA
    </ic-link>{" "}
    extensively with tutorials and a range of documentation.
  </li>
  <li>
    Google's Web Fundamentals gives a thorough{" "}
    <ic-link
      target="_blank"
      href="https://developers.google.com/web/fundamentals/accessibility/semantics-aria"
      rel="noreferer noopener nofollow"
    >
      introduction to ARIA
    </ic-link>
    .
  </li>
  <li>
    W3’s{" "}
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/using-aria/"
      rel="noreferer noopener nofollow"
    >
      using ARIA
    </ic-link>{" "}
    gives more guidance on how to use ARIA properly including the all five rules
    of ARIA.
  </li>
</ul>

## When it goes wrong

Understanding when and how to use ARIA is key to improving the experience of assistive technology users. Even using ARIA where it’s not needed on semantic HTML can cause undesired effects on assistive technology.

<p>
  Deque’s{" "}
  <ic-link
    target="_blank"
    href="https://www.deque.com/blog/wai-aria-top-6-mistakes-to-avoid/"
    rel="noreferer noopener nofollow"
  >
    WAI-ARIA: Top 6 Mistakes to avoid
  </ic-link>{" "}
  states that “misuse of ARIA creates a more inaccessible experience than one
  without ARIA”.
</p>

---

# Doctypes

URL: https://design.sis.gov.uk/accessibility/coding/doctype
Subtitle: Follow our accessibility tips for doctypes.


## Introduction

All HTML documents must start with a `<!DOCTYPE>` declaration above the `<html>` tag.

This tells the browser how to render the HTML, as in this example:

```html
<!DOCTYPE html>
```

<p>
  This is the HTML5 doctype but W3C provides information on{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/wiki/Doctypes_and_markup_styles"
    rel="noreferer noopener nofollow"
    id="fn-1"
  >
    choosing the right doctype
  </ic-link>
  .
</p>

## When it goes wrong

<p>
  If no valid{" "}
  <code style={{ backgroundColor: "#EEEFF0" }}>&lt;!DOCTYPE&gt;</code> is
  declared, the browser switches to{" "}
  <ic-link
    target="_blank"
    href="https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode"
    rel="noreferer noopener nofollow"
  >
    quirks mode
  </ic-link>
  . This means it emulates non-standard behaviour of deprecated browsers.
</p>

In this case, elements from the HTML5 specification may not parse or render properly. This can cause issues for people who use assistive technologies.

---

# Document structure

URL: https://design.sis.gov.uk/accessibility/coding/document-structure
Subtitle: Follow our accessibility tips for document structure.


## Introduction

Use semantic HTML Elements for document structure. Three semantic elements are used to give overall document structure:

- `<html>` is the root of an HTML document and contains all elements except the `<!DOCTYPE>` declaration.
- `<head>` is the container for metadata such as document title, styles and scripts. The `<head>` element is the first element in the `<html>` element before the `<body>`.
- `<body>` defines the body or content of the HTML document. There can only be one `<body>` in the document.

These elements ensure how a page is displayed is consistent across every browser.

The following example shows the semantic elements for document structure:

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Example accurate and meaningful title</title>
  </head>
  <body>
    <h1>Example content heading</h1>
    <p>Example content paragraph</p>
  </body>
</html>
```

## When it goes wrong

Not using the document structure elements accordingly may mean the page is not correctly rendered in every browser.

<p>
  Omitting the <code style={{ backgroundColor: "#EEEFF0" }}>&lt;html&gt;</code>,{" "}
  <code style={{ backgroundColor: "#EEEFF0" }}>&lt;head&gt;</code> and{" "}
  <code style={{ backgroundColor: "#EEEFF0" }}>&lt;body&gt;</code> is allowed
  under certain conditions in the{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/TR/2011/WD-html5-20110525/syntax.html#optional-tags"
    rel="noreferer noopener nofollow"
  >
    HTML spec
  </ic-link>
  .
</p>

---

# Headings

URL: https://design.sis.gov.uk/accessibility/coding/headings
Subtitle: Follow our accessibility tips for headings.


## Introduction

Use HTML headings `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` and `<h6>` properly.

Headings are hierarchical: `<h1>` is the most important, then `<h2>`, through to `<h6>` being the least important. Use one `<h1>` per page.

Headings at the same level or higher start a new section, whilst headings at a lower level start a subsection. Don't skip heading levels.

If the styling of a heading doesn't look right visually, for example too big or bold, style it with CSS but always use the correct semantic heading.

The text for a heading should be descriptive, meaningful and unique on the page.

## When it goes wrong

When semantic HTML elements for headings aren't used, the page has no structure or definition available to assistive technologies.

Headings provide navigation landmarks, which assistive technologies can navigate over to find the area they want on the page.

Screen readers can navigate and jump to a heading, in the same way as a sighted user would scan for the heading they need.

---

# Semantic HTML

URL: https://design.sis.gov.uk/accessibility/coding/semantic-html
Subtitle: Follow our accessibility tips for semantic HTML.


## Introduction

Use semantic HTML elements.

Semantic elements, such as `<form>` and `<table>`, clearly define their content. Non-semantic elements, such as `<div>` and `<span>`, don't tell us about the meaning of their content and are often overused.

Using correct semantic HTML elements makes web content more accessible.

<p>
  Learn more about{" "}
  <ic-link
    target="_blank"
    href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"
    rel="noreferer noopener nofollow"
  >
    HTML elements
  </ic-link>
  , particularly <code style={{ backgroundColor: "#EEEFF0" }}>&lt;nav&gt;</code>,{" "}
  <code style={{ backgroundColor: "#EEEFF0" }}>&lt;section&gt;</code> and <code
    style={{ backgroundColor: "#EEEFF0" }}
  >
    &lt;role&gt;
  </code>. They're mentioned in <ic-link
    target=""
    href="/accessibility/coding/document-structure"
    rel="noreferer noopener nofollow"
  >
    Document structure
  </ic-link> and <ic-link
    target=""
    href="/accessibility/coding/semantic-layout"
    rel="noreferer noopener nofollow"
  >
    Semantic layout
  </ic-link>.
</p>

## When it goes wrong

When semantic elements aren't used, the page has no structure or definition available to assistive technologies.

Without structure or definition, to assistive technologies it's like viewing all the words on a page together in a single paragraph with the same styling, creating a wall of text.

With semantic elements, assistive technologies can navigate over a page using these semantic elements. For example, screen readers can jump through headings to find the section they want to read.

---

# Semantic layout

URL: https://design.sis.gov.uk/accessibility/coding/semantic-layout
Subtitle: Follow our accessibility tips for layout.


## Introduction

Use semantic HTML elements over non-semantic elements for layouts, such as `<header>` instead of `<div id="header">`.

<p>
  HTML5 introduced{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/TR/html5-diff/#new-elements"
    rel="noreferer noopener nofollow"
  >
    new elements
  </ic-link>{" "}
  to improve structure, including:
</p>

- `<main>` represents the main content of the body of a document or app.
- `<header>` represents a group of introductory or navigational aids.
- `<footer>` represents a footer for a section and can contain information about the author, copyright information, etc.
- `<nav>` represents a section of the document intended for navigation.

## When it goes wrong

When semantic HTML elements for layout aren't used, the page has no structure or definition available to assistive technologies.

These layout elements provide navigation landmarks, which assistive technologies can navigate over to find the area they want on the page. These elements also section content into their defined elements.

---

# Tables

URL: https://design.sis.gov.uk/accessibility/coding/tables
Subtitle: Follow our accessibility tips for tables.


## Introduction

Use HTML table elements only for tabular data.

For ambiguous data or when there are multiple columns, the `scope` attribute can be included in the `<th>` and set to `row` or `col` to denote that a header applies to the entire row or column, respectively.

Use a `<caption>` element to describe, in text, what the table shows. Some apps and services may auto-generate a summary description of data. You can hide this using CSS if you don't want it visible to sighted users.

The HTML example for a table with header cells in the top row and first column:

```html
<table>
  <caption>
    Example table with four columns and three rows
  </caption>
  <tr>
    <th>Table</th>
    <th scope="col">Column Header A</th>
    <th scope="col">Column Header B</th>
    <th scope="col">Column Header C</th>
  </tr>
  <tr>
    <th scope="row">Row Header 1</th>
    <td>data cell A1</td>
    <td>data cell A2</td>
    <td>data cell A3</td>
  </tr>
  <tr>
    <th scope="row">Row Header 2</th>
    <td>data cell B1</td>
    <td>data cell B2</td>
    <td>data cell B3</td>
  </tr>
</table>
```

### Example

<table>
  <caption>Example table with four columns and three rows</caption>
  <tr>
    <th>Table</th>
    <th scope="col">Column Header A</th>
    <th scope="col">Column Header B</th>
    <th scope="col">Column Header C</th>
  </tr>
  <tr>
    <th scope="row">Row Header 1</th>
    <td>data cell A1</td>
    <td>data cell A2</td>
    <td>data cell A3</td>
  </tr>
  <tr>
    <th scope="row">Row Header 2</th>
    <td>data cell B1</td>
    <td>data cell B2</td>
    <td>data cell B3</td>
  </tr>
</table>

## When it goes wrong

If no table HTML elements were used, then there would be no structure or definition of the table available to assistive technologies.

Even missing table headers in a `<table>` means assistive technologies can't associate data cells with the headers. Visual cues aren't enough to make a table inclusive.

Historically, tables were incorrectly used for layouts, which would give assistive technology users a confusing experience. Don't use tables for any layout needs.

Many screen readers will summarise the size of the table when it arrives at one, so our table example would say “Table with 4 columns and 3 rows”.

---

# Titles

URL: https://design.sis.gov.uk/accessibility/coding/title
Subtitle: Follow our accessibility tips for titles.


import { IcAlert } from "@ukic/react";

## Introduction

Each page in a website should have a unique title. Make the `<title>` element as accurate and meaningful as possible.

The title appears in the browser toolbar, search-engine results and default bookmark/favourites name.

This example shows two different titles from different Design System pages:

```html
<!-- https://design.sis.gov.uk/accessibility/coding -->
<title>Coding for accessibility - Intelligence Community Design System</title>

<!-- https://design.sis.gov.uk/accessibility/coding/title -->
<title>Titles - Intelligence Community Design System</title>
```

<IcAlert
  heading="Single Page Apps (SPAs)"
  variant="warning"
  message="In single-page apps, make sure you dynamically update the page title."
/>

## When it goes wrong

If titles aren't unique and descriptive, users must read the content to understand where they are. This makes your app less usable for those using assistive technologies like screen readers.

---

# Contribution criteria

URL: https://design.sis.gov.uk/community/contribute-criteria
Subtitle: The contents of the Design System must be of a high quality, meet user needs and always be accessible.


## Contributing

The Design System Working Group will work with contributors to make sure that all contributions meet our contribution criteria.

| <span style={{width: '12vw', display: 'inline-block'}}>**Criteria**</span> | **Description**                                                                                                                                                                                    |
| 
---

# Accessibility Statement

URL: https://design.sis.gov.uk/icds/accessibility-statement
Subtitle: Accessibility Statement for the Intelligence Community Design System.


## Our Accessibility Statement

This accessibility statement applies to the "Intelligence Community Design System" hosted at design.sis.gov.uk.

This app is managed by the [Secret Intelligence Service (SIS)](https://sis.gov.uk), which is also known as MI6.

We want as many people as possible to be able to use this app. That means we’ve built the app so that you can:

- Zoom in up to 500% without the text spilling off the screen.
- Navigate all of the app using just a keyboard.
- Navigate all of the app using speech recognition software.
- Use all of the app with a screen reader (including the most recent versions of JAWS and VoiceOver).
- Change most colours, contrast levels and fonts (using your browser).

We've also made the text in the app as simple as possible to understand.

[AbilityNet](https://mcmw.abilitynet.org.uk) has advice on making your device easier to use if you have different needs. Search your intranet or contact your IT Service Desk if you're using an offline system.

## How accessible this app is

We are confident that this app is accessible.

### Images and diagrams

The Design System relies on images and diagrams to describe how designs and UI components should look. Some users may find limited value in the 'alt' (or alternative) text that we've been able to provide for these images.

This is especially true if the alternative text is describing colour or layout.

Some images and diagrams in the Design System purposefully show 'bad' or 'non-accessible' examples of designs or UI components.

## Reporting accessibility problems with this app

We're always looking to improve the accessibility of the Design System. If you find any problems not listed in this Statement or think we're not meeting your needs or the needs of others, consider contacting us using the details below.

## Enforcement procedure

The Equality and Human Rights Commission (EHRC) is responsible for enforcing the Public Sector Bodies (Websites and Mobile Applications) (No. 2) Accessibility Regulations 2018 (the 'accessibility regulations').

The responsible organisation for the Design System is SIS.

If you aren't satisfied with the accessibility of this app, consider contacting us using the details below.

If you’re not happy with how we respond to your complaint, contact the [Equality Advisory and Support Service (EASS)](https://www.equalityadvisoryservice.com/).

## Contacting us

Unfortunately, it can be hard to contact any one of the Intelligence Community organisations (SIS, GCHQ and MI5).

There are a few ways you can contact us, and we're trying to make it easier. You can contact us using:

- [Raise an issue on GitHub](https://github.com/mi6/ic-design-system/issues).
- Internal teams can use the service desk if they prefer and we'll add the issue to GitHub.
- Write to P.O. Box 1300, London SE1 1BD, marking your envelope ‘ICDS Website Accessibility’.

It isn't possible to visit us in person.

## Technical information about this app's accessibility

SIS is committed to making this app accessible, in accordance with the [Public Sector Bodies (Websites and Mobile Applications) (No. 2) Accessibility Regulations 2018](https://www.legislation.gov.uk/uksi/2018/952/contents/made).

### Compliance status

This app is fully compliant with the Web Content Accessibility Guidelines version 2.2 AA standard.

### How we tested this app

This app was last tested on 17 January 2024. The testing was carried out by Accessibility Specialists from SIS and [GCHQ](https://gchq.gov.uk).

We tested all types of pages within the app, including documentation and component pages.

We tested:

- Our website at https://design.sis.gov.uk.
- Each of the published ICDS Components.

You can read the <a href="/icds-accessibility-conformance-report-17-01-24.docx" target="_blank">full accessibility test report</a>. This report is called an 'Accessibility Conformance Report'. It's created by filling in a 'Voluntary Product Accessibility Template ®' (VPAT). The VPAT tests if the app complies with WCAG 2.2 criteria.

## Non-accessible content

The content listed below is non-accessible for the following reasons.

### Content that's not within the scope of the accessibility regulations

Some images and diagrams in the Design System purposefully show 'bad' or 'non-accessible' examples of designs or UI components. Because they are core to the service that the Design System is providing, they are exempt from the accessibility regulations.

## Disproportionate burden

We aren't claiming a disproportionate burden to making any part of the Design System compliant to the accessibility regulations.

## What we're doing to improve accessibility

We make sure any new features and content added to the Design System are compliant with the accessibility regulations. All new features are tested against WCAG 2.2 Level AA criteria.

We do this through a combination of manual browser tests, screen reader tests and automated build-time testing.

## Preparation of this accessibility statement

This statement was prepared on 26 March 2021. It was last updated on 18 January 2024.

This app was last tested on 17 January 2024. The testing was carried out by Accessibility Specialists from SIS and GCHQ.

You can read the <a href="/icds-accessibility-conformance-report-17-01-24.docx" target="_blank">full accessibility test report</a>.

---

# Limitations of automated testing

URL: https://design.sis.gov.uk/accessibility/testing/automated-testing-limitation
Subtitle: Automated accessibility testing is essential but it has limitations and only finds between 30-50% of accessibility problems.


## False positives and false assurance

Passing automated accessibility tests doesn't mean your app is accessible, it just means that no common issues were found.

A limitation with automated accessibility testing is that results often need someone to ensure the result is correct. This includes checking for false positives and false negatives.

## WCAG and context

Checks in automated accessibility testing tools have a yes or no outcome. The biggest limitation of these automated tools is that they can't test for context.

<p>
  Deque’s{" "}
  <ic-link
    target="_blank"
    href="https://dequeuniversity.com/checklists/web/guide"
    rel="noreferer noopener nofollow"
  >
    Accessibility Developers' Guide
  </ic-link>{" "}
  shows what type of testing is needed to meet{" "}
  <ic-link
    target=""
    href="/accessibility/requirement/wcag"
    rel="noreferer noopener nofollow"
  >
    WCAG 2.2 Level AA
  </ic-link>
  .
</p>

Of the 66 success criteria needed to meet WCAG AA, there are none that can be met fully with automated testing alone.

## Usability

It's possible for an app to be WCAG 2.2 Level AA compliant but still have usability issues. Some of these usability issues may also be accessibility issues.

Usability and context matter to everyone, including those with accessibility needs. Usability includes user experience, covering whether the tool is effective and efficient.

Manual accessibility testing, and other functional testing, is needed to make sure your apps or services are usable.

## Example: colour contrast

For some success criteria, such as those around colour contrast, automated testing tools are vital.

<p>
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/WCAG22/quickref/?showtechniques=141#contrast-minimum"
    rel="noreferer noopener nofollow"
  >
    1.4.3 Contrast (Minimum)
  </ic-link>{" "}
  requires the visual presentation of text and images of text to have a contrast
  ratio of at least 4.5:1 (with exceptions).
</p>

An automated testing tool can't test for context. For example, it can't tell you if the failing contrast ratio was one of the permitted exceptions, which does actually meet the success criteria, and so returns a false positive.

## Example: alt text

<p>
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/WCAG22/quickref/#text-alternatives"
    rel="noreferer noopener nofollow"
  >
    Guideline 1.1 – Text Alternatives
  </ic-link>{" "}
  requires you to provide text alternatives for any non-text content so that it
  can be changed into other forms people need, such as large print, braille,
  speech, symbols or simpler language.
</p>

Most automated accessibility checking tools will warn you if alternative text does not exist on images. However, automated tools can't tell whether the alternative text provided is useful and providing enough context of the image.

If the alternative text was a file name, such as `alt="picture1234.jpg"`, this would make no sense to the reader.

Likewise, an overly visual description of your app logo does does not provide the reader with the brand recognition, whereas the app name would.

The same image could also be used twice in the same page, but with different purposes, so the alternative text would need to reflect this.

---

# Manual accessibility testing

URL: https://design.sis.gov.uk/accessibility/testing/manual-testing
Subtitle: Manual accessibility testing can include keyboard, screen reader and documentation checks.


import { IcAlert } from "@ukic/react";

## Introduction

Manual accessibility testing is needed to address the [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation).

<p>
  Deque's{" "}
  <ic-link
    target="_blank"
    href="https://dequeuniversity.com/checklists/web/guide"
    rel="noreferer noopener nofollow"
  >
    Accessibility Developers' Guide
  </ic-link>{" "}
  shows what type of testing is needed to meet{" "}
  <ic-link
    target=""
    href="/accessibility/requirement/wcag"
    rel="noreferer noopener nofollow"
  >
    WCAG 2.2 Level AA
  </ic-link>
  .
</p>

## Keyboard-only testing

Keyboard accessibility is one of the most important aspects of accessibility testing and should be carried out frequently during development.

Retrofitting keyboard accessibility can be expensive. This is a problem if libraries and frameworks you use are not accessible, where the options are to fix the component library or swap to a different one.

Some reasons people might rely on a keyboard include:

- People who are [blind](/accessibility/needs/visual) might use a screen reader and are generally unable see the cursor on the screen.
- Users with [motor disabilities](/accessibility/needs/motor) may not have the fine motor movements required for using a mouse.
- People with [chronic conditions](/accessibility/needs/motor), such as Repetitive Strain Injury (RSI), may need to avoid using a mouse.
- There are also power users who prefer to use the keyboard commands and shortcuts for speed and efficiency.

<p>
  WebAIM describes{" "}
  <ic-link
    target="_blank"
    href="https://webaim.org/techniques/keyboard/"
    rel="noreferer noopener nofollow"
  >
    how to test for keyboard accessibility
  </ic-link>
  .
</p>

<p>
  The{" "}
  <ic-link
    target="_blank"
    href="https://accessibilityinsights.io/docs/en/web/overview"
    rel="noreferer noopener nofollow"
  >
    Accessibility Insights
  </ic-link>{" "}
  browser plugin, in FastPass mode, runs the automated checks and has a manual
  check called "Tab Stops".
</p>

<p>
  You can read more specific instructions for{" "}
  <ic-link
    target="_blank"
    href="https://dequeuniversity.com/mac/keyboard-access-mac"
    rel="noreferer noopener nofollow"
  >
    MacOS keyboard-only testing
  </ic-link>
  .
</p>

## Full manual accessibility testing

To fully check for accessibility compliance, you need to work through the WCAG 2.2 Level A and AA criteria.

The WCAG requirements form the basis of the [Accessibility Conformance Report (ACR)](/accessibility/documenting/conformance-report). The ACR is required when your app is released, but the more manual accessibility testing done during development the easier it will be to make your app meet the WCAG standards.

<p>
  The Web Accessibility Initative (WAI) has good documentation on{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/WCAG22/quickref/"
    rel="noreferer noopener nofollow"
  >
    How to Meet WCAG
  </ic-link>{" "}
  for each criterion.
</p>

Full manual testing is required on all the main pages of your app. Many apps use templates and common components so these only need to be tested the once with relevant variants to get full coverage.

<p>
  The Design System recommends the{" "}
  <ic-link
    target="_blank"
    href="https://accessibilityinsights.io/docs/en/web/overview"
    rel="noreferer noopener nofollow"
  >
    Accessibility Insights
  </ic-link>{" "}
  browser plugin in Assessment mode. It runs the automated tests but also guides
  you through manual testing to meet{" "}
  <ic-link
    target=""
    href="/accessibility/requirement/wcag#level-aa"
    rel="noreferer noopener nofollow"
  >
    WCAG AA
  </ic-link>
  .
</p>

<IcAlert
  variant="info"
  message="Once the application is released, it's recommended to do full manual testing for any big features or updates."
/>

### Testing with assistive technologies

[Testing with assistive technologies](/accessibility/testing/assistive-tech-testing) can help to spot accessibility problems that weren't picked up in previous testing.

---

# Accordion

URL: https://design.sis.gov.uk/components/accordion/accessibility
Status: BETA
Subtitle: Accordions are expandable and collapsible sections that are used to show and hide additional content. 


## Easy to use for everyone

We have used `aria-expanded` and `aria-collapsed` so that a screen reader announces the state of the accordion.

When navigating using the keyboard, use the tab button to move focus between accordions, and use the space and enter keys to open or close it.

If an input or actionable functionality is contained within an accordion, this is only accessible when the accordion is open.

If the accordion is closed, we make sure any functionality contained within the accordion is removed from the focus order.

## For Assistive Technology

The accordion component consists of a button and expanded area. The button uses `aria-expanded` so screen readers announce when the accordion panel is on display. `aria-controls` is also applied to the button to identify which expanded area is being controlled by the button.

The expanded content uses `aria-hidden`, which is set to `false` when the accordion is collapsed and `true` when expanded. The expanded content also has a `role` of `region` and `aria-labelled`, which links to the accordion heading within the button.

## Based on

The accordion component is based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/ARIA/apg/patterns/accordion/"
      rel="noreferer noopener nofollow"
    >
      Accordion Pattern, Aria Authoring Practice Guide (APG)
    </ic-link>
    , accessed May 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.scottohara.me/blog/2017/10/25/accordion-release.html"
      rel="noreferer noopener nofollow"
    >
      Accessible ARIA Accordions, Scott O’Hara
    </ic-link>
    , accessed May 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/accordion-icons/#:~:text=Using%20a%20caret%20is%20definitely,using%20no%20signifier%20at%20all"
      rel="noreferer noopener nofollow"
    >
      Accordion Icons: Which Signifiers Work Best?, Nielson Norman Group
    </ic-link>
    , accessed May 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.aditus.io/patterns/accordion/"
      rel="noreferer noopener nofollow"
    >
      Accessible Accordion, Aditus
    </ic-link>
    , accessed May 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://inclusive-components.design/collapsible-sections/ "
      rel="noreferer noopener nofollow"
    >
      Collapsible Sections, Inclusive Components
    </ic-link>
    , accessed May 2023.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Alert

URL: https://design.sis.gov.uk/components/alert/accessibility
Status: BETA
Subtitle: Alerts display a short important message in a way that attracts attention without interrupting the current task.


## Easy to use for everyone

Where alerts are added to a page content, they can be tabbed to follow the logical page content order.

Where both an action button and a dismiss button are included on an alert, focus is first applied to the action button and then the dismiss button.

## For Assistive Technology

Alerts use the `alert` role, creating an `aria-live` region that's rendered on page load. If the alert appears on the page, it constitutes a status update. The `aria-live` region causes the alert to be brought to the attention of assistive technology users.

By default, the alert uses an `aria-live` value of `assertive` to interrupt the user flow to call attention to the status change.

If the alert content is not urgent, consider using an `aria-live` value of `polite` instead. This announces the alert contents after the current element announcement has been completed.

## Based on

The alert component is based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/alert_role"
      rel="noreferer noopener nofollow"
    >
      Alert role, MDN Web Docs
    </ic-link>
    , accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://hiddedevries.nl/en/blog/2017-04-04-how-to-make-inline-error-messages-accessible"
      rel="noreferer noopener nofollow"
    >
      How to make inline error messages accessible
    </ic-link>
    , accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Badge

URL: https://design.sis.gov.uk/components/badge/accessibility
Status: BETA
Subtitle: Badges are attached to other components to provide an indication that something new is available, or that something has changed.


## Easy to use for everyone

Badges provide people with a quick alert of indicating that something new is present or that something has changed. These should always be supplementary methods of conveying the information as they can be hard for everyone to understand their meaning. It is always best to show the information the badge represents in full elsewhere so that it can be understandable by everyone.

## For Assistive Technology

As badges can be displayed or update due to a change in information, such as the number of new emails in an inbox, it is important to make this status change announced by a screen reader. Applying a live region will make sure that a screen reader will announce the change as it happens without requiring the element to be in focus.

Badges allow an accessible label to be provided to add context to what is shown visibly. This can help people who use screen readers understand it better as they may not be able to perceive the visual context of the badge. For example, a badge showing 10 new notifications on an inbox button may be understandable to a sighted user from just the number ‘10’ on the visible label. However, it may aid a screen reader user to include ‘10 new notifications’ in its accessible label. Just make sure to always include the visible label within the accessible label.

## Based on

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/indicators-validations-notifications/"
      rel="noreferer noopener nofollow"
    >
      Indicators, validations and notifications: Pick the correct communication
      option
    </ic-link>
    , Nielsen Norman Group, published 26 July 2015, accessed August 2023
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Back to top

URL: https://design.sis.gov.uk/components/back-to-top/accessibility
Status: BETA
Subtitle: The back to top component helps people quickly return to the top of a long page.


## Easy to use for everyone

The button is located on the bottom right-hand side of a page. This is where users expect to see the button and it's out of the way of most other page content and navigational elements.

The button targets the main landmark in order to move focus to the top of the content and not require keyboard users to tab through all other navigational components.

We’ve made sure the component is WCAG compliant with movable interaction and keyboard accessible elements. When using the back to top button, no motion is applied to the automatic scroll.

The icon-only variant was created to be more accessible on zoom, as the text label on the default variant may obscure page content. The addition of the tooltip allows the label to be displayed on hover or focus.

## For Assistive Technology

Even for short screens, the recommendation is to use a back to top button as it provides people using assistive technology a way to quickly get back to the top of the content.

## Based on

The back to top component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/back-to-top/"
      rel="noreferer noopener nofollow"
    >
      Back to top
    </ic-link>
    , Nielsen Normal Group, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/standards-guidelines/act/rules/0ssw9k/proposed/"
      rel="noreferer noopener nofollow"
    >
      Scrollable element is keyboard accessible
    </ic-link>
    , W3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/animation-from-interactions"
      rel="noreferer noopener nofollow"
    >
      2.3.3 Animation from interactions
    </ic-link>
    , W3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/keyboard"
      rel="noreferer noopener nofollow"
    >
      2.1.1 Keyboard
    </ic-link>
    , W3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/keyboard-no-exception"
      rel="noreferer noopener nofollow"
    >
      2.1.3 Keyboard No Exception
    </ic-link>
    , W3, accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Breadcrumb

URL: https://design.sis.gov.uk/components/breadcrumb/accessibility
Status: BETA
Subtitle: Breadcrumbs show someone where they are in an app’s hierarchy and provide a secondary method of navigating back to parent pages.


## Easy to use for everyone

Breadcrumbs are formed out of a set of links. Each of these links is individually focusable. The breadcrumbs form a navigation landmark with an accessible name of ‘breadcrumbs’ so that they can be easily accessed.

## For Assistive Technology

The separators between links are added programmatically so that they aren't read out by screen readers. The separators are purely decorative so don't need to be announced to the user.

## Based on

The breadcrumbs component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/navigation.html#:~:text=Navigation%20landmarks%20provide%20a%20way,website%20or%20page%20content%20navigation"
      rel="noreferer noopener nofollow"
    >
      Navigation landmarks
    </ic-link>
    , WCS, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://scottaohara.github.io/a11y_breadcrumbs/"
      rel="noreferer noopener nofollow"
    >
      A11y breadcrumbs
    </ic-link>
    , Scott O’Hara, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/breadcrumbs/"
      rel="noreferer noopener nofollow"
    >
      Breadcrumbs
    </ic-link>
    , Nielsen Norman Group, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://w3c.github.io/aria-practices/examples/breadcrumb/index.html"
      rel="noreferer noopener nofollow"
    >
      Breadcrumbs authoring practices
    </ic-link>
    , WCS, accessed May 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Button

URL: https://design.sis.gov.uk/components/button/accessibility
Status: BETA
Subtitle: Buttons are used to allow or encourage people to take an action.


## Easy to use for everyone

When interacting with a button using the keyboard, the button is triggered using the **space** or **enter** key when the button is focused.

## For Assistive Technology

Buttons use the role of `button` as opposed to `link` in order to help users of assistive technology understand that the button is performing an action on the page instead of navigating them to a new location.

## Based on

The button component is based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role"
      rel="noreferer noopener nofollow"
    >
      Button role
    </ic-link>
    , MDN web docs, accessed January 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.deque.com/blog/accessible-aria-buttons/"
      rel="noreferer noopener nofollow"
    >
      Building Accessible Buttons with ARIA
    </ic-link>
    , Deque University, accessed January 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Card

URL: https://design.sis.gov.uk/components/card/accessibility
Status: BETA
Subtitle: Cards are containers used to display structured information or interactive content.


## Easy to use for everyone

Interactive and static cards inherit the accessibility features of the components within the card. Clickable cards act as links, and therefore inherit the accessibility features of links.

## For Assistive Technology

Screen readers should always read the heading first, even when an image is placed at the top of the card. To achieve this, we've re-ordered content using CSS Flexbox layout so that visually the image appears first but is placed after the heading section in HTML.

The container of interactive and static cards is not clickable, and therefore is not focusable. When navigating within the page, the focus switches between the different interactive components of the card.

In the case of clickable cards, since the whole area is interactive, then the whole container is focusable.

Clickable cards inherit the accessibility features of the link style, using an `<a href="">` to wrap the whole component.

Provide as much detail as possible to the purpose of any link or button present within interactive cards, or to the action of a clickable card. If you can't show this within the component, use the `class=”visuallyhidden”` to add descriptive text about the purpose of the call to action(s).

When cards are arranged in group, these should be placed within an unordered list `<ul>`, with each card marked as a list item `<li>` to provide navigational cues for screen readers.

## Based on

The cards component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nomensa.com/blog/how-build-accessible-cards-block-links"
      rel="noreferer noopener nofollow"
    >
      How to build accessible cards-block links
    </ic-link>
    , Joel Strohmeier, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://adrianroselli.com/2020/02/block-links-cards-clickable-regions-etc.html"
      rel="noreferer noopener nofollow"
    >
      Block Links, Cards, Clickable Regions, Rows, Etc.
    </ic-link>
    , Adrian Roselli, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://inclusive-components.design/card"
      rel="noreferer noopener nofollow"
    >
      Cards
    </ic-link>
    , Inclusive components, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://a11y-style-guide.com/style-guide/section-cards.html"
      rel="noreferer noopener nofollow"
    >
      Cards
    </ic-link>
    , A11y style guide, accessed May 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://bbc.github.io/gel/components/card/"
      rel="noreferer noopener nofollow"
    >
      Cards
    </ic-link>
    , BBC, accessed May 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Checkbox

URL: https://design.sis.gov.uk/components/checkbox/accessibility
Status: BETA
Subtitle: Use checkboxes as part of a form, in dialogs and in control areas such as filters or settings.


## Easy to use for everyone

When interacting with checkboxes on a keyboard, the **tab** key moves the focus to each checkbox within a checklist. The checkbox is then checked using the **space** key when the field is focused.

When child fields are displayed beneath checkboxes, the field acts as the child of the checkbox. The field should be included within the focus order so that it's focused directly after the checkbox it belongs to.

When a child field is dynamically displayed after checking a checkbox, then it should be announced as required due to the user’s selection.

## For Assistive Technology

The label of a checkbox group is announced by a screen reader before the checkbox options are announced.

Screen readers will read out the label of the checkbox as well as whether it's checked or not. Checking the checkbox will result in it being read out again.

## Based on

The checkbox component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.a11ymatters.com/pattern/checkbox/"
      rel="noreferer noopener nofollow"
    >
      Accessible Checkbox
    </ic-link>
    , A11y Matters, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox"
      rel="noreferer noopener nofollow"
    >
      Input type = checkbox
    </ic-link>
    , MDN web docs, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role"
      rel="noreferer noopener nofollow"
    >
      ARIA Checkbox role
    </ic-link>
    , MDN Web docs, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.scottohara.me/blog/2018/11/02/tabbing-into-tabs.html"
      rel="noreferer noopener nofollow"
    >
      Trouble tabbing to tabs and cheeky checking checkboxes
    </ic-link>
    , Scott O’hara, accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Chip

URL: https://design.sis.gov.uk/components/chip/accessibility
Status: BETA
Subtitle: Chips are used to filter and present data.


## Easy to use for everyone

Chips can have `aria-labelledby` or `aria-label` tags that provide additional content to the visible label. However, the visible label must be included within the accessible label.

When an interactive chip is disabled, the `aria-disabled` tag is set to `true`.

Make sure that focus is moved to an intuitive element of the page after a chip is dismissed.

When an icon is slotted into a chip, ensure it either has an accessible label provided through alt text on an `<img>`, a title element within an `<svg>`, or an `aria-label`. If the icon is purely decorative, use `aria-hidden=true` to hide it from assistive technology.

## For Assistive Technology

Dismissible chips use the role of button as opposed to link in order to help users of assistive technologies understand that the button is performing an action on the page instead of navigating them to a new location. Users should be aware that activating the button will remove the chip from the list.

## Based on

The chips component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: button role
    </ic-link>
    , MDN web docs, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.lightningdesignsystem.com/components/pills/"
      rel="noreferer noopener nofollow"
    >
      Pills
    </ic-link>
    , Lightning Design System, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://ej2.syncfusion.com/angular/documentation/chips/accessibility/"
      rel="noreferer noopener nofollow"
    >
      Accessibility in Angular Chips component
    </ic-link>
    , Syncfusion, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.telerik.com/kendo-react-ui/components/button/chiplist/accessibility/"
      rel="noreferer noopener nofollow"
    >
      Accessibility: WAI-ARIA support
    </ic-link>
    , KendoReact, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Classification banner

URL: https://design.sis.gov.uk/components/classification-banner/accessibility
Status: BETA
Subtitle: Classification banners are used to show the data classification (also known as protective marking) of an app.


## Easy to use for everyone

Classification banners use colours that have been designed for maximum legibility across a range of colour vision impairments.

## For Assistive Technology

For screen reader users, classification banners feature a hidden label: “The protective marking of this page is:”. The classification banner is also announced as a landmark region.

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Data entity

URL: https://design.sis.gov.uk/components/data-entity/accessibility
Status: BETA
Subtitle: The data entity component displays a group of related data in a consistent and easy to consume way.


## Easy to use for everyone

The data entity component is descriptive and designed to inform the user in a comprehensive format about their inputs before making a submission. By including an interaction area, it provides users with a direct link or action to interact with an individual row.

## For Assistive Technology

The data entity can either be interactive or non-interactive. It is therefore included in the tab-indexing for keyboard navigation as individual entity items, allowing it to be read out by screen readers using the aria-current attribute.

## Based on

The data entity component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://design-system.service.gov.uk/patterns/check-answers/"
      rel="noreferer noopener nofollow"
    >
      Check answers
    </ic-link>
    , GOV.UK Design System, accessed September 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://dwpdigital.blog.gov.uk/2016/07/08/a-live-service-is-not-the-end-of-the-story/"
      rel="noreferer noopener nofollow"
    >
      A live service is not the end of the story
    </ic-link>
    , DWP Digital, accessed September 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://ons-design-system.netlify.app/patterns/check-answers/"
      rel="noreferer noopener nofollow"
    >
      Help users to check answers
    </ic-link>
    , ONS, accessed September 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Dialog

URL: https://design.sis.gov.uk/components/dialog/accessibility
Status: BETA
Subtitle: Dialogs are modal windows that interrupt the user's current task to bring something important to attention.


## Easy to use for everyone

Dialogs always include a dismiss button in the top right to provide a consistent way to quickly close a dialog and return to the previous page. Often, 'cancel' buttons are included in the interaction area at the bottom of the modal. These provide a specific decision to cancel the task, as opposed to simply closing the modal.

When a dialog is open, the page in the background is effectively disabled. It cannot be scrolled and focus cannot be moved to any element on it. This is so that the user's attention is constrained to the content of the dialog until they choose an action to continue.

For dialogs that contain a primary action, focus is automatically applied to the primary action button when opened. This is so that it is easy to perform the main call-to-action if included.

However, if a destructive action button is used, then focus is automatically applied to the dismiss button, as accidentally triggering the destructive action could be problematic. It also emphasises the user decision to choose to continue with the destructive action.

If a dialog contains interactive elements such as inputs or selection methods, then focus is automatically applied to the first interaction element in the body section. This follows a logical tab order when completing a task in a dialog.

When a dialog is closed, focus returns to the element that triggered the dialog in the first place. This helps the user pick up where they left off.

## For Assistive Technology

Dialogs resize to become full-screen on smaller devices to make use of all of the available screen space. This is especially useful when text is resized or the browser window is zoomed.

Dialogs always appear centred so that a consistent location is used to find them. This can be helpful to users of screen magnifiers as the position of dialogs is consistent and therefore easier to find if displayed outside of the magnified area.

Dialogs are announced by screen readers when displayed and their content can be navigated through using the virtual cursor.

## Based on

The dialog component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.scottohara.me/blog/2023/01/26/use-the-dialog-element.html"
      rel="noreferer noopener nofollow"
    >
      Use the dialog element (reasonably)
    </ic-link>
    , Scott O'Hara, published 26th January 2023, accessed February 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.smashingmagazine.com/2021/07/accessible-dialog-from-scratch/"
      rel="noreferer noopener nofollow"
    >
      Creating An Accessible Dialog From Scratch
    </ic-link>
    , Kitty Giraudel, published 28th July 2021, accessed February 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/modal-nonmodal-dialog/"
      rel="noreferer noopener nofollow"
    >
      Modal & Nonmodal Dialogs: When (& When Not) to Use Them
    </ic-link>
    , Therese Fessenden, NNg, published April 23rd 2017, accessed February 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://adrianroselli.com/2020/10/dialog-focus-in-screen-readers.html"
      rel="noreferer noopener nofollow"
    >
      Dialog Focus in Screen Readers
    </ic-link>
    , Adrian Roselli, updated 26th January 2023, accessed February 2023.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Empty state

URL: https://design.sis.gov.uk/components/empty-state/accessibility
Status: BETA
Subtitle: Use the empty state component when there is no content to display. It provides a consistent way of communicating to people what to do next.


## Easy to use for everyone

Providing an empty state is good practice as it informs people that nothing is present when something could be. They allow actions to be provided so that people can continue their tasks and understand that something might be missing.

The empty state component’s text elements provide a way of clearly indicating what the problem is, why it happened, and what action is best to perform next.

Interactive elements within the empty state follow a logical tabbing order.

## For Assistive Technology

Empty state components should be announced by a screen reader if they appear due to another user action on a page. They may constitute a status change on the page so should be announced by a screen region after the change has occurred.

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Footer

URL: https://design.sis.gov.uk/components/footer/accessibility
Status: BETA
Subtitle: Footers are placed at the bottom of the page and can be used for additional links not found in the main navigation.


## Easy to use for everyone

The footer acts as a container for additional information and links. All footer content needs to align to that component's accessibility guidelines.

## For Assistive Technology

As above, all content of the footer should follow their relevant assistive technology guidelines.

Any logos that are included in the footer need to have alt-text assigned. The alt-text should simply be the name of the organisation or entity that the logo describes.

The footer uses the HTML footer page region to allow quick navigation between page regions when using assistive technology. It assigns the `contentinfo` ARIA landmark to adhere to proper page structure and semantics.

## Based on

The footer component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/tutorials/page-structure/regions/"
      rel="noreferer noopener nofollow"
    >
      Page Regions
    </ic-link>
    , W3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/contentinfo_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: contentinfo role
    </ic-link>
    , MDN web docs, accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Hero

URL: https://design.sis.gov.uk/components/hero/accessibility
Status: BETA
Subtitle: A large banner found at the top of page used to introduce page content, provide key actions and add personality.


import heroFig17 from "./images/fig-17-focus-order.png";

## Easy to use for everyone

Hero images use text elements that use semantic headings to provide proper order to the page content.

As hero banners can have different colour backgrounds, we've made sure that the foreground colours adjust automatically to ensure that the correct colour contrast standards are met.

Where images are used, alt-text should always be provided to give a description of the image content.

When using images as the background of the hero, safe areas describe where to leave space in an image so that the foreground content is not interfered with.

## For Assistive Technology

The hero banner uses slots to allow different components to be added. Where these components are interactive, then their normal focus behaviour is used.

The hero's content is ordered for focus in the following way:

- Title section including any subtitles
- Interaction area
- Right-hand section

<DoDontCaution
  imageSrc={heroFig17}
  imageAlt="A diagram of the hero banners main sections. The title section is labelled as first, the interaction section as second and the right-hand section as third."
  state="none"
  caption="The hero's content is ordered with the title section first, then the interaction section, then the right-hand section."
/>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Loading indicator

URL: https://design.sis.gov.uk/components/loading-indicator/accessibility
Status: BETA
Subtitle: Loading indicators help inform users that a request is being processed. Circular and linear indicators provide flexibility in design.


## Easy to use for everyone

Clear labels help convey that a process/component is loading.

We have ensured the loading indicators meet accessibility guidance around colour, speed and movement. Loading indicators should not flash, as this can be problematic for users with particular accessibility needs.

## For Assistive Technology

Loading indicators use the `aria-live` attribute to tell screen reader users that there is dynamic content on the page. `aria-busy` tells assistive tech that the container is getting new content. `aria-busy` will be false when the container isn't refreshing and will be equal to true when the content is reloading.

`aria-live` takes three attributes: `off`, `polite` and `assertive`. While polite doesn’t interrupt the screen reader if other content is being read, assertive will immediately read out the element’s content. Loading indicators use assertive to ensure screen reader users are provided with the same information as other users.

## Based on

The loading indicator component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://dockyard.com/blog/2020/03/02/accessible-loading-indicatorswith-no-extra-elements"
      rel="noreferer noopener nofollow"
    >
      Accessible Loading Indicators—with No Extra Elements!
    </ic-link>
    , James Steinbach, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://carbondesignsystem.com/components/loading/accessibility/"
      rel="noreferer noopener nofollow"
    >
      Loading: Accessibility
    </ic-link>
    , IBM, accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Page header

URL: https://design.sis.gov.uk/components/page-header/accessibility
Status: BETA
Subtitle: A page header defines the top of the page content and is a consistent way to show page context, key actions and secondary navigation.


## Easy to use for everyone

The page header is the start of a page's content, so all `skip to content` links should direct the user here. The page header sits within a page's `main` landmark.

We've made sure that all interactive elements inside of a page header follow the logical tab order.

Even when a page header is set to sticky scroll, it still sits in the normal tab order at the top of the page content.

A page header's child components follow the accessibility considerations outlined in their own guidance.

## For Assistive Technology

Page header titling uses correct heading styles in order to achieve good semantic structure and provide information about structure and content relationships when using assistive technology.

## Based on

The page header component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.a11yproject.com/posts/how-to-accessible-heading-structure/"
      rel="noreferer noopener nofollow"
    >
      Accessible heading structure
    </ic-link>
    , A11y project, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://webaim.org/techniques/semanticstructure/"
      rel="noreferer noopener nofollow"
    >
      Semantic Structure: Regions, Headings and Lists
    </ic-link>
    , WebAIM, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships"
      rel="noreferer noopener nofollow"
    >
      WCAG 2.2 1.3.1 Info and Relationships
    </ic-link>
    , W3, accessed April 2024.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Pagination

URL: https://design.sis.gov.uk/components/pagination/accessibility
Status: BETA
Subtitle: Use the Pagination components to split large amounts of content into pages and navigate between them.


## Easy to use for everyone

The elements within a pagination bar follow a logical tabbing order when moving through them. Buttons are triggered using either the ‘enter’ or ‘space’ key.

The current page is always displayed in the component so that the user knows where in the data set they are.

When the user is at the start or end of the data, the navigation buttons are disabled so that it is clear there is no more data past that point.

Using the items per page selector in the pagination bar allows users to control how much information is available per page. This can help to either simplify complex pages or to increase the information density.

## For Assistive Technology

Each pagination component uses accessible names for buttons that lack meaning in the context of a screen reader. Page buttons that simply have their page number as the visible label are given an accessible label of ‘Go to page X’ so that it is clearer what their function is.

The term ‘page X’ can be overridden in the case that it is not accurate. For example, this can be changed to read ‘sheet X’, ‘set X’, ‘slide X’ instead if it is a better representation.

Similarly, the icon buttons used for next, previous, first and last are also given accessible name so that their action is clearer when announced by a screen reader.

The pagination components use the nav element so that they become navigational landmarks on a page and can therefore be swiftly navigated to by users of assistive technology.

## Based on

The pagination component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.a11ymatters.com/pattern/pagination/"
      rel="noreferer noopener nofollow"
    >
      Accessible Pagination
    </ic-link>
    , Accessibility Matters, published October 2016, accessed March 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://accessibility.blog.gov.uk/2016/05/27/using-navigation-landmarks/"
      rel="noreferer noopener nofollow"
    >
      Using navigation landmarks
    </ic-link>
    , Accessibility in government, published May 2016, accessed March 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://uxplanet.org/ux-infinite-scrolling-vs-pagination-1030d29376f1"
      rel="noreferer noopener nofollow"
    >
      UX: Infinite scrolling vs. Pagination
    </ic-link>
    , Nick Babich, published May 2016, accessed March 2023.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Popover menu

URL: https://design.sis.gov.uk/components/popover-menu/accessibility
Status: BETA
Subtitle: Use popover menus to place actions inside a menu that overlays other page content when opened.


## Easy to use for everyone

Popover menus use the role ‘menu’ and the items within use ‘menuitem’ and ‘menuitemcheckbox’. This enables the menu to be opened using usual keyboard commands. Clicking on a menu item closes the menu after triggering the menu item's action. A menu item's action can also be triggered using the 'Space' and 'Enter' keys. Popover menu groups use the role ‘group’.

Popover menus appear overlaid on other content. When opening a sub-menu, focus is applied to the whole sub-menu and then the items are navigated between using the up and down arrow keys. When focus is moved on, the popover menu closes automatically. Using the ‘Esc’ key will also close the popover menu.

Disabled menu items can still be focussed upon so that the structure of the menu is understandable, even if the menu item can’t be triggered at that time.

## For Assistive Technology

Each menu item within a popover menu can use an aria-label that provides additional context that may not be required in a visible label.

For ease of use, actions can be assigned keyboard shortcuts and these are displayed on the menu item. This information is announced by a screen reader when each menu item is focussed.

When moving between sub-menus in a popover menu, the nested sub-menu’s level is announced by a screen reader so that it is easy to understand whereabouts you are within the menu structure.

## Based on

The popover menu component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/group_role"
      rel="noreferer noopener nofollow"
    >
      Aria Group Role
    </ic-link>
    , MDN Web Docs, accessed 22nd March 2023
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/web/accessibility/aria/roles/menu_role"
      rel="noreferer noopener nofollow"
    >
      Aria Menu Role
    </ic-link>
    , MDN Web Docs, accessed 22nd March 2023
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/menuitem_role"
      rel="noreferer noopener nofollow"
    >
      Aria Menuitem Role
    </ic-link>
    , MDN Web Docs, accessed 22nd March 2023
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/menuitemcheckbox_role"
      rel="noreferer noopener nofollow"
    >
      Aria Menuitemcheckbox Role
    </ic-link>
    , MDN Web Docs, accessed 22nd March 2023
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Radio button

URL: https://design.sis.gov.uk/components/radio/accessibility
Status: BETA
Subtitle: Radio buttons let people select a single option from a list.


## Easy to use for everyone

When interacting with a radio button on a keyboard, the **tab** key moves the focus to the radio group. Once focus is on the radio group, the **arrow** keys move between the radio options. When tabbing to a radio group with an option already selected, the focus is applied to the selected option. Moving through the other radio options using the arrow keys automatically selects the focused option.

When tabbing to a radio group with no option selected, the focus is applied to the first option in the group without selecting the option. The unselected radio button can be selected using the **space** key when the radio button is focused.

When conditional fields are displayed beneath radio buttons, the conditional field acts as the child of the radio button. When the field is dynamically displayed after selecting a radio button, then it should be announced by the screen reader as required based on the user’s current selection. Tabbing on from the radio group should move focus to the dynamically displayed field, and then onwards through the rest of the tab index.

## For Assistive Technology

A container of radio buttons uses the aria role `radiogroup`, with each individual radio identified as `radio`, and uses the `aria-checked` property to denote selection.

Radio buttons always use a label to ensure that their visible text label is announced alongside the radio button.

## Based on

The radio component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/2016/WD-wai-aria-practices-1.1-20160317/examples/radio/radio.html"
      rel="noreferer noopener nofollow"
    >
      Aria radio practices examples
    </ic-link>
    , W3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.a11y-101.com/development/radio-buttons"
      rel="noreferer noopener nofollow"
    >
      Radio buttons
    </ic-link>
    , a11y-101, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/radio_role#keyboard_interactions"
      rel="noreferer noopener nofollow"
    >
      Aria radio role
    </ic-link>
    , MDN web docs, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://design-system.service.gov.uk/components/radios/"
      rel="noreferer noopener nofollow"
    >
      Radio button component
    </ic-link>
    , Government Design System, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/radio-buttons-default-selection/"
      rel="noreferer noopener nofollow"
    >
      Radio buttons: Select one by default or leave all unselected
    </ic-link>
    , Nielsen Norman Group, accessed June 2014.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Search bar

URL: https://design.sis.gov.uk/components/search-bar/accessibility
Status: BETA
Subtitle: The search bar allows users to search for information using keywords or phrases.


import searchBarFig7 from "./images/fig-7-correct-tab-order.png";

## Easy to use for everyone

Placing a close button within the search field when input has been added enhances the accessibility of the component, allowing users to easily remove input and correct their search query without performing multiple actions. Including a visible search button as well as having an associated event with the input field provides multiple ways to search using the keyboard as well as the mouse.

The search variant that shows suggested options provides additional help from an accessibility perspective as it allows users to perform searches quickly without needing to fully enter their input. This is a form of autocomplete and has been made accessible using the keyboard, including **Home** and **End**, as well as the **Esc** key. This is also configured so when there isn’t enough space in the viewport for the dropdown list to fully display beneath the dropdown bar, it's displayed above the input bar.

The focus order through the search field internal elements is as follows:

1. The search field and its option list.
2. The clear button (if visible).
3. The search button (if enabled).

Keyboard users can move focus through options in the drop list using the arrow keys, whilst they can still type into the field to change their search term.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={searchBarFig7}
    imageAlt="A graphic highlighting the tab order between elements in a search field. The search input is annotated with a '1', the close buttons with a '2', and the search button with a '3'."
    state="none"
    caption="Focus is applied first to the input field and its option list, then moves to the close button if visible and search button."
  />
</DoubleDoDontCaution>

The first item in the drop list is focused by default so that if a user clicked the search button or the enter button, the associated action with that option would be triggered. This might be a link to a page, or filling the search field with the selected suggestion.

## For Assistive Technology

When focus is received on the component, the screen-reader will announce a hint explaining how you can move up and down in the dropdown list using the **up**/**down** arrow keys.

When the search is complete, an `aria-live` announcement is used to announce the number of results in the list.

## Based on

The search bar component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://a11y-guidelines.orange.com/en/articles/autocomplete-component/"
      rel="noreferer noopener nofollow"
    >
      Best practices for the accessibility of an autocompletion component
    </ic-link>
    , Orange, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.a11ymatters.com/pattern/accessible-search/"
      rel="noreferer noopener nofollow"
    >
      Accessible Search Form
    </ic-link>
    , a11ymatters, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/search_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: search role
    </ic-link>
    , MDN web docs, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Section container

URL: https://design.sis.gov.uk/components/section-container/accessibility
Status: BETA
Subtitle: Use the section container component to consistently align content within an app.


## Easy to use for everyone

Section containers align content on the page, which helps to form a constant edge from which to read from. This aids swift readability as a user can scan back to the same position to start the next line of content. It supports standard reading scanning patterns by creating a consistent baseline.

The width of a section container is contrained to a maximum width on large devices in order to keep the line length to a readable size.

Consistent alignment also reduces cognitive load when trying to understand content on a page and helps to associate elements to one another through proximity and symmetry.

## Based on

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://nngroup.com"
      rel="noreferer noopener nofollow"
    >
      Text Scanning Patterns: Eyetracking Evidence (nngroup.com)
    </ic-link>
    , accessed December 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://interaction-design.org"
      rel="noreferer noopener nofollow"
    >
      What are the Gestalt Principles? | IxDF (interaction-design.org)
    </ic-link>
    , accessed December 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Select

URL: https://design.sis.gov.uk/components/select/accessibility
Status: BETA
Subtitle: Select allows users to select one or more values from a list of options.


## Easy to use for everyone

We've made sure that you can use the select component with a keyboard, including **home** and **end**, as well as the **esc** key. Options in the dropdown list can be accessed with the **up** and **down** arrow keys.

For the searchable variant, we have included options that allow you to decide the minimum number of characters required before results are returned. This can help show relevant options only. When the query length is less than the required the `aria status` region provides helpful text informing the user they should type in more.

## For Assistive Technology

When focus is received on the component, the screen-reader will announce a hint explaining how you can navigate up and down in the dropdown list (with the **up** and **down** arrow keys).

When the search (asynchronous or otherwise) is complete, there is an `aria-live` announcement to announce the number of results in the list.

## Based on

The select component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.24a11y.com/2019/select-your-poison/"
      rel="noreferer noopener nofollow"
    >
      Select your poison
    </ic-link>
    , 24 Accessibility, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: listbox role
    </ic-link>
    , Mozilla, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://inclusive-components.design/menus-menu-buttons/"
      rel="noreferer noopener nofollow"
    >
      Menus & Menu Buttons
    </ic-link>
    , Inclusive Components, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-autocomplete"
      rel="noreferer noopener nofollow"
    >
      aria-autocomplete
    </ic-link>
    , Mozilla, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Side navigation

URL: https://design.sis.gov.uk/components/side-navigation/accessibility
Status: BETA
Subtitle: Side navigation provides an app's main navigation and is fixed on the left-hand side of the app. It includes the app's name, main navigation and optional secondary links.


## Easy to use for everyone

The side navigation component forms an app's main navigation. Therefore, it always appears at the start of a page's tab index. It also uses a `navigation` landmark to allow quick navigation from anywhere within a page's content.

The side navigation is essentially a group of links ordered vertically in the component. Tabbing through the side navigation content follows the logical order by moving from the top most item to the bottom most item, with the expansion toggle button being the last focusable element in the component before focus is moved to page content.

In a collapsed side navigation, menu option labels are always available in a tooltip by hovering or focusing on the icon button. Any truncated text can also be accessed through use of tooltips in this way.

## For Assistive Technology

Icon-only menu options have accessible labels that are announced by a screen reader when focused.

Collapsible option groups use `aria-expanded` to indicate whether the group is open or closed. If closed, focus skips over the group's content to the next elements. If open, each menu item in the group is included in the tab order. Collapsible option groups can be opened or closed using the **enter** or **space** key.

## Based on

The side navigation component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/GL/wiki/Using_ARIA_landmarks_to_identify_regions_of_a_page"
      rel="noreferer noopener nofollow"
    >
      Using ARIA landmarks to identify regions of a page
    </ic-link>
    , W3, accessed June 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.aditus.io/patterns/accordion/"
      rel="noreferer noopener nofollow"
    >
      Accessible Accordion
    </ic-link>
    , Aditus.io, accessed June 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/ARIA/apg/example-index/accordion/accordion.html"
      rel="noreferer noopener nofollow"
    >
      Accordion Example
    </ic-link>
    , W3, accessed June 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Skeleton

URL: https://design.sis.gov.uk/components/skeleton/accessibility
Status: BETA
Subtitle: Skeleton loading states are representations of the shape of content that help inform users that a specific type of component is loading.


## Easy to use for everyone

The component relies on CSS to be displayed before JavaScript is loaded on the page.

## For Assistive Technology

A user should be notified that content is loading. Skeletons use the `aria-busy` to tell assistive technologies that the container is loading. Aria-busy will be false when the container isn't refreshing and will be equal to true when the content is loading.

Given that few screen readers comply with `aria-busy=”true”`, we need to invoke `aria-hidden=”true”` to hide the busy content.

Skeleton components shouldn’t be focusable.

## Based on

The skeleton component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.tpgi.com/short-note-on-being-busy/"
      rel="noreferer noopener nofollow"
    >
      Short note on being busy
    </ic-link>
    , Steve Faulkner, accessed April 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://adrianroselli.com/2020/11/more-accessible-skeletons.html"
      rel="noreferer noopener nofollow"
    >
      More Accessible Skeletons
    </ic-link>
    , Adrian Roselli, accessed April 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://dockyard.com/blog/2020/03/02/accessible-loading-indicatorswith-no-extra-elements"
      rel="noreferer noopener nofollow"
    >
      Accessible Loading Indicators—with No Extra Elements!
    </ic-link>
    , James Steinbach, accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

## Future research planned

To meet WCAG 2.2 Success Criterion 2.2.2 we need to include a mechanism to stop “any moving, blinking or scrolling information that starts automatically, lasts more than five seconds, and is presented in parallel with other content”. As the animation is subtle and less than one second we don't need to provide this.

However, we could do further research into potential scenarios where it could be beneficial for specific users, and how to invoke the pausing pattern without affecting the general experience.

---

# Status tag

URL: https://design.sis.gov.uk/components/status-tag/accessibility
Status: BETA
Subtitle: Status tags are short, clear and digestible ways to display the status of something on the page.


## Easy to use for everyone

Status tags use colours that have been designed for maximum legibility across a range of visual impairments.

## For Assistive Technology

Status tags can have `aria-labelledby` or `aria-label` tags that provide additional content to the visible label. However, the visible label must be included within the accessible label.

## Based on

The status tag component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/status_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: status role
    </ic-link>
    , Mozilla, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://design-system.service.gov.uk/components/tag/"
      rel="noreferer noopener nofollow"
    >
      Tag component
    </ic-link>
    , GDS, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role"
      rel="noreferer noopener nofollow"
    >
      Using the status role
    </ic-link>
    , Mozilla, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Stepper

URL: https://design.sis.gov.uk/components/stepper/accessibility
Status: BETA
Subtitle: A stepper is a visual representation of a user's progress through a predefined set of steps in a linear process.


## Easy to use for everyone

The stepper component is informational and non-interactive, acting as a visual aid to inform the user about their current progress within a form.

## For Assistive Technology

The stepper is a visual aid and is non-interactive. It's therefore included in the tab-indexing for keyboard navigation as individual list items, allowing it to be read out by screen readers using the aria-current attribute.

## Based on

The stepper component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/tutorials/forms/multi-page/"
      rel="noreferer noopener nofollow"
    >
      Multi-page Forms
    </ic-link>
    , W3C, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://a11y-guidelines.orange.com/en/web/components-examples/stepbar/"
      rel="noreferer noopener nofollow"
    >
      Stepbar or multi-step process
    </ic-link>
    , Orange, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Tabs

URL: https://design.sis.gov.uk/components/tabs/accessibility
Status: BETA
Subtitle: Tabs let users navigate between content within the same context. Tabs organise complex layouts by moving content into multiple sections.


## Easy to use for everyone

We’ve made sure that tabs are easy to use for people who use a keyboard to navigate. The tab bar acts as a single focusable element, whilst its tabs can be individually focused using the **arrow** keys. This avoids the user having to move focus through every tab in order to reach the content.

Instead, they move focus into the tab bar, focus on the tab they wish to view using the **arrow** keys, select it using the **space** or **enter** key, and can then directly move focus to the content within the selected tab. Using **shift+tab** moves focus back to the tab bar and highlights the currently selected tab.

Using the **home** key moves focus to the first tab in the tab bar, and the **end** key moves focus to the last tab.

When a compact version of a tab bar is displayed, the tabs can be accessed using the same keyboard functionality described above. When focus is moved to different tabs, the compact tab bar automatically scrolls to show the currently focused tab in the visible area.

## For Assistive Technology

Using the arrow keys in screen readers allows people to move between all elements of the page. When a selected tab is focused on, the down arrow key would tell the screen reader to move to the first element within the tab's content. Each tab container is labelled by the tab it relates to so that the relationship between them is clear when using a screen reader.

## Based on

This tabs component is based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://inclusive-components.design/tabbed-interfaces/"
      rel="noreferer noopener nofollow"
    >
      Tabbed Interfaces, Inclusive Components
    </ic-link>
    , Heydon Pickering, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-1/tabs.html"
      rel="noreferer noopener nofollow"
    >
      Example of tabs with automatic activation
    </ic-link>
    , w3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html"
      rel="noreferer noopener nofollow"
    >
      Example of tabs with manual activation
    </ic-link>
    , w3, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/TR/wai-aria-practices/#kbd_selection_follows_focus"
      rel="noreferer noopener nofollow"
    >
      Deciding when to make selection automatically follow focus
    </ic-link>
    , WAI Aria Practices, accessed March 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Switch

URL: https://design.sis.gov.uk/components/switch/accessibility
Status: BETA
Subtitle: Switches are used to quickly toggle an option on or off.


## Easy to use for everyone

A switch is selected or unselected using the **space bar** key when focused.

Additional I/O visuals have been added to assist the understanding of which state of the switch means 'on' and which means 'off'.

High contrast colours have been used to emphasise the difference between 'on' and 'off' states. The conventional positioning of a switch's handle on the right-hand side also denotes the 'on' state.

## For Assistive Technology

Switches use the ARIA `switch` role so that the change of state is announced by screen readers.

## Based on

The switch component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Switch_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: switch role
    </ic-link>
    , MDN web docs, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://inclusive-components.design/toggle-button/"
      rel="noreferer noopener nofollow"
    >
      Toggle Buttons
    </ic-link>
    , Inclusive Components, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.sarasoueidan.com/blog/toggle-switch-design/"
      rel="noreferer noopener nofollow"
    >
      On Designing and Building Toggle Switches
    </ic-link>
    , Sara Soueidan, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/toggle-switch-guidelines/"
      rel="noreferer noopener nofollow"
    >
      Toggle-Switch Guidelines
    </ic-link>
    , Alita Joyce - Nielsen Norman Group, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.scottohara.me/note/2019/04/03/switch-script.html"
      rel="noreferer noopener nofollow"
    >
      Updated Switch script & more
    </ic-link>
    , Scott O'Hara, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://kittygiraudel.com/2021/04/05/an-accessible-toggle/"
      rel="noreferer noopener nofollow"
    >
      An accessible toggle
    </ic-link>
    , Kitty Giraudel, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://scottaohara.github.io/a11y_styled_form_controls/src/toggle-button-switch/"
      rel="noreferer noopener nofollow"
    >
      Switch Component: Toggle Button
    </ic-link>
    , Scott O'Hara, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Text field

URL: https://design.sis.gov.uk/components/text-field/accessibility
Status: BETA
Subtitle: Text fields let users input and edit text. Text fields capture a single line of text and text areas capture multiple lines of text.


# Accessibility

## Easy to use for everyone

Text inputs can have `aria-labelledby` or `aria-label` tags that provide additional content to the visible label.

## For Assistive Technology

Text inputs use `aria-invalid="true"` and `aria-live="assertive"` for validation. Use `aria-invalid="false"` for successes or warnings and `aria-live="polite"` to announce the character count.

We have included a hidden label through `aria-describedby`, contained in a hidden span to inform the users of the maximum character count when the component is focused.

## Based on

The text input component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/tutorials/forms/labels/"
      rel="noreferer noopener nofollow"
    >
      Labeling controls
    </ic-link>
    , W3, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/tutorials/forms/validation/"
      rel="noreferer noopener nofollow"
    >
      Validation Input
    </ic-link>
    , W3, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://a11y-101.com/development/inputs"
      rel="noreferer noopener nofollow"
    >
      Inputs
    </ic-link>
    , A11Y 101, accessed July 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://webaim.org/techniques/forms/controls"
      rel="noreferer noopener nofollow"
    >
      Creating accessible forms
    </ic-link>
    , WebAIM, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Toast

URL: https://design.sis.gov.uk/components/toast/accessibility
Status: BETA
Subtitle: Toasts give brief, non-critical updates about events that happen in an app. Toasts are sometimes called 'snackbars'.


## Easy to use for everyone

Toasts can be difficult for people to notice due to their auto-dismiss behaviour meaning they can easily be missed.

Our guidance highlights the importance of making sure that the content of toast messages is always non-essential to completing a task.

If more time is needed to read the toast's content, then a longer timeout duration can be set. A user can also hover over the toast with their mouse to pause the timer. Auto-dismiss toasts also include a visual timer, to show how long remains until it disappears.

If any actions are included within a toast, then it can’t be set to auto-dismiss. This gives a user extra time to locate and trigger the action.

## For Assistive Technology

Auto-dismissible toasts use a role of alert, which uses an `aria-live` region to announce the contents immediately to users of assistive technology.

Toasts that don't auto-dismiss use a role of dialog and focus is moved to the toast when displayed. After dismissing the toast, focus is returned to the same position on the page that was focused before the toast was displayed. Focus is also trapped between the toast's interactive elements, so that users can complete the action quickly and easily.

Pressing `Escape` on the keyboard will dismiss manual toasts immediately.

## Based on

The toast component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.scottohara.me/blog/2019/07/08/a-toast-to-a11y-toasts.html"
      rel="noreferer noopener nofollow"
    >
      A toast to a11y toasts
    </ic-link>
    , Scott O’Hara, accessed March 20222.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://adrianroselli.com/2019/06/scraping-burned-toast.html"
      rel="noreferer noopener nofollow"
    >
      Scraping burned toast
    </ic-link>
    , Adrian Roselli, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://adrianroselli.com/2020/01/defining-toast-messages.html"
      rel="noreferer noopener nofollow"
    >
      Defining toast messages
    </ic-link>
    , Adrian Roselli, accessed March 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable.html"
      rel="noreferer noopener nofollow"
    >
      2.2.1 Timing adjustable
    </ic-link>
    , WCAG 2.2, accessed April 2024.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/dialog_role"
      rel="noreferer noopener nofollow"
    >
      Dialog role
    </ic-link>
    , MDN web docs, accessed March 2022.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Toast

URL: https://design.sis.gov.uk/components/toast
Status: BETA
Subtitle: Toasts give brief, non-critical updates about events that happen in an app. Toasts are sometimes called 'snackbars'.


import { IcTypography, IcToast, IcToastRegion, IcButton } from "@ukic/react";
import { useRef } from "react";
import toastVid1 from "./images/anim-1-auto-dismiss-toast.mp4";
import toastVid2 from "./images/anim-2-manual-dismiss-toast.mp4";
import toastFig1 from "./images/fig-1c-toast-with-action-button.png";
import toastFig2 from "./images/fig-2c-toast-with-link.png";
import toastFig3 from "./images/fig-3c-dont-use-toast-to-display-errors.png";
import toastFig4 from "./images/fig-4c-correct-toast-positioning.png";
import toastFig5 from "./images/fig-5c-incorrect-toast-positioning.png";
import toastFig6 from "./images/fig-6c-toast-with-description.png";

## Introduction

An example of the toast component.

export const IntroToast = () => {
  const toastRegionEl = useRef(null);
  const toastEl = useRef(null);
  const handleClick = () => {
    toastRegionEl.current.openToast = toastEl.current;
  };
  return (
    <>
      <IcButton onClick={handleClick}>Display toast component</IcButton>
      <IcToastRegion ref={toastRegionEl}>
        <IcToast id="toast-01" heading="Your coffee is ready" ref={toastEl} />
      </IcToastRegion>
    </>
  );
};

<ComponentPreview>
  <IntroToast />
</ComponentPreview>

## When to use

Use toasts to provide non-essential information relating to a user’s current task.

Use toasts to provide an additional method of feedback about a user action. Avoid using toasts as the only method of conveying information to the user.

Toasts can be set to disappear on their own, or remain visible on screen until actioned. Toasts that automatically disappear should not contain any essential information.

An action, such as a link or button, can be included but isn’t recommended. Try to place actions in the main content of the page instead. If an action is included, then the toast can't be set to automatically dismiss.

<DoDontCaution
  imageSrc={toastFig1}
  imageAlt="A comments section with a toast message that says ‘Comment added’ with an ‘undo’ button and a dismiss button."
  state="caution"
  caption="A toast message containing an action button. The toast has to be manually dismissed."
/>

<DoDontCaution
  imageSrc={toastFig2}
  imageAlt="A comments section with a toast message that says ‘Comment added’ with a link that reads ‘View our privacy statement’, and a dismiss button."
  state="caution"
  caption="A toast message containing a link. The toast has to be manually dismissed."
/>

It's best to use toasts for passive success messages, for example 'document saved'. This provides useful additional feedback about the completion of a process, without being the only method of conveying this information.

## When not to use

If the message must be seen, use an [alert](/components/alert) or dialog depending on the severity of the problem.

<DoDontCaution
  imageSrc={toastFig3}
  imageAlt="A comments section with a toast message displaying an error that reads ‘Your comment couldn’t be saved’."
  state="bad"
  caption="Don’t use toast messages to display errors."
/>

Use a dialog to display messages a user must see or acknowledge.

## Interaction behaviour

### Action

Use a single action in a toast. A button or link can be provided, but the toast can't automatically dismiss if an action is included.

### Auto-dismiss

Toasts can be set to auto-dismiss after an adjustable length of time. Make sure that auto-dismissing toasts are displayed for long enough for their content to be read. Make sure the toast content is non-critical so it doesn’t matter if it's missed.

<video width="100%" muted controls loop>
  <source src={toastVid1} type="video/mp4" />
</video>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  A page with a toast that appears at the bottom center of the screen and
  disappears after a short delay.
</IcTypography>

Toasts that contain an action or link can’t be set to auto-dismiss.

Toasts that don’t auto-dismiss will have a close button.

<video width="100%" muted controls loop>
  <source src={toastVid2} type="video/mp4" />
</video>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  A page with a toast, that has a close button, that appears at the bottom
  center of the screen and disappears only when the dismiss button is clicked.
</IcTypography>

### Layout and placement

Toasts always appear centred at the bottom of the screen. Positioning toasts here makes sure that they don't obscure key content or navigation that might be positioned at the top of the screen.

Only one toast can be displayed at a time. If multiple toasts are required, they are queued one after the other.

<DoDontCaution
  imageSrc={toastFig4}
  imageAlt="An app called ‘Better latte than never’ displaying an article page and showing a toast message positioned at the bottom and centre of the screen that reads ‘Comment added’.  "
  state="good"
  caption="Position toast message at the centre and bottom of the screen.  "
/>

<DoDontCaution
  imageSrc={toastFig5}
  imageAlt="An app whose title is obscured by a toast message positioned at the top of the screen that reads ‘Comment added’."
  state="bad"
  caption="Don’t position toasts at the top of the screen as they may interfere with important content.  "
/>

## Content

Use short messages in toasts. Use the optional description text in addition to the toast title for additional content.

<DoDontCaution
  imageSrc={toastFig6}
  imageAlt="An app called ‘Better latte than never’ showing an article page with comments that displays a toast message with a title that says ‘Comment added’ and a description that says ‘Thanks for letting us know.’."
  state="good"
  caption="Use the optional toast description to provide more information on the toast message."
/>

Use one of the following statuses to provide additional meaning to the message:

- Success
- Warning
- Error
- Info
- Status unknown

Specify a custom icon when using status unknown. Make sure that the icon is related to the toast’s content and that an alt-text description is provided.

## Accessibility considerations

<p>
  When using an auto-dismissible toast message, the app needs to provide a
  method to extend the duration of the message. This is to satisfy the{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable.html"
    rel="noreferer noopener nofollow"
  >
    WCAG 2.2 success criterion 2.2.1 Timing Adjustable
  </ic-link>
  .
</p>

## Related components

- [Alert](/components/alert)
- [App errors](/patterns/app-errors)
- [Success messages](/patterns/success)

---

# Toggle button

URL: https://design.sis.gov.uk/components/toggle-button/accessibility
Status: BETA
Subtitle: Toggle buttons provide an action capable of indicating a state. They are commonly used for turning settings either ‘on’ or ‘off’.


## Easy to use for everyone

Toggle buttons provide another means of selecting an option. They work well where space is limited but this means they do not include other labels that can be used to explain their purpose. Therefore, it is always important to make sure that the visible label makes sense when in either the ‘on’ or ‘off’ position.

It is important that the selected state can be clearly identified from the unselected state. To conform with the WCAG criteria [1.4.1 Use of color](https://www.w3.org/TR/WCAG22/#use-of-color), the toggle button does not solely rely on colour to indicate the selection state, but instead makes use of an additional shape added to the interior of the button to clearly distinguish it from its unselected state.

The toggle button is based upon the [button component](../components/button) so that it inherits the accessibility functionality from that component.

A toggle button group can be set to either single-select or multi-select, and has settings that allow automatic selection or manual selection of its options as each toggle button is navigated through. This helps to speed up selection in a single-select toggle button group. However, this does change the keyboard interaction.

For a single select group, the whole group is focussed upon using the ‘tab’ key and the options are navigated using the ‘arrow’ keys, such as with a [radio button group](../components/radio). For a multi-select group each toggle button in the group is individually focusable with the ‘tab’ key.

When an individual toggle button is focussed, either on its own or within a toggle button group, it can be actioned by using the ‘enter’ or ‘space’ keys.

## For Assistive Technology

When a toggle button is navigated to using a screen reader, its label is announced along with its selection status and its role. If an aria-label has been provided, then this will be announced instead of the visible label. This allows additional context to be provided for screen reader users who may not be able to pick up on visual cues elsewhere on the page.

The selection state is also appended to the aria-label to make sure that it is correctly announced by all screen readers.

When a toggle button is set to disabled, it uses aria-disabled so that it is still perceivable even though it is not editable.

## Based on

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://inclusive-components.design/toggle-button/"
      rel="noreferer noopener nofollow"
    >
      Toggle button, Inclusive Components
    </ic-link>
    , published 31st March 2017, accessed February 2023.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role"
      rel="noreferer noopener nofollow"
    >
      ARIA: button role, MDN Web Docs
    </ic-link>
    , accessed February 2023.
  </li>
</ul>

## Testing

We’ve tested this component against WCAG 2.2 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Tooltip

URL: https://design.sis.gov.uk/components/tooltip/accessibility
Status: BETA
Subtitle: Tooltips provide helpful information when the cursor hovers over an element or when focus is applied.


## Easy to use for everyone

Tooltips can be used by people using any input method. They display by default on hover or on focus.

To ensure the tooltip content can be understood, the tooltip remains displayed if the cursor is moved over the tooltip area, even if it leaves the associated element’s area.

The text displayed within a tooltip is selectable so that it can be copied or focused with a virtual cursor.

## For Assistive Technology

Tooltips use `aria-describedby` or `aria-labelledby` to link it with the associated element.

Tooltips have an internal `silent` property, which applies `aria-hidden` to the tooltip when the tooltip information would have been duplicated, for example when an icon button has a `title` or `aria-label` set.

## Based on

The tooltip component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://sarahmhigley.com/writing/tooltips-in-wcag-21/"
      rel="noreferer noopener nofollow"
    >
      Tooltips in the time of WCAG 2.1
    </ic-link>
    , Sarah M Higley, accessed August 2022.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nngroup.com/articles/tooltip-guidelines/"
      rel="noreferer noopener nofollow"
    >
      Tooltip guidelines
    </ic-link>
    , Nielsen Normal Group, accessed August 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Top navigation

URL: https://design.sis.gov.uk/components/top-navigation/accessibility
Status: BETA
Subtitle: Top navigation sits across the top of the page. It includes the app name, search bar, main navigation and secondary links.  


import topNavFig11 from "./images/fig-11-tab-order.png";

## Easy to use for everyone

On top navigation layouts that contain a search button (rather than an expanded search bar), when the search button is activated the search bar will appear below. This will extend the height of the top navigation, shifting other content down.

Focus will move to the search bar automatically, allowing users to begin typing their query. When focus is moved from the search bar, the search bar will be hidden and focus is returned to the search button unless it was moved elsewhere. When the search bar is next opened, any input previously entered should persist.

All individual components used within the top navigation use their own accessibility guidance.

The top navigation forms an app's main navigation. Therefore, it always appears at the start of a page's tab index. It also uses a `navigation` landmark to allow quick navigation from anywhere within a page's content.

The top navigation content uses logical tabbing order to move between the focusable elements.

The order that the top navigation's internal elements follow is:

1. App title (homepage)
2. Search bar
3. First icon button
4. Second icon button
5. Third icon button
6. First tab
7. Second tab
8. Third tab
9. Fourth tab

<DoDontCaution
  imageSrc={topNavFig11}
  imageAlt="An example top navigation that displays the tab order of its internal elements."
  state="none"
  caption="Tab ordering of the top navigation's internal elements."
/>

## For Assistive Technology

The secondary links and icon buttons have accessible labels that are announced by a screen reader when focused.

On smaller screens, the drawer menu acts modally and captures focus within its elements until the menu is closed.

Collapsible groups in the drawer menu use `aria-expanded` to indicate whether the group is open or closed.

## Based on

The top navigation component has been based on the following resources:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.w3.org/WAI/ARIA/apg/example-index/landmarks/navigation.html"
      rel="noreferer noopener nofollow"
    >
      Navigation Landmark
    </ic-link>
    , W3, accessed July 2022.
  </li>
</ul>

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Typography

URL: https://design.sis.gov.uk/components/typography/accessibility
Status: BETA
Subtitle: Use the typography component for consistent styling across typographical elements.


## Easy to use for everyone

Typography uses the [Open Sans](https://fonts.google.com/specimen/Open+Sans) font for most text and [Nunito Sans](https://fonts.google.com/specimen/Nunito+Sans) for `h1` and `h2`. These are flexible and readable fonts that works well across digital and print.

By wrapping elements, it allows the use of semantic headings and HTML tags to structure the app, and retains flexibility.

Using correct HTML will allow assistive technologies to read an overview of the page when landmarks, regions and headings are implemented appropriately.

## Based on

The typography component is based on the following resources:

- [WCAG 2.2 1.3.1 Info and Relationships](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships), W3, accessed April 2024.

## Testing

We've tested this component against WCAG 2.2 Level AA. It's been tested with NVDA and VoiceOver, and several different users with different interaction methods.

---

# Glossary of terms

URL: https://design.sis.gov.uk/community/glossary-of-terms
Subtitle: A glossary of the most common prop/slot names used throughout the Intelligence Community Design System.


## Props

To help explain usage, each prop has the most common type options and a description.

| Prop name              | Most common type options                | Description                                                                                                                                                        |
| 
---

# Top navigation layout

URL: https://design.sis.gov.uk/patterns/navigation-patterns/top-navigation-layout
Subtitle: Use the top navigation layout to quickly set up a page where the top navigation menu is the primary form of navigation.


import { IcLink } from "@ukic/react";

import { createReactAppTsx } from "./components/StackblitzButton/stackblitz-helpers";

import topNavigationPatternFig1 from "./images/fig-1-example-of-theming-applied-to-top-navigation-layout@2x.png";

## Introduction

export const snippetsTopNav = [
  {
    technology: "Web component",
    snippets: {
      long: `<ic-classification-banner></ic-classification-banner>
<ic-top-navigation
  app-title="[Enter your application name]"
  status="alpha"
  version="v0.0.7"
  content-aligned="center"
>
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24" 
    fill="#000000"
    width="24"
    height="24"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-button label="Profile" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path
        d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-button label="Settings" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path
        d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-button label="Edit" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path
        d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
    selected
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
</ic-top-navigation>
<main>
  <ic-section-container class="main-section-container" aligned="center">
    <div class="main-content-div">
      <ic-typography variant="h2">
        <h2>Example heading</h2>
      </ic-typography>
      <ic-typography variant="subtitle-large">
        <p>Example sub-heading</p>
      </ic-typography>
      <ic-typography>
        <p>
          Remove this div and add your custom content in ic-section-container.
        </p>
      </ic-typography>
    </div>
  </ic-section-container>
</main>
<ic-footer
  aligned="center"
  caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
  description="This pattern was built using the Intelligence Community Design System (ICDS)."
>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="logo" href="/">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="#FFFFFF"
      width="48"
      height="48"
    >
      <path
        d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
        fill="currentColor"
      />
    </svg>
  </ic-footer-link>
</ic-footer>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const alignment: IcAlignment = "center";
  const useStyles = createUseStyles({
    main: { minHeight: "100vh", display: "flex" },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    mainSectionContainer: { display: "flex", flex: 1 },
  });
  const classes = useStyles(); 
  return (
    <>
      <IcClassificationBanner />
      <IcTopNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
        contentAligned={alignment}
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="#000000"
          width="24"
          height="24" 
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcSearchBar slot="search" placeholder="Search" label="Search" />
        <IcNavigationButton label="Profile" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiAccount}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Settings" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiCog}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Edit" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiPencil}
          />
        </IcNavigationButton>
        <IcNavigationItem
          slot="navigation"
          label="[navigationOption]"
          href="#"
          selected
        />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      </IcTopNavigation>
      <main className={classes.main}>
        <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
          <div className={classes.mainContentDiv}>
            <IcTypography variant="h2">
              <h2>Example heading</h2>
            </IcTypography>
            <IcTypography variant="subtitle-large">
              <p>Example sub-heading</p>
            </IcTypography>
            <IcTypography>
              <p>
                Remove this div and add your custom content in IcSectionContainer.
              </p>
            </IcTypography>
          </div>
        </IcSectionContainer>
      </main>
      <IcFooter
        aligned={alignment}
        caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
        description="This pattern was built using the Intelligence Community Design System (ICDS)."
      >
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="logo" href="/">
          <SlottedSVG
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#FFFFFF"
            width="48"
            height="48"
          >
            <path
              d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
              fill="currentColor"
            />
          </SlottedSVG>
        </IcFooterLink>
      </IcFooter>
    </>
  )`,
            "TopNavigation",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const alignment = "center";
  const useStyles = createUseStyles({
    main: { minHeight: "100vh", display: "flex" },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    mainSectionContainer: { display: "flex", flex: 1 },
  });
  const classes = useStyles(); 
  return (
    <>
      <IcClassificationBanner />
      <IcTopNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
        contentAligned={alignment}
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="#000000"
          width="24"
          height="24" 
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcSearchBar slot="search" placeholder="Search" label="Search" />
        <IcNavigationButton label="Profile" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiAccount}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Settings" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiCog}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Edit" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiPencil}
          />
        </IcNavigationButton>
        <IcNavigationItem
          slot="navigation"
          label="[navigationOption]"
          href="#"
          selected
        />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      </IcTopNavigation>
      <main className={classes.main}>
        <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
          <div className={classes.mainContentDiv}>
            <IcTypography variant="h2">
              <h2>Example heading</h2>
            </IcTypography>
            <IcTypography variant="subtitle-large">
              <p>Example sub-heading</p>
            </IcTypography>
            <IcTypography>
              <p>
                Remove this div and add your custom content in IcSectionContainer.
              </p>
            </IcTypography>
          </div>
        </IcSectionContainer>
      </main>
      <IcFooter
        aligned={alignment}
        caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
        description="This pattern was built using the Intelligence Community Design System (ICDS)."
      >
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="logo" href="/">
          <SlottedSVG
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#FFFFFF"
            width="48"
            height="48"
          >
            <path
              d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
              fill="currentColor"
            />
          </SlottedSVG>
        </IcFooterLink>
      </IcFooter>
    </>
  )`,
            "TopNavigation",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsTopNav}
  type="pattern"
  noPadding
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
>
  <IcLink href="/top-navigation-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

This pattern includes the components:

- [Top navigation](/components/top-navigation)
- [Section container](/components/section-container)
- [Footer](/components/footer)
- [Classification banner](/components/classification-banner)

With options for:

- [Page header](/components/page-header)
- [Mega-menu](/components/top-navigation)
- [Back to top](/components/back-to-top)

## When to use

When choosing a layout pattern, make sure it works for all pages within your app and avoid switching layouts on different pages.

Use the top navigation layout for article pages or content-heavy apps with lots of text.

Use the top navigation layout with a mega-menu for access to a large range of navigation items.

Use a mega-menu for apps with complex page structures where every page should be accessible from any other page through the mega-menu. For example, department stores or supermarkets use a top navigation with mega-menu to provide access to their large number of product categories.

## When not to use

For apps that require constant access to switch between pages, use side navigation as it's better suited for providing quick access and maximising the screen space for page content.

Use either the top navigation layout or the side navigation layout. Don't use both at the same time.

## Implementation

Make sure the pattern always fits the entire viewport and is never within another page container. The pattern content will adapt responsively when the viewport changes.

Always place the footer at the bottom of the page and below the fold, meaning users should
scroll to see it.

## Variants

Use the top navigation layout with additional components including page header to create other common layouts.

### Page header

Use a page header to display an introduction to the content of the page. Add additional elements to provide actions, navigation or inputs at the page level.

For more information, see the [page header component](/components/page-header).

export const snippetsTopNavPageHeader = [
  {
    technology: "Web component",
    snippets: {
      long: `<ic-classification-banner></ic-classification-banner>
<ic-top-navigation
  app-title="[Enter your application name]"
  status="alpha"
  version="v0.0.7"
  content-aligned="center"
>
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24" 
    fill="#000000"
    width="24"
    height="24"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-button label="Profile" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path
        d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-button label="Settings" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path
        d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-button label="Edit" slot="buttons">
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path
        d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z"
      />
    </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
    selected
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
</ic-top-navigation>
<ic-page-header
  heading="Page header"
  subheading="This is a page header component with additional functionality and this is the text."
  reverse-order="true"
  aligned="center"
>
  <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
  <ic-breadcrumb-group slot="breadcrumbs">
    <ic-breadcrumb page-title="Breadcrumb 1" href="#"></ic-breadcrumb>
    <ic-breadcrumb page-title="Breadcrumb 2" href="#"></ic-breadcrumb>
    <ic-breadcrumb page-title="Breadcrumb 3" href="#"></ic-breadcrumb>
    <ic-breadcrumb page-title="Breadcrumb 4" href="#"></ic-breadcrumb>
    <ic-breadcrumb page-title="Breadcrumb 5" href="#"></ic-breadcrumb>
    <ic-breadcrumb
      current="true"
      page-title="Breadcrumb 6"
      href="#"
    ></ic-breadcrumb>
  </ic-breadcrumb-group>
  <ic-button slot="actions" variant="primary">
    <svg
      slot="left-icon"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24"
      width="24"
      height="24" 
    >
      <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
    </svg>
    Primary button
  </ic-button>
  <ic-button slot="actions" variant="tertiary">Tertiary button</ic-button>
  <div class="input-area" slot="input">
    <ic-text-field
      placeholder="Enter your input..."
      label="Input"
      hide-label="true"
    ></ic-text-field>
    <ic-button>Submit</ic-button>
  </div>
</ic-page-header>
<main>
  <ic-section-container class="main-section-container" aligned="center">
    <div class="main-content-div">
      <ic-typography variant="h2">
        <h2>Example heading</h2>
      </ic-typography>
      <ic-typography variant="subtitle-large">
        <p>Example sub-heading</p>
      </ic-typography>
      <ic-typography>
        <p>
          Remove this div and add your custom content in ic-section-container.
        </p>
      </ic-typography>
    </div>
  </ic-section-container>
</main>
<ic-footer
  aligned="center"
  caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
  description="This pattern was built using the Intelligence Community Design System (ICDS)."
>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="logo" href="/">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="#FFFFFF"
      width="48"
      height="48"
    >
      <path
        d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
        fill="currentColor"
      />
    </svg>
  </ic-footer-link>
</ic-footer>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const alignment: IcAlignment = "center";
  let pageHeaderAlignment;
  // pageHeaderAlignment: IcAlignment = "center";
  const useStyles = createUseStyles({
    main: { minHeight: "100vh", display: "flex" },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    mainSectionContainer: { display: "flex", flex: 1 },
    inputArea: {
      display: "flex",
      flexWrap: "wrap",
      gap: "var(--ic-space-md)",
      "@media screen and (max-width: 320px)": {
        gap: "var(--ic-space-xs)",
      },
    },
    textField: {
      "--input-width": "21.5rem",
      "@media screen and (max-width: 768px)": {
        "--input-width": "100%",
        flex: "1 1 0",
      },
    },
  });
  const classes = useStyles();
  return (
    <>
      <IcClassificationBanner />
      <IcTopNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
        contentAligned={alignment}
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="#000000"
          width="24"
          height="24" 
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcSearchBar slot="search" placeholder="Search" label="Search" />
        <IcNavigationButton label="Profile" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiAccount}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Settings" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiCog}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Edit" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiPencil}
          />
        </IcNavigationButton>
        <IcNavigationItem
          slot="navigation"
          label="[navigationOption]"
          href="#"
          selected
        />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      </IcTopNavigation>
      <IcPageHeader
        heading="Page header"
        subheading="This is a page header component with additional functionality and this is the text."
        reverseOrder
        aligned={pageHeaderAlignment || alignment}
      >
        <IcChip slot="heading-adornment" label="BETA" size="large" />
        <IcBreadcrumbGroup slot="breadcrumbs">
          <IcBreadcrumb pageTitle="Breadcrumb 1" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 2" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 3" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 4" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 5" href="#" />
          <IcBreadcrumb current pageTitle="Breadcrumb 6" href="#" />
        </IcBreadcrumbGroup>
        <IcButton slot="actions" variant="primary">
          <SlottedSVG
            slot="left-icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiPlus}
          />
          Primary button
        </IcButton>
        <IcButton slot="actions" variant="tertiary">
          Tertiary button
        </IcButton>
        <div className={classes.inputArea} slot="input">
          <IcTextField
            className={classes.textField}
            placeholder="Enter your input..."
            label="Input"
            hideLabel
          />
          <IcButton>Submit</IcButton>
        </div>
      </IcPageHeader>
      <main className={classes.main}>
        <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
          <div className={classes.mainContentDiv}>
            <IcTypography variant="h2">
              <h2>Example heading</h2>
            </IcTypography>
            <IcTypography variant="subtitle-large">
              <p>Example sub-heading</p>
            </IcTypography>
            <IcTypography>
              <p>
                Remove this div and add your custom content in IcSectionContainer.
              </p>
            </IcTypography>
          </div>
        </IcSectionContainer>
      </main>
      <IcFooter
        aligned={alignment}
        caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
        description="This pattern was built using the Intelligence Community Design System (ICDS)."
      >
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="logo" href="/">
          <SlottedSVG
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#FFFFFF"
            width="48"
            height="48"
          >
            <path
              d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
              fill="currentColor"
            />
          </SlottedSVG>
        </IcFooterLink>
      </IcFooter>
    </>
  )`,
            "TopNavigationWithPageHeader",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const alignment = "center";
  let pageHeaderAlignment;
  // pageHeaderAlignment = "center";
  const useStyles = createUseStyles({
    main: { minHeight: "100vh", display: "flex" },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    mainSectionContainer: { display: "flex", flex: 1 },
    inputArea: {
      display: "flex",
      flexWrap: "wrap",
      gap: "var(--ic-space-md)",
      "@media screen and (max-width: 320px)": {
        gap: "var(--ic-space-xs)",
      },
    },
    textField: {
      "--input-width": "21.5rem",
      "@media screen and (max-width: 768px)": {
        "--input-width": "100%",
        flex: "1 1 0",
      },
    },
  });
  const classes = useStyles();
  return (
    <>
      <IcClassificationBanner />
      <IcTopNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
        contentAligned={alignment}
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="#000000"
          width="24"
          height="24" 
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcSearchBar slot="search" placeholder="Search" label="Search" />
        <IcNavigationButton label="Profile" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiAccount}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Settings" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiCog}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Edit" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiPencil}
          />
        </IcNavigationButton>
        <IcNavigationItem
          slot="navigation"
          label="[navigationOption]"
          href="#"
          selected
        />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      </IcTopNavigation>
      <IcPageHeader
        heading="Page header"
        subheading="This is a page header component with additional functionality and this is the text."
        reverseOrder
        aligned={pageHeaderAlignment || alignment}
      >
        <IcChip slot="heading-adornment" label="BETA" size="large" />
        <IcBreadcrumbGroup slot="breadcrumbs">
          <IcBreadcrumb pageTitle="Breadcrumb 1" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 2" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 3" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 4" href="#" />
          <IcBreadcrumb pageTitle="Breadcrumb 5" href="#" />
          <IcBreadcrumb current pageTitle="Breadcrumb 6" href="#" />
        </IcBreadcrumbGroup>
        <IcButton slot="actions" variant="primary">
          <SlottedSVG
            slot="left-icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiPlus}
          />
          Primary button
        </IcButton>
        <IcButton slot="actions" variant="tertiary">
          Tertiary button
        </IcButton>
        <div className={classes.inputArea} slot="input">
          <IcTextField
            className={classes.textField}
            placeholder="Enter your input..."
            label="Input"
            hideLabel
          />
          <IcButton>Submit</IcButton>
        </div>
      </IcPageHeader>
      <main className={classes.main}>
        <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
          <div className={classes.mainContentDiv}>
            <IcTypography variant="h2">
              <h2>Example heading</h2>
            </IcTypography>
            <IcTypography variant="subtitle-large">
              <p>Example sub-heading</p>
            </IcTypography>
            <IcTypography>
              <p>
                Remove this div and add your custom content in IcSectionContainer.
              </p>
            </IcTypography>
          </div>
        </IcSectionContainer>
      </main>
      <IcFooter
        aligned={alignment}
        caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
        description="This pattern was built using the Intelligence Community Design System (ICDS)."
      >
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="logo" href="/">
          <SlottedSVG
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#FFFFFF"
            width="48"
            height="48"
          >
            <path
              d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
              fill="currentColor"
            />
          </SlottedSVG>
        </IcFooterLink>
      </IcFooter>
    </>
  )`,
            "TopNavigationWithPageHeader",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsTopNavPageHeader}
  projectTitle="Top Navigation with Page Header"
  type="pattern"
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
>
  <IcLink href="/top-navigation-page-header-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

### Mega-menu

Use a top navigation with a mega-menu for apps with more than eight navigation options or options that can be grouped into categories. The main link groups are displayed in the top navigation and open a mega-menu when hovered over or focused.

For more information, see the [mega-menu component](/components/top-navigation#mega-menu).

export const snippetsTopNavMegaMenu = [
  {
    technology: "Web component",
    snippets: {
      long: `<ic-classification-banner></ic-classification-banner>
    <ic-top-navigation
      app-title="[Enter your application name]"
      status="alpha"
      version="v0.0.7"
      content-aligned="center"
    >
      <svg
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24" 
        fill="#000000"
        width="24"
        height="24"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path
          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
        />
      </svg>
      <ic-search-bar
        slot="search"
        placeholder="Search"
        label="Search"
      ></ic-search-bar>
      <ic-navigation-button label="Profile" slot="buttons">
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24"
          width="24"
          height="24" 
        >
          <path
            d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"
          />
        </svg>
      </ic-navigation-button>
      <ic-navigation-button label="Settings" slot="buttons">
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24"
          width="24"
          height="24" 
        >
          <path
            d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"
          />
        </svg>
      </ic-navigation-button>
      <ic-navigation-button label="Edit" slot="buttons">
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24"
          width="24"
          height="24" 
        >
          <path
            d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z"
          />
        </svg>
      </ic-navigation-button>
      <ic-navigation-group
        slot="navigation"
        label="[navigationGroup]"
        expandable="true"
      >
        <ic-navigation-item label="[navItem]" href="#"></ic-navigation-item>
        <ic-navigation-item label="[navItem]" href="#"></ic-navigation-item>
        <ic-navigation-item label="[navItem]" href="#"></ic-navigation-item>
      </ic-navigation-group>
      <ic-navigation-group slot="navigation" label="[navigationGroup]">
        <ic-navigation-item label="[navItem]" href="#"></ic-navigation-item>
        <ic-navigation-item
          label="[navItem]"
          href="#"
        ></ic-navigation-item>
      </ic-navigation-group>
      <ic-navigation-item
        slot="navigation"
        label="[navigationOption]"
        href="#"
        selected
      ></ic-navigation-item>
      <ic-navigation-item
        slot="navigation"
        label="[navigationOption]"
        href="#"
      ></ic-navigation-item>
      <ic-navigation-item
        slot="navigation"
        label="[navigationOption]"
        href="#"
      ></ic-navigation-item>
      <ic-navigation-item
        slot="navigation"
        label="[navigationOption]"
        href="#"
      ></ic-navigation-item>
      <ic-navigation-item
        slot="navigation"
        label="[navigationOption]"
        href="#"
      ></ic-navigation-item>
      <ic-navigation-item
        slot="navigation"
        label="[navigationOption]"
        href="#"
      ></ic-navigation-item>
    </ic-top-navigation>
    <main>
      <ic-section-container class="main-section-container" aligned="center">
        <div class="main-content-div">
          <ic-typography variant="h2">
            <h2>Example heading</h2>
          </ic-typography>
          <ic-typography variant="subtitle-large">
            <p>Example sub-heading</p>
          </ic-typography>
          <ic-typography>
            <p>
              Remove this div and add your custom content in ic-section-container.
            </p>
          </ic-typography>
        </div>
      </ic-section-container>
    </main>
    <ic-footer
      aligned="center"
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
      description="This pattern was built using the Intelligence Community Design System (ICDS)."
    >
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="logo" href="/">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
          width="48"
          height="48"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </ic-footer-link>
    </ic-footer>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const alignment: IcAlignment = "center";
const useStyles = createUseStyles({
  main: { minHeight: "100vh", display: "flex" },
  mainContentDiv: {
    border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
    padding: "var(--ic-space-md)",
    flex: 1,
  },
  mainSectionContainer: { display: "flex", flex: 1 },
});
const classes = useStyles(); 
return (
  <>
    <IcClassificationBanner />
    <IcTopNavigation
      contentAligned={alignment}
      appTitle="[Enter your application name]"
      status="alpha"
      version="v0.0.7"
    >
      <SlottedSVG
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24" 
        fill="#000000"
        width="24"
        height="24" 
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </SlottedSVG>
      <IcSearchBar slot="search" placeholder="Search" label="Search" />
      <IcNavigationButton label="Profile" slot="buttons">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24" 
          path={mdiAccount}
        />
      </IcNavigationButton>
      <IcNavigationButton label="Settings" slot="buttons">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24" 
          path={mdiCog}
        />
      </IcNavigationButton>
      <IcNavigationButton label="Edit" slot="buttons">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24" 
          path={mdiPencil}
        />
      </IcNavigationButton>
      <IcNavigationGroup
        slot="navigation"
        label="[navigationGroup]"
        expandable
      >
        <IcNavigationItem label="[navItem]" href="#" />
        <IcNavigationItem label="[navItem]" href="#" />
        <IcNavigationItem label="[navItem]" href="#" />
      </IcNavigationGroup>
      <IcNavigationGroup slot="navigation" label="[navigationGroup]">
        <IcNavigationItem label="[navItem]" href="#" />
        <IcNavigationItem label="[navItem]" href="#" />
      </IcNavigationGroup>
      <IcNavigationItem
        slot="navigation"
        label="[navigationOption]"
        href="#"
        selected
      />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
    </IcTopNavigation>
    <main className={classes.main}>
      <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
        <div className={classes.mainContentDiv}>
          <IcTypography variant="h2">
            <h2>Example heading</h2>
          </IcTypography>
          <IcTypography variant="subtitle-large">
            <p>Example sub-heading</p>
          </IcTypography>
          <IcTypography>
            <p>
              Remove this div and add your custom content in IcSectionContainer.
            </p>
          </IcTypography>
        </div>
      </IcSectionContainer>
    </main>
    <IcFooter
      aligned={alignment}
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
      description="This pattern was built using the Intelligence Community Design System (ICDS)."
    >
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="logo" href="/">
        <SlottedSVG
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
          width="48"
          height="48"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </SlottedSVG>
      </IcFooterLink>
    </IcFooter>
  </>
)`,
            "TopNavigationWithMegaMenu",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
  main: { minHeight: "100vh", display: "flex" },
  mainContentDiv: {
    border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
    padding: "var(--ic-space-md)",
    flex: 1,
  },
  mainSectionContainer: { display: "flex", flex: 1 },
});
const classes = useStyles(); 
return (
  <>
    <IcClassificationBanner />
    <IcTopNavigation
      contentAligned={alignment}
      appTitle="[Enter your application name]"
      status="alpha"
      version="v0.0.7"
    >
      <SlottedSVG
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24" 
        fill="#000000"
        width="24"
        height="24" 
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
      </SlottedSVG>
      <IcSearchBar slot="search" placeholder="Search" label="Search" />
      <IcNavigationButton label="Profile" slot="buttons">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24" 
          path={mdiAccount}
        />
      </IcNavigationButton>
      <IcNavigationButton label="Settings" slot="buttons">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24" 
          path={mdiCog}
        />
      </IcNavigationButton>
      <IcNavigationButton label="Edit" slot="buttons">
        <SlottedSVG
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24" 
          path={mdiPencil}
        />
      </IcNavigationButton>
      <IcNavigationGroup
        slot="navigation"
        label="[navigationGroup]"
        expandable
      >
        <IcNavigationItem label="[navItem]" href="#" />
        <IcNavigationItem label="[navItem]" href="#" />
        <IcNavigationItem label="[navItem]" href="#" />
      </IcNavigationGroup>
      <IcNavigationGroup slot="navigation" label="[navigationGroup]">
        <IcNavigationItem label="[navItem]" href="#" />
        <IcNavigationItem label="[navItem]" href="#" />
      </IcNavigationGroup>
      <IcNavigationItem
        slot="navigation"
        label="[navigationOption]"
        href="#"
        selected
      />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
    </IcTopNavigation>
    <main className={classes.main}>
      <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
        <div className={classes.mainContentDiv}>
          <IcTypography variant="h2">
            <h2>Example heading</h2>
          </IcTypography>
          <IcTypography variant="subtitle-large">
            <p>Example sub-heading</p>
          </IcTypography>
          <IcTypography>
            <p>
              Remove this div and add your custom content in IcSectionContainer.
            </p>
          </IcTypography>
        </div>
      </IcSectionContainer>
    </main>
    <IcFooter
      aligned={alignment}
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
      description="This pattern was built using the Intelligence Community Design System (ICDS)."
    >
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="link" href="">
        [footerLink]
      </IcFooterLink>
      <IcFooterLink slot="logo" href="/">
        <SlottedSVG
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
          width="48"
          height="48"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </SlottedSVG>
      </IcFooterLink>
    </IcFooter>
  </>
)`,
            "TopNavigationWithMegaMenu",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsTopNavMegaMenu}
  projectTitle="Top Navigation with Mega Menu"
  type="pattern"
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
>
  <IcLink href="/top-navigation-mega-menu-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

### Back to top

Use the back to top component to help people quickly return to the top of a long page.

Consider using it on all apps to improve usability for everyone, including keyboard-only and some assistive technology users.

Don't use back to top when the page is designed to fill the viewport without scrolling.

For more information, see the [back to top component](/components/back-to-top).

export const snippetsTopNavBackToTop = [
  {
    technology: "Web component",
    snippets: {
      long: `<ic-classification-banner></ic-classification-banner>
<ic-top-navigation
  app-title="[Enter your application name]"
  status="alpha"
  version="v0.0.7"
  content-aligned="center"
>
  <svg
    slot="app-icon"
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24" 
    fill="#000000"
    width="24"
    height="24"
  >
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path
      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
    />
  </svg>
  <ic-search-bar
    slot="search"
    placeholder="Search"
    label="Search"
  ></ic-search-bar>
  <ic-navigation-button label="Profile" slot="buttons">
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24"
    width="24"
    height="24" 
  >
    <path
      d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"
    />
  </svg>
  </ic-navigation-button>
  <ic-navigation-button label="Settings" slot="buttons">
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24"
    width="24"
    height="24" 
  >
    <path
      d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"
    />
  </svg>
  </ic-navigation-button>
  <ic-navigation-button label="Edit" slot="buttons">
  <svg
    slot="icon"
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 24 24"
    width="24"
    height="24" 
  >
    <path
      d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z"
    />
  </svg>
  </ic-navigation-button>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
    selected
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
  <ic-navigation-item
    slot="navigation"
    label="[navigationOption]"
    href="#"
  ></ic-navigation-item>
</ic-top-navigation>
<main id="main">
  <ic-section-container class="main-section-container" aligned="center">
    <div class="main-content-div">
      <ic-typography variant="h2">
        <h2>Example heading</h2>
      </ic-typography>
      <ic-typography variant="subtitle-large">
        <p>Example sub-heading</p>
      </ic-typography>
      <ic-typography>
        <p>
          Remove this div and add your custom content in ic-section-container.
        </p>
      </ic-typography>
    </div>
  </ic-section-container>
</main>
<ic-back-to-top target="main"></ic-back-to-top>
<ic-footer
  aligned="center"
  caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
  description="This pattern was built using the Intelligence Community Design System (ICDS)."
>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
  <ic-footer-link slot="logo" href="/">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="#FFFFFF"
      width="48"
      height="48"
    >
      <path
        d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
        fill="currentColor"
      />
    </svg>
  </ic-footer-link>
</ic-footer>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const alignment: IcAlignment = "center";
  const useStyles = createUseStyles({
    main: { minHeight: "100vh", display: "flex" },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    mainSectionContainer: { display: "flex", flex: 1 },
  });
  const classes = useStyles(); 
  return (
    <>
      <IcClassificationBanner />
      <IcTopNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
        contentAligned={alignment}
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="#000000"
          width="24"
          height="24" 
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcSearchBar slot="search" placeholder="Search" label="Search" />
        <IcNavigationButton label="Profile" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiAccount}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Settings" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiCog}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Edit" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiPencil}
          />
        </IcNavigationButton>
        <IcNavigationItem
          slot="navigation"
          label="[navigationOption]"
          href="#"
          selected
        />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      </IcTopNavigation>
      <main className={classes.main} id="main">
        <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
          <div className={classes.mainContentDiv}>
            <IcTypography variant="h2">
              <h2>Example heading</h2>
            </IcTypography>
            <IcTypography variant="subtitle-large">
              <p>Example sub-heading</p>
            </IcTypography>
            <IcTypography>
              <p>
                Remove this div and add your custom content in IcSectionContainer.
              </p>
            </IcTypography>
          </div>
        </IcSectionContainer>
      </main>
      <IcBackToTop target="main" />
      <IcFooter
        aligned={alignment}
        caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
        description="This pattern was built using the Intelligence Community Design System (ICDS)."
      >
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="logo" href="/">
          <SlottedSVG
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#FFFFFF"
            width="48"
            height="48"
          >
            <path
              d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
              fill="currentColor"
            />
          </SlottedSVG>
        </IcFooterLink>
      </IcFooter>
    </>
  )`,
            "TopNavigationWithBackToTop",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const alignment = "center";
  const useStyles = createUseStyles({
    main: { minHeight: "100vh", display: "flex" },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    mainSectionContainer: { display: "flex", flex: 1 },
  });
  const classes = useStyles(); 
  return (
    <>
      <IcClassificationBanner />
      <IcTopNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
        contentAligned={alignment}
      >
        <SlottedSVG
          slot="app-icon"
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="#000000"
          width="24"
          height="24" 
        >
          <path d="M0 0h24v24H0V0z" fill="none" />
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
        </SlottedSVG>
        <IcSearchBar slot="search" placeholder="Search" label="Search" />
        <IcNavigationButton label="Profile" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiAccount}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Settings" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiCog}
          />
        </IcNavigationButton>
        <IcNavigationButton label="Edit" slot="buttons">
          <SlottedSVG
            slot="icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="24"
            height="24" 
            path={mdiPencil}
          />
        </IcNavigationButton>
        <IcNavigationItem
          slot="navigation"
          label="[navigationOption]"
          href="#"
          selected
        />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
        <IcNavigationItem slot="navigation" label="[navigationOption]" href="#" />
      </IcTopNavigation>
      <main className={classes.main} id="main">
        <IcSectionContainer className={classes.mainSectionContainer} aligned={alignment}>
          <div className={classes.mainContentDiv}>
            <IcTypography variant="h2">
              <h2>Example heading</h2>
            </IcTypography>
            <IcTypography variant="subtitle-large">
              <p>Example sub-heading</p>
            </IcTypography>
            <IcTypography>
              <p>
                Remove this div and add your custom content in IcSectionContainer.
              </p>
            </IcTypography>
          </div>
        </IcSectionContainer>
      </main>
      <IcBackToTop target="main" />
      <IcFooter
        aligned={alignment}
        caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
        description="This pattern was built using the Intelligence Community Design System (ICDS)."
      >
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="link" href="">
          [footerLink]
        </IcFooterLink>
        <IcFooterLink slot="logo" href="/">
          <SlottedSVG
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#FFFFFF"
            width="48"
            height="48"
          >
            <path
              d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
              fill="currentColor"
            />
          </SlottedSVG>
        </IcFooterLink>
      </IcFooter>
    </>
  )`,
            "TopNavigationWithBackToTop",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsTopNavBackToTop}
  projectTitle="Top Navigation with Back to Top"
  type="pattern"
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
>
  <IcLink href="/top-navigation-back-to-top-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

## Customisation

This pattern can be themed to change the look and feel of the app. Use the [custom theme](/get-started/install-components/custom-theme) guidance to change your app's theme. Make sure to select your theme in line with the accessibility requirements around colour contrast.

<DoDontCaution
  imageSrc={topNavigationPatternFig1}
  imageAlt="An example page showing the layout with an alternatively themed look."
  state="none"
  caption="An example of the top navigation layout themed to an alternative colour."
/>

## Accessibility considerations

When configuring a page make sure to follow all [accessibility guidance](/accessibility). Most accessibility requirements are covered by the individual components. For further accessibility information see the individual component pages.

We’ve tested this pattern against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

## Related patterns

- [Side navigation layout](/patterns/navigation-patterns/side-navigation-layout)

---

# Side navigation layout

URL: https://design.sis.gov.uk/patterns/navigation-patterns/side-navigation-layout
Subtitle: Use the side navigation layout to quickly set up a page where the side navigation is the primary form of navigation.


import { IcLink } from "@ukic/react";
import { createReactAppTsx } from "./components/StackblitzButton/stackblitz-helpers";
import sideNavigationPatternFig1 from "./images/fig-1-example-of-theming-applied-to-side-navigation-layout.png";

## Introduction

export const snippetsSideNav = [
  {
    technology: "Web component",
    snippets: {
      long: `<div class="parent-div">
  <ic-classification-banner></ic-classification-banner>
  <ic-side-navigation
    app-title="[Enter your application name]"
    status="alpha"
    version="v0.0.7"
  >
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width="24"
      height="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
      />
    </svg>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
      selected
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M12 5.69L17 10.19V18H15V12H9V18H7V10.19L12 5.69M12 3L2 12H5V20H11V14H13V20H19V12H22"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M3,14L3.5,14.07L8.07,9.5C7.89,8.85 8.06,8.11 8.59,7.59C9.37,6.8 10.63,6.8 11.41,7.59C11.94,8.11 12.11,8.85 11.93,9.5L14.5,12.07L15,12C15.18,12 15.35,12 15.5,12.07L19.07,8.5C19,8.35 19,8.18 19,8A2,2 0 0,1 21,6A2,2 0 0,1 23,8A2,2 0 0,1 21,10C20.82,10 20.65,10 20.5,9.93L16.93,13.5C17,13.65 17,13.82 17,14A2,2 0 0,1 15,16A2,2 0 0,1 13,14L13.07,13.5L10.5,10.93C10.18,11 9.82,11 9.5,10.93L4.93,15.5L5,16A2,2 0 0,1 3,18A2,2 0 0,1 1,16A2,2 0 0,1 3,14Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10M6,7H18V9H6V7M6,11H15V13H6V11Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-divider slot="primary-navigation"></ic-divider>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,17H14V7H10V9H12"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M15,15H11V13H13A2,2 0 0,0 15,11V9C15,7.89 14.1,7 13,7H9V9H13V11H11A2,2 0 0,0 9,13V17H15M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M15,15V13.5A1.5,1.5 0 0,0 13.5,12A1.5,1.5 0 0,0 15,10.5V9C15,7.89 14.1,7 13,7H9V9H13V11H11V13H13V15H9V17H13A2,2 0 0,0 15,15M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="primary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M13,17H15V7H13V11H11V7H9V13H13"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="secondary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="secondary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M21,9H15V22H13V16H11V22H9V9H3V7H21M12,2A2,2 0 0,1 14,4A2,2 0 0,1 12,6C10.89,6 10,5.1 10,4C10,2.89 10.89,2 12,2Z"
        />
      </svg>
    </ic-navigation-item>
    <ic-navigation-item
      slot="secondary-navigation"
      label="[navigationOption]"
      href="#"
    >
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
      >
        <path
          d="M16.36,14C16.44,13.34 16.5,12.68 16.5,12C16.5,11.32 16.44,10.66 16.36,10H19.74C19.9,10.64 20,11.31 20,12C20,12.69 19.9,13.36 19.74,14M14.59,19.56C15.19,18.45 15.65,17.25 15.97,16H18.92C17.96,17.65 16.43,18.93 14.59,19.56M14.34,14H9.66C9.56,13.34 9.5,12.68 9.5,12C9.5,11.32 9.56,10.65 9.66,10H14.34C14.43,10.65 14.5,11.32 14.5,12C14.5,12.68 14.43,13.34 14.34,14M12,19.96C11.17,18.76 10.5,17.43 10.09,16H13.91C13.5,17.43 12.83,18.76 12,19.96M8,8H5.08C6.03,6.34 7.57,5.06 9.4,4.44C8.8,5.55 8.35,6.75 8,8M5.08,16H8C8.35,17.25 8.8,18.45 9.4,19.56C7.57,18.93 6.03,17.65 5.08,16M4.26,14C4.1,13.36 4,12.69 4,12C4,11.31 4.1,10.64 4.26,10H7.64C7.56,10.66 7.5,11.32 7.5,12C7.5,12.68 7.56,13.34 7.64,14M12,4.03C12.83,5.23 13.5,6.57 13.91,8H10.09C10.5,6.57 11.17,5.23 12,4.03M18.92,8H15.97C15.65,6.75 15.19,5.55 14.59,4.44C16.43,5.07 17.96,6.34 18.92,8M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"
        />
      </svg>
    </ic-navigation-item>
  </ic-side-navigation>
  <div class="content-div-container">
    <main>
      <ic-section-container class="main-section-container" aligned="center">
        <div class="main-content-div">
          <ic-typography variant="h2">
            <h2>Example heading</h2>
          </ic-typography>
          <ic-typography variant="subtitle-large">
            <p>Example sub-heading</p>
          </ic-typography>
          <ic-typography>
            <p>
              Remove this div and add your custom content in
              ic-section-container.
            </p>
          </ic-typography>
        </div>
      </ic-section-container>
    </main>
    <ic-footer
      aligned="center"
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
      description="This pattern was built using the Intelligence Community Design System (ICDS)."
    >
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="logo" href="/">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
          width="48"
          height="48"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </ic-footer-link>
    </ic-footer>
  </div>
</div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
    contentDivContainer: {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
    },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      height: "800px",
    },
    parentDiv: { display: "flex", height: "100%" },
    main: { minHeight: "100vh" },
  });
  const classes = useStyles();
  const alignment: IcAlignment = "center";
  return (
    <div className={classes.parentDiv}>
      <IcClassificationBanner />
      <IcSideNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          path={mdiCompassOutline}
        />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
          selected
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHomeOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiMagnify}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiChartTimelineVariant}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCommentTextOutline}
          />
        </IcNavigationItem>
        <IcDivider slot="primary-navigation" />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric1BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric2BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric3BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric4BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCogOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHuman}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiWeb}
          />
        </IcNavigationItem>
      </IcSideNavigation>
      <div className={classes.contentDivContainer}>
        <main>
          <IcSectionContainer aligned={alignment}>
            <div className={classes.mainContentDiv}>
              <IcTypography variant="h2">
                <h2>Example heading</h2>
              </IcTypography>
              <IcTypography variant="subtitle-large">
                <p>Example sub-heading</p>
              </IcTypography>
              <IcTypography>
                <p>
                  Remove this div and add your custom content in
                  IcSectionContainer.
                </p>
              </IcTypography>
            </div>
          </IcSectionContainer>
        </main>
        <IcFooter
          aligned={alignment}
          caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
          description="This pattern was built using the Intelligence Community Design System (ICDS)."
        >
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="logo" href="/">
            <SlottedSVG
              xmlns="http://www.w3.org/2000/svg"
              width="48"
              height="48"
              viewBox="0 0 24 24"
              fill="#FFFFFF"
            >
              <path
                d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
                fill="currentColor"
              />
            </SlottedSVG>
          </IcFooterLink>
        </IcFooter>
      </div>
    </div>
  )`,
            "SideNavigationPattern",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
    contentDivContainer: {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
    },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      height: "800px",
    },
    parentDiv: { display: "flex", height: "100%" },
    main: { minHeight: "100vh" },
  });
  const classes = useStyles();
  const alignment = "center";
  return (
    <div className={classes.parentDiv}>
      <IcClassificationBanner />
      <IcSideNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          path={mdiCompassOutline}
        />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
          selected
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHomeOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiMagnify}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiChartTimelineVariant}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCommentTextOutline}
          />
        </IcNavigationItem>
        <IcDivider slot="primary-navigation" />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric1BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric2BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric3BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric4BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCogOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHuman}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiWeb}
          />
        </IcNavigationItem>
      </IcSideNavigation>
      <div className={classes.contentDivContainer}>
        <main>
          <IcSectionContainer aligned={alignment}>
            <div className={classes.mainContentDiv}>
              <IcTypography variant="h2">
                <h2>Example heading</h2>
              </IcTypography>
              <IcTypography variant="subtitle-large">
                <p>Example sub-heading</p>
              </IcTypography>
              <IcTypography>
                <p>
                  Remove this div and add your custom content in
                  IcSectionContainer.
                </p>
              </IcTypography>
            </div>
          </IcSectionContainer>
        </main>
        <IcFooter
          aligned={alignment}
          caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
          description="This pattern was built using the Intelligence Community Design System (ICDS)."
        >
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="logo" href="/">
            <SlottedSVG
              xmlns="http://www.w3.org/2000/svg"
              width="48"
              height="48"
              viewBox="0 0 24 24"
              fill="#FFFFFF"
            >
              <path
                d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
                fill="currentColor"
              />
            </SlottedSVG>
          </IcFooterLink>
        </IcFooter>
      </div>
    </div>
  )`,
            "SideNavigationPattern",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsSideNav}
  projectTitle="Side Navigation"
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
  type="pattern"
>
  <IcLink href="/side-navigation-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

This pattern includes the components:

- [Side navigation](/components/side-navigation)
- [Section container](/components/section-container)
- [Footer](/components/footer)
- [Classification banner](/components/classification-banner)

With options for:

- [Page header](/components/page-header)
- [Back to top](/components/back-to-top)

## When to use

When choosing a layout pattern, make sure it works for all pages within your app and avoid switching layout patterns on different pages.

Use the side navigation layout to help provide more screen space for the main content. Side navigation is well suited to apps that have mutually exclusive features that need to be switched between easily from any page. For example, email providers often use side navigation to provide maximum screen space for email content whilst allowing constant access to other pages.

## When not to use

For intranet-style and content-heavy apps, use the top navigation layout as it's better suited for providing links to a large number of pages.

Use either the top navigation layout or the side navigation layout. Don't use both at the same time.

## Implementation

Make sure the pattern always fits the entire viewport and is never within another page container. The pattern content will adapt responsively when the viewport changes.

Always place the footer at the bottom of the page and below the fold, meaning users should scroll to see it.

## Variants

Use the side navigation layout with additional components including page header to create other common layouts.

### Page header

Use a page header to display an introduction to the content of the page. Add additional elements to provide actions, navigation or inputs at the page level.

For more information, see the [page header component](/components/page-header).

export const snippetsSideNavWithPageHeader = [
  {
    technology: "Web component",
    snippets: {
      long: `<div class="parent-div">
    <ic-classification-banner></ic-classification-banner>
    <ic-side-navigation
      app-title="[Enter your application name]"
      status="alpha"
      version="v0.0.7"
    >
      <svg
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path
          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
        />
      </svg>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
        selected
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M12 5.69L17 10.19V18H15V12H9V18H7V10.19L12 5.69M12 3L2 12H5V20H11V14H13V20H19V12H22"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M3,14L3.5,14.07L8.07,9.5C7.89,8.85 8.06,8.11 8.59,7.59C9.37,6.8 10.63,6.8 11.41,7.59C11.94,8.11 12.11,8.85 11.93,9.5L14.5,12.07L15,12C15.18,12 15.35,12 15.5,12.07L19.07,8.5C19,8.35 19,8.18 19,8A2,2 0 0,1 21,6A2,2 0 0,1 23,8A2,2 0 0,1 21,10C20.82,10 20.65,10 20.5,9.93L16.93,13.5C17,13.65 17,13.82 17,14A2,2 0 0,1 15,16A2,2 0 0,1 13,14L13.07,13.5L10.5,10.93C10.18,11 9.82,11 9.5,10.93L4.93,15.5L5,16A2,2 0 0,1 3,18A2,2 0 0,1 1,16A2,2 0 0,1 3,14Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10M6,7H18V9H6V7M6,11H15V13H6V11Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-divider slot="primary-navigation"></ic-divider>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,17H14V7H10V9H12"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M15,15H11V13H13A2,2 0 0,0 15,11V9C15,7.89 14.1,7 13,7H9V9H13V11H11A2,2 0 0,0 9,13V17H15M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M15,15V13.5A1.5,1.5 0 0,0 13.5,12A1.5,1.5 0 0,0 15,10.5V9C15,7.89 14.1,7 13,7H9V9H13V11H11V13H13V15H9V17H13A2,2 0 0,0 15,15M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M13,17H15V7H13V11H11V7H9V13H13"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="secondary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="secondary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M21,9H15V22H13V16H11V22H9V9H3V7H21M12,2A2,2 0 0,1 14,4A2,2 0 0,1 12,6C10.89,6 10,5.1 10,4C10,2.89 10.89,2 12,2Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="secondary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M16.36,14C16.44,13.34 16.5,12.68 16.5,12C16.5,11.32 16.44,10.66 16.36,10H19.74C19.9,10.64 20,11.31 20,12C20,12.69 19.9,13.36 19.74,14M14.59,19.56C15.19,18.45 15.65,17.25 15.97,16H18.92C17.96,17.65 16.43,18.93 14.59,19.56M14.34,14H9.66C9.56,13.34 9.5,12.68 9.5,12C9.5,11.32 9.56,10.65 9.66,10H14.34C14.43,10.65 14.5,11.32 14.5,12C14.5,12.68 14.43,13.34 14.34,14M12,19.96C11.17,18.76 10.5,17.43 10.09,16H13.91C13.5,17.43 12.83,18.76 12,19.96M8,8H5.08C6.03,6.34 7.57,5.06 9.4,4.44C8.8,5.55 8.35,6.75 8,8M5.08,16H8C8.35,17.25 8.8,18.45 9.4,19.56C7.57,18.93 6.03,17.65 5.08,16M4.26,14C4.1,13.36 4,12.69 4,12C4,11.31 4.1,10.64 4.26,10H7.64C7.56,10.66 7.5,11.32 7.5,12C7.5,12.68 7.56,13.34 7.64,14M12,4.03C12.83,5.23 13.5,6.57 13.91,8H10.09C10.5,6.57 11.17,5.23 12,4.03M18.92,8H15.97C15.65,6.75 15.19,5.55 14.59,4.44C16.43,5.07 17.96,6.34 18.92,8M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"
          />
        </svg>
      </ic-navigation-item>
    </ic-side-navigation>
    <div class="content-div-container">
      <ic-page-header
        heading="Page header"
        subheading="This is a page header component with additional functionality and this is the text."
        reverse-order="true"
        aligned="center"
      >
        <ic-chip slot="heading-adornment" label="BETA" size="large"></ic-chip>
        <ic-breadcrumb-group slot="breadcrumbs">
          <ic-breadcrumb page-title="Breadcrumb 1" href="#"></ic-breadcrumb>
          <ic-breadcrumb page-title="Breadcrumb 2" href="#"></ic-breadcrumb>
          <ic-breadcrumb page-title="Breadcrumb 3" href="#"></ic-breadcrumb>
          <ic-breadcrumb page-title="Breadcrumb 4" href="#"></ic-breadcrumb>
          <ic-breadcrumb page-title="Breadcrumb 5" href="#"></ic-breadcrumb>
          <ic-breadcrumb
            current="true"
            page-title="Breadcrumb 6"
            href="#"
          ></ic-breadcrumb>
        </ic-breadcrumb-group>
        <ic-button slot="actions" variant="primary">
          <svg
            slot="left-icon"
            xmlns="http://www.w3.org/2000/svg"
            height="24"
            width="24"
            viewBox="0 0 24 24"
          >
            <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
          </svg>
          Primary button
        </ic-button>
        <ic-button slot="actions" variant="tertiary">Tertiary button</ic-button>
        <div class="input-area" slot="input">
          <ic-text-field
            placeholder="Enter your input..."
            label="Input"
            hide-label="true"
          ></ic-text-field>
          <ic-button>Submit</ic-button>
      </div>
    </ic-page-header>
    <main>
      <ic-section-container class="main-section-container" aligned="center">
        <div class="main-content-div">
          <ic-typography variant="h2">
            <h2>Example heading</h2>
          </ic-typography>
          <ic-typography variant="subtitle-large">
            <p>Example sub-heading</p>
          </ic-typography>
          <ic-typography>
            <p>
              Remove this div and add your custom content in ic-section-container.
            </p>
          </ic-typography>
        </div>
      </ic-section-container>
    </main>
    <ic-footer
      aligned="center"
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
      description="This pattern was built using the Intelligence Community Design System (ICDS)."
    >
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="logo" href="/">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
          width="48"
          height="48"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </ic-footer-link>
    </ic-footer>
  </div>
</div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
    contentDivContainer: {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
    },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      height: "800px",
    },
    parentDiv: { display: "flex", height: "100%" },
    main: { minHeight: "100vh" },
    inputArea: {
      display: "flex",
      flexWrap: "wrap",
      gap: "var(--ic-space-md)",
      "@media screen and (max-width: 320px)": {
        gap: "var(--ic-space-xs)",
      },
    },
    textField: {
      "--input-width": "21.5rem",
      "@media screen and (max-width: 768px)": {
        "--input-width": "100%",
        flex: "1 1 0",
      },
    },
  });
  const classes = useStyles();
  const alignment: IcAlignment = "center";
  const pageHeaderAlignment: IcAlignment = "center";
  return (
    <div className={classes.parentDiv}>
      <IcClassificationBanner />
      <IcSideNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          path={mdiCompassOutline}
        />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
          selected
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHomeOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiMagnify}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiChartTimelineVariant}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCommentTextOutline}
          />
        </IcNavigationItem>
        <IcDivider slot="primary-navigation" />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric1BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric2BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric3BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric4BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCogOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHuman}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiWeb}
          />
        </IcNavigationItem>
      </IcSideNavigation>
      <div className={classes.contentDivContainer}>
        <IcPageHeader
          heading="Page header"
          subheading="This is a page header component with additional functionality and this is the text."
          reverseOrder
          aligned={pageHeaderAlignment || alignment}
        >
          <IcChip slot="heading-adornment" label="BETA" size="large" />
          <IcBreadcrumbGroup slot="breadcrumbs">
            <IcBreadcrumb pageTitle="Breadcrumb 1" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 2" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 3" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 4" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 5" href="#" />
            <IcBreadcrumb current pageTitle="Breadcrumb 6" href="#" />
          </IcBreadcrumbGroup>
          <IcButton slot="actions" variant="primary">
            <SlottedSVG
              slot="left-icon"
              xmlns="http://www.w3.org/2000/svg"
              height="24"
              width="24"
              viewBox="0 0 24 24"
              path={mdiPlus}
            />
            Primary button
          </IcButton>
          <IcButton slot="actions" variant="tertiary">
            Tertiary button
          </IcButton>
          <div className={classes.inputArea} slot="input">
            <IcTextField
              className={classes.textField}
              placeholder="Enter your input..."
              label="Input"
              hideLabel
            />
            <IcButton>Submit</IcButton>
          </div>
        </IcPageHeader>
        <main>
          <IcSectionContainer aligned={alignment}>
            <div className={classes.mainContentDiv}>
              <IcTypography variant="h2">
                <h2>Example heading</h2>
              </IcTypography>
              <IcTypography variant="subtitle-large">
                <p>Example sub-heading</p>
              </IcTypography>
              <IcTypography>
                <p>
                  Remove this div and add your custom content in
                  IcSectionContainer.
                </p>
              </IcTypography>
            </div>
          </IcSectionContainer>
        </main>
        <IcFooter
          aligned={alignment}
          caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
          description="This pattern was built using the Intelligence Community Design System (ICDS)."
        >
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="logo" href="/">
            <SlottedSVG
              xmlns="http://www.w3.org/2000/svg"
              width="48"
              height="48"
              viewBox="0 0 24 24"
              fill="#FFFFFF"
            >
              <path
                d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
                fill="currentColor"
              />
            </SlottedSVG>
          </IcFooterLink>
        </IcFooter>
      </div>
    </div>
  )`,
            "SideNavigationWithPageHeaderPattern",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
    contentDivContainer: {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
    },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      height: "800px",
    },
    parentDiv: { display: "flex", height: "100%" },
    main: { minHeight: "100vh" },
    inputArea: {
      display: "flex",
      flexWrap: "wrap",
      gap: "var(--ic-space-md)",
      "@media screen and (max-width: 320px)": {
        gap: "var(--ic-space-xs)",
      },
    },
    textField: {
      "--input-width": "21.5rem",
      "@media screen and (max-width: 768px)": {
        "--input-width": "100%",
        flex: "1 1 0",
      },
    },
  });
  const classes = useStyles();
  const alignment = "center";
  const pageHeaderAlignment = "center";
  return (
    <div className={classes.parentDiv}>
      <IcClassificationBanner />
      <IcSideNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          path={mdiCompassOutline}
        />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
          selected
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHomeOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiMagnify}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiChartTimelineVariant}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCommentTextOutline}
          />
        </IcNavigationItem>
        <IcDivider slot="primary-navigation" />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric1BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric2BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric3BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric4BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCogOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHuman}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiWeb}
          />
        </IcNavigationItem>
      </IcSideNavigation>
      <div className={classes.contentDivContainer}>
        <IcPageHeader
          heading="Page header"
          subheading="This is a page header component with additional functionality and this is the text."
          reverseOrder
          aligned={pageHeaderAlignment || alignment}
        >
          <IcChip slot="heading-adornment" label="BETA" size="large" />
          <IcBreadcrumbGroup slot="breadcrumbs">
            <IcBreadcrumb pageTitle="Breadcrumb 1" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 2" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 3" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 4" href="#" />
            <IcBreadcrumb pageTitle="Breadcrumb 5" href="#" />
            <IcBreadcrumb current pageTitle="Breadcrumb 6" href="#" />
          </IcBreadcrumbGroup>
          <IcButton slot="actions" variant="primary">
            <SlottedSVG
              slot="left-icon"
              xmlns="http://www.w3.org/2000/svg"
              height="24"
              width="24"
              viewBox="0 0 24 24"
              path={mdiPlus}
            />
            Primary button
          </IcButton>
          <IcButton slot="actions" variant="tertiary">
            Tertiary button
          </IcButton>
          <div className={classes.inputArea} slot="input">
            <IcTextField
              className={classes.textField}
              placeholder="Enter your input..."
              label="Input"
              hideLabel
            />
            <IcButton>Submit</IcButton>
          </div>
        </IcPageHeader>
        <main>
          <IcSectionContainer aligned={alignment}>
            <div className={classes.mainContentDiv}>
              <IcTypography variant="h2">
                <h2>Example heading</h2>
              </IcTypography>
              <IcTypography variant="subtitle-large">
                <p>Example sub-heading</p>
              </IcTypography>
              <IcTypography>
                <p>
                  Remove this div and add your custom content in
                  IcSectionContainer.
                </p>
              </IcTypography>
            </div>
          </IcSectionContainer>
        </main>
        <IcFooter
          aligned={alignment}
          caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
          description="This pattern was built using the Intelligence Community Design System (ICDS)."
        >
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="logo" href="/">
            <SlottedSVG
              xmlns="http://www.w3.org/2000/svg"
              width="48"
              height="48"
              viewBox="0 0 24 24"
              fill="#FFFFFF"
            >
              <path
                d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
                fill="currentColor"
              />
            </SlottedSVG>
          </IcFooterLink>
        </IcFooter>
      </div>
    </div>
  )`,
            "SideNavigationWithPageHeaderPattern",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsSideNavWithPageHeader}
  projectTitle="Side Navigation with Page Header"
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
  type="pattern"
>
  <IcLink href="/side-navigation-page-header-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

### Back to top

Use the back to top component to help people quickly return to the top of a long page.

Consider using it on all apps to improve usability for everyone, including keyboard-only and some assistive technology users.

Don't use back to top when the page is designed to fill the viewport without scrolling.

For more information, see the [back to top component](/components/back-to-top).

export const snippetsSideNavBackToTop = [
  {
    technology: "Web component",
    snippets: {
      long: `<div class="parent-div">
    <ic-classification-banner></ic-classification-banner>
    <ic-side-navigation
      app-title="[Enter your application name]"
      status="alpha"
      version="v0.0.7"
    >
      <svg
        slot="app-icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        fill="#000000"
      >
        <path d="M0 0h24v24H0V0z" fill="none" />
        <path
          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"
        />
      </svg>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
        selected
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M12 5.69L17 10.19V18H15V12H9V18H7V10.19L12 5.69M12 3L2 12H5V20H11V14H13V20H19V12H22"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M3,14L3.5,14.07L8.07,9.5C7.89,8.85 8.06,8.11 8.59,7.59C9.37,6.8 10.63,6.8 11.41,7.59C11.94,8.11 12.11,8.85 11.93,9.5L14.5,12.07L15,12C15.18,12 15.35,12 15.5,12.07L19.07,8.5C19,8.35 19,8.18 19,8A2,2 0 0,1 21,6A2,2 0 0,1 23,8A2,2 0 0,1 21,10C20.82,10 20.65,10 20.5,9.93L16.93,13.5C17,13.65 17,13.82 17,14A2,2 0 0,1 15,16A2,2 0 0,1 13,14L13.07,13.5L10.5,10.93C10.18,11 9.82,11 9.5,10.93L4.93,15.5L5,16A2,2 0 0,1 3,18A2,2 0 0,1 1,16A2,2 0 0,1 3,14Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10M6,7H18V9H6V7M6,11H15V13H6V11Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-divider slot="primary-navigation"></ic-divider>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,17H14V7H10V9H12"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M15,15H11V13H13A2,2 0 0,0 15,11V9C15,7.89 14.1,7 13,7H9V9H13V11H11A2,2 0 0,0 9,13V17H15M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M15,15V13.5A1.5,1.5 0 0,0 13.5,12A1.5,1.5 0 0,0 15,10.5V9C15,7.89 14.1,7 13,7H9V9H13V11H11V13H13V15H9V17H13A2,2 0 0,0 15,15M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="primary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M13,17H15V7H13V11H11V7H9V13H13"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="secondary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="secondary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M21,9H15V22H13V16H11V22H9V9H3V7H21M12,2A2,2 0 0,1 14,4A2,2 0 0,1 12,6C10.89,6 10,5.1 10,4C10,2.89 10.89,2 12,2Z"
          />
        </svg>
      </ic-navigation-item>
      <ic-navigation-item
        slot="secondary-navigation"
        label="[navigationOption]"
        href="#"
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
        >
          <path
            d="M16.36,14C16.44,13.34 16.5,12.68 16.5,12C16.5,11.32 16.44,10.66 16.36,10H19.74C19.9,10.64 20,11.31 20,12C20,12.69 19.9,13.36 19.74,14M14.59,19.56C15.19,18.45 15.65,17.25 15.97,16H18.92C17.96,17.65 16.43,18.93 14.59,19.56M14.34,14H9.66C9.56,13.34 9.5,12.68 9.5,12C9.5,11.32 9.56,10.65 9.66,10H14.34C14.43,10.65 14.5,11.32 14.5,12C14.5,12.68 14.43,13.34 14.34,14M12,19.96C11.17,18.76 10.5,17.43 10.09,16H13.91C13.5,17.43 12.83,18.76 12,19.96M8,8H5.08C6.03,6.34 7.57,5.06 9.4,4.44C8.8,5.55 8.35,6.75 8,8M5.08,16H8C8.35,17.25 8.8,18.45 9.4,19.56C7.57,18.93 6.03,17.65 5.08,16M4.26,14C4.1,13.36 4,12.69 4,12C4,11.31 4.1,10.64 4.26,10H7.64C7.56,10.66 7.5,11.32 7.5,12C7.5,12.68 7.56,13.34 7.64,14M12,4.03C12.83,5.23 13.5,6.57 13.91,8H10.09C10.5,6.57 11.17,5.23 12,4.03M18.92,8H15.97C15.65,6.75 15.19,5.55 14.59,4.44C16.43,5.07 17.96,6.34 18.92,8M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"
          />
        </svg>
      </ic-navigation-item>
    </ic-side-navigation>
    <div class="content-div-container">
      <main id="main">
      <ic-section-container class="main-section-container" aligned="center">
        <div class="main-content-div">
          <ic-typography variant="h2">
            <h2>Example heading</h2>
          </ic-typography>
          <ic-typography variant="subtitle-large">
            <p>Example sub-heading</p>
          </ic-typography>
          <ic-typography>
            <p>
              Remove this div and add your custom content in ic-section-container.
            </p>
          </ic-typography>
        </div>
      </ic-section-container>
    </main>
    <ic-back-to-top target="main"></ic-back-to-top>
    <ic-footer
      aligned="center"
      caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
      description="This pattern was built using the Intelligence Community Design System (ICDS)."
    >
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="link" href="">[footerLink]</ic-footer-link>
      <ic-footer-link slot="logo" href="/">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
          width="48"
          height="48"
        >
          <path
            d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
            fill="currentColor"
          />
        </svg>
      </ic-footer-link>
    </ic-footer>
  </div>
</div>`,
    },
  },
  {
    technology: "React",
    snippets: {
      long: [
        {
          language: "Typescript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
    contentDivContainer: {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
    },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    parentDiv: { display: "flex", height: "100%" },
    main: { minHeight: "100vh", display: "flex" },
    mainSectionContainer: { display: "flex", flex: 1 },
  });
  const classes = useStyles();
  const alignment: IcAlignment = "center";
  return (
    <div className={classes.parentDiv}>
      <IcClassificationBanner />
      <IcSideNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          path={mdiCompassOutline}
        />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
          selected
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHomeOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiMagnify}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiChartTimelineVariant}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCommentTextOutline}
          />
        </IcNavigationItem>
        <IcDivider slot="primary-navigation" />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric1BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric2BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric3BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric4BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCogOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHuman}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiWeb}
          />
        </IcNavigationItem>
      </IcSideNavigation>
      <div className={classes.contentDivContainer}>
        <main className={classes.main} id="main">
          <IcSectionContainer
            aligned={alignment}
            className={classes.mainSectionContainer}
          >
            <div className={classes.mainContentDiv}>
              <IcTypography variant="h2">
                <h2>Example heading</h2>
              </IcTypography>
              <IcTypography variant="subtitle-large">
                <p>Example sub-heading</p>
              </IcTypography>
              <IcTypography>
                <p>
                  Remove this div and add your custom content in
                  IcSectionContainer.
                </p>
              </IcTypography>
            </div>
          </IcSectionContainer>
        </main>
        <IcBackToTop target="main" />
        <IcFooter
          aligned={alignment}
          caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
          description="This pattern was built using the Intelligence Community Design System (ICDS)."
        >
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="logo" href="/">
            <SlottedSVG
              xmlns="http://www.w3.org/2000/svg"
              width="48"
              height="48"
              viewBox="0 0 24 24"
              fill="#FFFFFF"
            >
              <path
                d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
                fill="currentColor"
              />
            </SlottedSVG>
          </IcFooterLink>
        </IcFooter>
      </div>
    </div>
  )`,
            "SideNavigationWithBackToTopPattern",
            "tsx",
            true
          ),
        },
        {
          language: "Javascript",
          snippet: createReactAppTsx(
            `const useStyles = createUseStyles({
    contentDivContainer: {
      display: "flex",
      flexDirection: "column",
      flexGrow: "1",
    },
    mainContentDiv: {
      border: "var(--ic-border-width) dashed var(--ic-architectural-400)",
      padding: "var(--ic-space-md)",
      flex: 1,
    },
    parentDiv: { display: "flex", height: "100%" },
    main: { minHeight: "100vh", display: "flex" },
    mainSectionContainer: { display: "flex", flex: 1 },
  });
  const classes = useStyles();
  const alignment = "center";
  return (
    <div className={classes.parentDiv}>
      <IcClassificationBanner />
      <IcSideNavigation
        appTitle="[Enter your application name]"
        status="alpha"
        version="v0.0.7"
      >
        <SlottedSVG
          slot="app-icon"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          path={mdiCompassOutline}
        />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
          selected
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHomeOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiMagnify}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiChartTimelineVariant}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCommentTextOutline}
          />
        </IcNavigationItem>
        <IcDivider slot="primary-navigation" />
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric1BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric2BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric3BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="primary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiNumeric4BoxOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiCogOutline}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiHuman}
          />
        </IcNavigationItem>
        <IcNavigationItem
          slot="secondary-navigation"
          label="[navigationOption]"
          href="#"
        >
          <SlottedSVG
            slot="icon"
            viewBox="0 0 24 24"
            width="24"
            height="24"
            path={mdiWeb}
          />
        </IcNavigationItem>
      </IcSideNavigation>
      <div className={classes.contentDivContainer}>
        <main className={classes.main} id="main">
          <IcSectionContainer
            aligned={alignment}
            className={classes.mainSectionContainer}
          >
            <div className={classes.mainContentDiv}>
              <IcTypography variant="h2">
                <h2>Example heading</h2>
              </IcTypography>
              <IcTypography variant="subtitle-large">
                <p>Example sub-heading</p>
              </IcTypography>
              <IcTypography>
                <p>
                  Remove this div and add your custom content in
                  IcSectionContainer.
                </p>
              </IcTypography>
            </div>
          </IcSectionContainer>
        </main>
        <IcBackToTop target="main" />
        <IcFooter
          aligned={alignment}
          caption="This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation."
          description="This pattern was built using the Intelligence Community Design System (ICDS)."
        >
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="link" href="">
            [footerLink]
          </IcFooterLink>
          <IcFooterLink slot="logo" href="/">
            <SlottedSVG
              xmlns="http://www.w3.org/2000/svg"
              width="48"
              height="48"
              viewBox="0 0 24 24"
              fill="#FFFFFF"
            >
              <path
                d="M12 6.19L17 10.69V18.5H15V12.5H9V18.5H7V10.69L12 6.19ZM12 3.5L2 12.5H5V20.5H11V14.5H13V20.5H19V12.5H22L12 3.5Z"
                fill="currentColor"
              />
            </SlottedSVG>
          </IcFooterLink>
        </IcFooter>
      </div>
    </div>
  )`,
            "SideNavigationWithBackToTopPattern",
            "jsx",
            true
          ),
        },
      ],
    },
  },
];

<ComponentPreview
  snippets={snippetsSideNavBackToTop}
  projectTitle="Side Navigation with Back To Top"
  style={{
    display: "flex",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
    padding: "1rem",
  }}
  type="pattern"
>
  <IcLink href="/side-navigation-back-to-top-pattern" target="_blank">
    View example in new window
  </IcLink>
</ComponentPreview>

## Customisation

This pattern can be themed to change the look and feel of the app. Use the [custom theme](/get-started/install-components/custom-theme) guidance to change your app's theme. Make sure to select your theme in line with the accessibility requirements around colour contrast.

<DoDontCaution
  imageSrc={sideNavigationPatternFig1}
  imageAlt="An example page showing the layout with an alternatively themed look."
  state="none"
  caption="An example of the side navigation layout themed to an alternative colour."
/>

## Accessibility considerations

When configuring a page make sure to follow all [accessibility guidance](/accessibility). Most accessibility requirements are covered by the individual components. For further accessibility information see the individual component pages.

We’ve tested this pattern against WCAG 2.1 Level AA. It’s been tested with NVDA and VoiceOver, and several different users with different interaction methods.

## Related patterns

- [Top navigation layout](/patterns/navigation-patterns/top-navigation-layout)

---

# Toggle button

URL: https://design.sis.gov.uk/components/toggle-button
Status: BETA
Subtitle: Toggle buttons provide an action capable of indicating a state. They are commonly used for turning settings either ‘on’ or ‘off’.


import { IcToggleButton } from "@ukic/react";
import toggleFig1 from "./images/fig-1-use-standalone-toggle-buttons-to-show-a-selection-status.png";
import toggleFig2 from "./images/fig-2-use-toggle-button-groups-for-multiple-options.png";
import toggleFig3 from "./images/fig-3-use-single-select-group-when-all-buttons-can-be-deselected.png";
import toggleFig4 from "./images/fig-4-use-different-appearance-options-on-different-background.png";
import toggleFig5 from "./images/fig-5-dont-mix-different-appearance-options-together.png";
import toggleFig6 from "./images/fig-6-use-consistent-label-between-states.png";
import toggleFig7 from "./images/fig-7-dont-use-different-icon-positions-in-same-group.png";

## Introduction

A toggle button is a type of button that shows a selection status and so is commonly used to turn a setting ‘on’ or ‘off’. It is similar to a [switch](/components/switch) but can be grouped into denser layouts, for example within a toolbar.

An icon toggle button provides the same functionality but removes the visible text label in favour of an icon to represent its meaning.

<ComponentPreview>
  <IcToggleButton label="Switch to oat milk">
    <svg slot="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcToggleButton>
</ComponentPreview>

## When to use

Use a standalone toggle button to provide access to a single option that can be toggled ‘on’ or ‘off’. Make sure to clearly label the toggle button so that it is clear what toggling the setting would achieve.

For example, use a standalone toggle button for a mute button in an audio player.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={toggleFig1}
    imageAlt="A standalone toggle button used for a mute button in an audio player."
    state="good"
    caption="Use a standalone toggle button for a mute button to indicate when the setting is enabled or disabled."
  />
</DoubleDoDontCaution>

Use toggle buttons in dense layouts or sections of an app that don’t have a lot of space. Use other selection methods, such as [radio buttons](/components/radio) or [switches](/components/switch), when there is more space to include more text labelling.

For example, use toggle buttons when creating a toolbar as the small size and contained selection states allow for multiple settings to be organised within a small space.

Use an icon toggle button to provide a setting with no text label, but an icon instead. Take care when selecting the icon so that it is clear what the setting is and always provide an accessible label so that it can be understood by users of assistive technology.

Group toggle buttons to provide multiple options for a setting or control. Select whether the toggle button group can have multiple options toggled on at one time, or if only one should be selected at a time.

For example, use a multi-select toggle button group to provide text styling options in a text editor where an item of text could be set to bold as well as italic.

Similarly, use a single-select toggle button group to provide text alignment options in a text editor where an item of text can only have one alignment option at a time.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={toggleFig2}
    imageAlt="A toggle button group used for text styling options including bold, italic, underline and strikethrough, and a second toggle button group used for text alignment options including left, centre, right, and justified."
    state="good"
    caption="Use toggle button groups to provide multiple options for a setting such as text styling options."
  />
</DoubleDoDontCaution>

## When not to use

Consider whether toggle buttons are the best selection method for your use case. [Radio buttons](/components/radio), [checkboxes](/components/checkboxes) and [switches](/components/switch) provide alternative methods of proving a selection.

Avoid using toggle buttons or toggle button groups to capture input within a form, instead use checkboxes or radio buttons.

Avoid using toggle buttons to control the state of another content section in your app. Instead, use [tabs](/components/tabs) for switching views.

## Interaction behaviour

When implementing a toggle button group, set the selection type to either single-select or multi-select. Single-select allows only one option to be selected at a time, where multi-select allows multiple options to be selected.

If using a single-select toggle button group, choose whether the selection method should be automatic or manual. The automatic selection method selects the option as you navigate through the options, whereas manual selection requires the option to be manually selected after navigating to it.

Use manual selection if no selected option is viable for the toggle button group.

For example, an audio player could use a toggle button group for its play, fast forward and rewind buttons. Only one option can be selected at a time, but all options can also be turned off.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={toggleFig3}
    imageAlt="An audio player’s play, fast forward and rewind buttons where all toggle buttons can be deselected at the same time."
    state="good"
    caption="Use a single select group with manual selection to allow all options in a toggle button group to be deselected at the same time."
  />
</DoubleDoDontCaution>

## Colour

Use the appearance options when placing toggle buttons on different coloured backgrounds. This makes sure that a good colour contrast can be achieved in adherence to the accessibility guidelines.

Don’t mix different appearance buttons in the same toggle button group, always use the same appearance for all toggle buttons within a group.

Don’t re-colour the icons in a toggle button, make sure they match the text label so that they also achieve a high colour contrast ratio.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={toggleFig4}
    imageAlt="Two versions of a text styling setting that uses toggle button groups. One has a dark background with light appearance toggle buttons, and the other has a light coloured background with dark appearance toggle button groups."
    state="good"
    caption="Use the appearance options to achieve good contrast on different coloured backgrounds."
  />
  <DoDontCaution
    imageSrc={toggleFig5}
    imageAlt="A text styling setting that uses toggle button groups. Within the toggle button groups different toggle buttons use different appearance options."
    state="bad"
    caption="Don’t mix appearance options together in the same toggle button group."
  />
</DoubleDoDontCaution>

## Sizing

Use the size options to resize the toggle buttons. Match the selected size to other components in the same section so that they are vertically aligned.

Set a custom width for a toggle button instead of the default behaviour that hugs the toggle button’s label or icon. Text labels will wrap onto multiple lines if the custom width is too small to fit the label in one line.

Use the full width properties to make the toggle button or toggle button group expand to horizontally fill its container.

## Content

Take care when choosing a toggle button’s text label so that it is clear what will happen when it is toggled ‘on’ or ‘off’. Don’t use neutral or ambiguous labels. The toggle button should be read ‘label: on’ or ‘label: off’.

Don’t change the text label on a toggle button between different selection states as it causes it to become ambiguous as to what state it is in. Instead, keep the label the same, but use the icon to indicate a change in state.

For example, when using a toggle button for a mute button, the label should read ‘mute’ and the state of the button indicates whether ‘mute’ is ‘on’ or ‘off’. The change in icon also helps to indicate the current state.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={toggleFig6}
    imageAlt="An example of an audio player with a mute button. The button reads ‘mute’ when the button is toggled either on or off."
    state="good"
    caption="Use consistent labels between states on a toggle button to avoid confusion."
  />
</DoubleDoDontCaution>

Use an icon on a toggle button to add a visual indicator of its function. Take care to choose an appropriate icon that clearly represents the toggle button’s function and doesn’t introduce ambiguity into its meaning.

Set the icon position to be either left, right or above the text label. Don’t use different icon positions on different toggle buttons within a toggle button group. Use the toggle button group’s icon position to set all toggle buttons’ icons to the same position.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={toggleFig7}
    imageAlt="A text alignment setting with three options for left, centre and right. Each button has its icon positioned differently on the toggle button."
    state="bad"
    caption="Don’t mix icon positions on buttons within the same group."
  />
</DoubleDoDontCaution>

Aim to only include two to six toggle buttons within a toggle button group. The larger the number of buttons the less horizontal space is available to display the labels. If more options are required, consider using a [popover menu](/components/popover-menu) instead.

## Accessibility considerations

When labelling toggle buttons, consider adding an accessible label that includes the visible label. This provides more context to users of assistive technology.

Always provide an accessible label when using icon toggle buttons as this is what identifies the purpose of the icon toggle buttons to screen readers.

When using a toggle button group, set a label for the group explaining the setting. This is not displayed visibly but is used to identify the group when navigated using assistive technology.

Select the optimal appearance option when using toggle buttons on different coloured backgrounds to maximise the colour contrast. User interface controls need to achieve 3:1 ratio with adjacent colours.

## Related components

- [Switch](/Components/switch)
- [Radio button](/Components/radio)
- [Checkbox](/Components/checkbox)
- [Popover menu](/Components/popover-menu)

---

# Chip

URL: https://design.sis.gov.uk/components/chip
Status: BETA
Subtitle: Chips are used to filter and present data.


import { IcChip } from "@ukic/react";
import chipsFig1 from "./images/fig-1-use-dismissible-chips-for-filtering-multiple-item.png";
import chipsFig2 from "./images/fig-2-do-use-static-chip-to-display-descriptive-non-interactive-information.png";
import chipsFig3 from "./images/fig-3-do-not-replace-status-tags-for-static-chips.png";
import chipsFig4 from "./images/fig-4-do-use-status-tags-to-display-status.png";
import chipsFig5 from "./images/fig-5-avoid-using-long-labels-as-it-will-force-the-text-to-wrap.png";
import chipsVid1 from "./images/anim-1-do-allow-users-to-re-select-the-item-after-it-has-been-dismissed.mp4";
import chipsVid2 from "./images/anim-2-do-not-use-dismissible-chips-when-the-user-will-not-be-able-to-re-select-the-dismissed-item.mp4";

## Component variants

<ComponentPreview style={{ gap: "0.5rem" }}>
  <IcChip label="Americano" dismissible>
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcChip>
  <IcChip label="Cappuccino">
    <svg
      slot="icon"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
  </IcChip>
</ComponentPreview>

There are two types of chip: dismissible chips and static chips. Dismissible chips have both filled and outline variants and are interactive, whereas static chips simply present information and aren't actionable.

### Dismissible chips

Use a dismissible chip to show selected data from a user action that can be cleared by dismissing the chip. This is often used in the context of filtering and selection.

#### Filled

Use filled dismissible chips to provide high emphasis on the displayed information.

#### Outlined

Use outlined dismissible chips to provide low emphasis on the displayed information.

### Static chips

Use static chips to display information that does not need clearing. They aren't interactive, so they don't present any action and they can't be dismissed.

## When to use

### Dismissible chips

Use dismissible chips when you need to choose multiple items from a list but need to show items after they've been chosen.

Common use cases include:

- A list showing which filters have been selected for a search.
- Choosing multiple recipients of a message.

<DoDontCaution
  imageSrc={chipsFig1}
  imageAlt="A correct example of a series of dismissible chips being used in a multi-select dropdown to display a list of selected items."
  state="good"
  caption="Use dismissible chips for filtering multiple items."
/>

### Static chips

Use static chips when you need to simply display a piece of information with no interaction, such as a label.

Common use cases include:

- Labelling or drawing attention to a particular card or row because of its state.

- Displaying the current location of an item.

<DoDontCaution
  imageSrc={chipsFig2}
  imageAlt="A correct example of three static chips labelled 'Published 18 May 2021', '#UI', and '#Components' right below the header of a page titled 'Guidance'."
  state="good"
  caption="Use static chips to display descriptive, non-interactive information."
/>

## When not to use

### Dismissible chips

Don't use dismissible chips where the user can't re-select the item presented in the chip.

For example, if used to show a selected filter, after dismissing the chip and clearing the filter, it can be applied again later.

<video
  width="100%"
  muted
  controls
  loop
  title="An animation showing the user dismissing a chip labelled 'Roasted' and the option not re-appearing in the filter section."
>
  <source src={chipsVid1} type="video/mp4" />
</video>

Don't use dismissible chips when the user will not be able to re-select the dismissed item.

<video
  width="100%"
  muted
  controls
  loop
  title="An animation showing the behaviour of a dismissible chip as it re-appears in the filter section when the user dismisses it."
>
  <source src={chipsVid2} type="video/mp4" />
</video>

Allow users to re-select the item after it has been dismissed.

### Static chips

Don't use static chips to show status. Use [status tags](/components/status-tag) instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={chipsFig4}
    imageAlt="Three chips, of which a neutral tag labelled 'Idle, a warning tag labelled 'Offline', and success tag labelled 'Online' displaying the status of three coffee machines."
    state="good"
    caption="Use status tags to display status."
  />
  <DoDontCaution
    imageSrc={chipsFig3}
    imageAlt="Three static chips labelled 'Idle', 'Offline', and 'Online' displaying the status of three coffee machines."
    state="bad"
    caption="Don't use static chips to denote status."
  />
</DoubleDoDontCaution>

## Layout and placement

### Chip grouping

When using chips in a group, make sure they are left aligned and are positioned next to each other in a row.

Only position chips on multiple rows if there isn't enough horizontal space to show them on one, or if they are segmented into labelled groups.

## Content

### Labels

Use concise labels for better readability. Longer labels will force the text to wrap.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={chipsFig5}
    imageAlt="An example of a long label being wrapped on two lines."
    state="caution"
    caption="Avoid using long labels as it will force the text to wrap."
  />
</DoubleDoDontCaution>

### Icons

Use an icon on the left of a dismissible or static chip to provide additional meaning.

When including an icon in a chip make sure that the icon is understandable and relevant to the information presented.

Always provide alternative descriptions for icons, or mark them as decorative. Don't use icons if they aren't necessary.

## Related components

- [Status tags](/components/status-tag)

---

# Navigation patterns

URL: https://design.sis.gov.uk/patterns/navigation-patterns
Subtitle: Navigation patterns are ready-made pages with built-in components to help get you started.


## Introduction

Navigation patterns are built with [components](/components) laid out in a ready-made structure. They are used to quickly design and develop pages.

Use the navigation patterns to copy and paste the code directly into your project. Then, focus on adding your custom content without worrying about the navigation layouts.

Additionally, the code snippets manage the pattern's responsive layout so you don't have to.

- [Top navigation layout](/patterns/navigation-patterns/top-navigation-layout)
- [Side navigation layout](/patterns/navigation-patterns/side-navigation-layout)

---

# Figma UI Kit

URL: https://design.sis.gov.uk/get-started/figma
Subtitle: Reusable and flexible Figma components used to design, prototype and hand-off designs for apps and digital products.


import figmaFig1 from "./images/assets2x.png";
import figmaFig2 from "./images/libraries2x.png";

## About the Figma UI Kit

We've built a Figma UI Kit to use alongside the guidance and code you'll find on this website. It'll make it easier to prototype and build things quickly.

All Figma resources have been built with our users in mind, with a strong focus on making sure accessibility is embedded from the start. That way we can provide an amazing experience that is usable for everyone.

## Accessing the library for internal users

The UI Kit is turned on by default for all projects within our community. Check that you are using the latest version.

1. In a new or existing Figma design file, click 'Assets' from the left-hand side panel then click the 'Team library' icon (the book).

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={figmaFig1}
    imageAlt="Image of the left-hand side panel in Figma with the 'Assets' tab open and icon buttons on the right of the panel including the 'Team library' button."
    state="none"
  />
</DoubleDoDontCaution>

2. Make sure the Intelligence Community Design System library is turned on.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={figmaFig2}
    imageAlt="Image of the Libraries menu in Figma with the Intelligence Community Design System library turned on."
    state="none"
  />
</DoubleDoDontCaution>

## Not part of the Intelligence Community?

<p>
  We've published our{" "}
  <ic-link
    target="_blank"
    href="https://www.figma.com/community/file/1392159713403656562"
    rel="noreferer noopener nofollow"
  >
    Figma UI Kit
  </ic-link>{" "}
  to the Figma Community so that everyone can use our resources.
</p>
<p>
  You can make a copy of it in your local files and use the components in your
  designs. This is a static version and you won't automatically receive
  component updates. Check Figma Community regularly for new updates and
  versions.
</p>

<ol>
  <li>
    Navigate to the{" "}
    <ic-link
      target="_blank"
      href="https://www.figma.com/community/file/1392159713403656562"
      rel="noreferer noopener nofollow"
    >
      Intelligence Community UI Kit on Figma Community
    </ic-link>
    .
  </li>
  <li>
    Duplicate the library into your drafts and connect your project files.
  </li>
  <li>
    Use the{" "}
    <ic-link
      target="_blank"
      href="https://help.figma.com/hc/en-us/articles/360039150413-Swap-components-and-instances"
      rel="noreferer noopener nofollow"
    >
      swap libraries
    </ic-link>{" "}
    function in Figma to quickly swap your components from one version to the
    next.
  </li>
</ol>
<p>
  If you want to request a new feature, or if you notice any issues, you can{" "}
  <ic-link
    target="_blank"
    href="https://github.com/mi6/ic-design-system/issues"
    rel="noreferer noopener nofollow"
  >
    raise it on GitHub issues
  </ic-link>
  . For more information please read <ic-link href="/community/contribute#contribute-to-the-figma-ui-kit">
    how to contribute to the Figma UI Kit
  </ic-link>.
</p>

---

# Custom theme

URL: https://design.sis.gov.uk/get-started/install-components/custom-theme
Subtitle: How to change the theme colour of some components.


## Customising component colours

Some components can have their theme colour changed by using either of the methods below. When the theme colour is changed, components will automatically update.

Other styles on affected components will also adapt accordingly, such as the colour of text or icons.

## CSS variables

You can set the theme colour by using the three CSS variables (one for each of the RGB values for the colour) shown below:

```css
:root {
  --ic-theme-primary-r: 92;
  --ic-theme-primary-g: 9;
  --ic-theme-primary-b: 72;
}
```

## Theme component

Alternatively, you can include the `ic-theme` component and set the `color` property:

```jsx
<ic-theme color="rgb(92, 9, 72)"></ic-theme>
<ic-theme color="#5c0949"></ic-theme>
```

### Components that use the theme colour

- [Footer](/components/footer)
- [Hero](/components/hero)
- [Side navigation](/components/side-navigation)
- [Top navigation](/components/top-navigation)

---

# Next.js

URL: https://design.sis.gov.uk/get-started/install-components/nextJS
Subtitle: How to use the components in a Next.js-based application.


## Transpile react package

The `@ukic/react` package will need to be transpiled for use with Next.js. The steps required will depend on the version of Next.js you are using.

### Next.js 13 and later

Set the following in the `next.config.js` file.

```jsx
const nextConfig = {
  //other configuration
  transpilePackages: ["@ukic/react"],
};

module.exports = nextConfig;
```

### Next.js 12 and earlier

#### Step one

Install the `next-transpile-modules` package in the root of your project.

```shell
// using npm
npm install next-transpile-modules

// using yarn
yarn add next-transpile-modules
```

#### Step two

Set the following in the `next.config.js` file.

```jsx
const nextConfig = {
  //other configuration
};

const withTM = require("next-transpile-modules")(["@ukic/react"]);
module.exports = withTM(nextConfig);
```

## Web components limitations

While our component library is built with web components, which offer numerous benefits, there may be limitations when using them with Next.js or other Server-Side Rendering (SSR) frameworks due to current limitations in web component support.

This may result in slower performance and manual workarounds. We're actively working to provide more information and updates on this topic as it evolves.

---

# Typography

URL: https://design.sis.gov.uk/components/typography
Status: BETA
Subtitle: Use the typography component for consistent styling across typographical elements.


import { IcTypography } from "@ukic/react";

## Introduction

The typography component is used to style text elements like `p`, `h1` and `label`. The element to be styled should be wrapped with the typography component.

The typography variants are defined on the [typography styles](/styles/typography) page.

Use one of the typography component's variants to style an element. For example, the following uses a `h2` variant to wrap a `h5` element and apply the 'heading large' styling.

<ComponentPreview>
  <IcTypography variant="h2">
    <h5>&lt;h5&gt; with 'heading large' styling</h5>
  </IcTypography>
</ComponentPreview>

## When to use

Use typography to provide consistent styling across an app's text content.

Use the logical order of `h#` tags in code for headings. For example, a `h3` heading needs to come after a `h2` heading but can be styled as any variant.

Add a variant to the typography element to change its style. This doesn't change the semantic level of the typography element so make sure to always adhere to <ic-link target="_blank" href="https://www.w3.org/WAI/tutorials/page-structure/headings/" rel="noreferer noopener nofollow">accessible heading levels</ic-link>. For example, body text with a variant of `h2` will appear visually as an `h2` but still be body text in the DOM.

## Vertical margins

When using a typography component within page content, apply the vertical margins to evenly space out text elements on the page.

If using the typography component within other components or compact layouts, don't apply vertical margins. You can then position the typography component with precision.

---

# Components

URL: https://design.sis.gov.uk/components
Subtitle: Components are reusable user interface elements that help create consistent, accessible and usable experiences.


<ComponentGallery />

Can’t find what you’re looking for? We are expanding the Design System and UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming.

If you can help contribute to the system, follow our guidance about [how to contribute](/community/contribute).

---

# Dialog

URL: https://design.sis.gov.uk/components/dialog
Status: BETA
Subtitle: Dialogs are modal windows that interrupt the user's current task to bring something important to attention.


import { IcDialog, IcButton, IcTypography } from "@ukic/react";
import { useRef } from "react";
import dialogFig1 from "./images/fig-1-use-action-buttons-to-provide-user-with-choice.png";
import dialogFig2 from "./images/fig-2-use-inputs-to-get-important-information-from-users.png";
import dialogFig3 from "./images/fig-3-use-dialogs-to-show-additional-info.png";
import dialogFig4 from "./images/fig-4-use-status-alert-to-provide-status-information.png";
import dialogFig5 from "./images/fig-5-use-destructive-actions.png";
import dialogFig6 from "./images/fig-6-avoid-including-complex-content.png";
import dialogFig7 from "./images/fig-7-dialog-anatomy.png";

## Introduction

Dialogs prompt users for additional information to proceed with their task. Dialogs appear modally, meaning that the user must take action to acknowledge the dialog before continuing.

Dialogs work best when used for short tasks or to alert the user to information relevant for their current task. A dialog appears on top of the main page content and is persistent until dismissed.

## Component demo

export const DialogExample = () => {
  const dialogEl = useRef(null);
  const showDialog = () => {
    dialogEl.current.open = true;
  };
  return (
    <>
      <IcButton onclick={showDialog} aria-label="Launch dialog">
        Launch dialog
      </IcButton>
      <IcDialog
        heading="Are you sure?"
        label="Coffee order"
        ref={dialogEl}
        buttonProps={[
          { label: "Cancel", onclick: "this.cancelDialog()" },
          {
            label: "Confirm",
            onclick: "alert('Confirmed!'); this.open = false;",
          },
        ]}
      >
        <IcTypography>
          You are about to add 'Americano' to your basket. Are you sure you want
          to continue?
        </IcTypography>
      </IcDialog>
    </>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
>
  <DialogExample />
</ComponentPreview>

## When to use

Use dialogs to interrupt the user flow to display, collect or confirm information that is important to enable the user to continue their task.

Add action buttons to a dialog to present the user with a set of actions to choose from to continue.

<DoDontCaution
  imageSrc={dialogFig1}
  imageAlt="An example dialog message for a coffee order saying 'Are you sure?' with buttons for 'Continue' and 'Go back'."
  state="good"
  caption="Use dialogs with buttons to present the user with a required action."
/>

Add interactive content inside a dialog's content area to capture key input, such as providing confirmation of understanding by checking a checkbox.

<DoDontCaution
  imageSrc={dialogFig2}
  imageAlt="An example dialog for a coffee order that says 'Please agree to our terms and conditions.' The dialog has a checkbox in its content that allows the user to signify agreement. There are two buttons for 'continue' and 'go back'."
  state="good"
  caption="Use dialogs with interactive content in the content area to capture key input from a user before continuing."
/>

Use dialogs to show additional information that can be opened from the underlying page. These dialogs can be passive and contain no actions other than a dismiss button to close the dialog.

<DoDontCaution
  imageSrc={dialogFig3}
  imageAlt=": An example dialog containing additional information about the 'Americano' product."
  state="good"
  caption="Use dialogs to provide additional information that isn't displayed on the underlying page."
/>

Add a status [alert](/components/alert) to a dialog to provide additional meaning in relation to a specific status. These can include any alert status variant.

<DoDontCaution
  imageSrc={dialogFig4}
  imageAlt="An example dialog for a coffee order asking if the user is sure they want to continue adding the product 'Americano' to their basket. It contains a warning alert that says 'Only a few left'."
  state="good"
  caption="Use a status alert within a dialog to highlight important information related to the dialog's content."
/>

Use dialogs when a destructive action is about to take place. Ask the user to confirm if they want to continue to conduct the action and provide a way of cancelling the action.

<DoDontCaution
  imageSrc={dialogFig5}
  imageAlt="An example dialog for removing an item from a basket. It provides a destructive action button for 'Remove' and a secondary button for 'Go back'."
  state="good"
  caption="Use a dialog for destructive actions to give the user an option to back out at the last minute."
/>

## When not to use

Avoid using dialogs to contain complicated tasks or processes. Instead consider if such complex tasks could be placed on a page themselves.

<DoDontCaution
  imageSrc={dialogFig6}
  imageAlt="An example dialog containing a multi-step form for selecting and adding drinks to an order. A stepper with four steps is used with multiple form elements inside each step."
  state="caution"
  caption="Whilst you can put any content within a dialog, avoid placing complex tasks in one and consider placing it on the main page itself."
/>

Don't place important information inside a dialog if it is not part of the main flow of task. Such information can be missed so consider placing it on the page itself. Avoid repeating information in a dialog that is displayed on the page itself.

Don't use dialogs when information from the main page content is required to complete a task within a dialog. Keep all information required to complete the task in a dialog within the dialog. If more information is required, consider if dialogs may not be suitable for the task.

Avoid overusing dialogs to bring every decision in a task to the user's attention. Use dialogs for the key actions in a task instead. Dialogs may be ignored if used too frequently.

Only show dialogs after a user action has triggered it, and make sure its content is contextual to the user action. Don't show dialogs if a user has not performed a specific action on the page.

## Interaction behaviour

Display dialogs after users complete a specific action on a page such as clicking a 'submit' button.

Always make sure the dismiss button is included within a dialog, and select whether to allow the dialog to close by clicking on the background scrim.

When a dialog is displayed, the page content in the background cannot be interacted with.

Content can scroll within the body of a dialog, whilst the header section and interaction section are sticky at the top and bottom of the dialog window.

## Sizing

Set the dialog's size dependent on the amount of content that is being displayed in it. Large dialogs take up most of the screen so are good to use when there is a lot of content to display such as a table. Small dialogs only use a small amount of the screen so are best used for short additional information.

On extra small breakpoints all dialogs automatically change to their full-screen setting to provide maximum space for their content.

## Content

Always give dialogs a meaningful heading and describe the task that the dialog contains.

Add an optional label to a dialog to add categorisation or other secondary information.

Specify any content within the dialog's body section, but take care not to place too much information in a dialog if it is best placed as a page itself. Also, consider using a full page instead of a dialog when lots of interactive elements are required.

Always follow the [content style](/styles/content-style) when writing textual content.

<DoDontCaution
  imageSrc={dialogFig7}
  imageAlt="A diagram showing the anatomy of a dialog. It has three areas, a title area at the top, a content area in the middle, and an action area at the bottom."
  state="none"
  caption="Dialogs have three sections: a title area, a content area and an action area."
/>

When adding interactive content to a dialog and it has popover elements, to avoid the elements being cut off within the content area, use the prop `disableHeightConstraint` to allow the dialog to stretch to contain its content.

---

# Accordion

URL: https://design.sis.gov.uk/components/accordion
Status: BETA
Subtitle: Accordions are expandable and collapsible sections that are used to show and hide additional content.


import {
  IcAccordion,
  IcAccordionGroup,
  IcTypography,
  SlottedSVG,
} from "@ukic/react";
import accordionFig1 from "./images/fig-1-add-accordion-titles-to-help-organise-content.png";
import accordionFig2a from "./images/fig-2a-use-see-all-button-to-open-all-accordions-within-an-accordion-group-at-once.png";
import accordionFig2b from "./images/fig-2b-use-hide-all-button-to-close-all-accordions-within-an-accordion-group-at-once.png";
import accordionFig3 from "./images/fig-3-use-the-slotted-content-of-an-accordion-to-house-other-content.png";
import accordionFig4 from "./images/fig-4-do-not-nest-an-accordion-or-accordion-group-within-an-already-nested-accordion-one-level-of-nesting-is-the-maximum.png";
import accordionFig5a from "./images/fig-5a-use-an-accordion-group-with-a-title-for-clearer-organisation.png";
import accordionFig5b from "./images/fig-5b-consider-using-an-accordion-group-instead-of-nested-accordions-for-clearer-organisation.png";
import accordionFig6 from "./images/fig-6-always-make-sure-your-title-is-relevant-to-your-accordion-group-content.png";
import accordionFig7 from "./images/fig-7-do-not-use-scroll-bars-within-accordions.png";

## Introduction

An accordion is an expandable and collapsible section that is used to show and hide content. Accordions are used to shorten the length of a page by hiding information.

Group accordions to hide more content on the page and to structure content into different sections.

An accordion group can be nested within another accordion to create one layer of nested content. Do not nest more accordion groups within an already nested accordion group. Only use one level of nesting.

<ComponentPreview style={{ flexDirection: "column" }}>
  <IcAccordionGroup groupTitle="Our coffees - Ingredients">
    <IcAccordion heading="Americano">
      <SlottedSVG
        slot="icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
      <IcTypography variant="body">
        A simple drink made by topping up espresso with hot water.
      </IcTypography>
    </IcAccordion>
    <IcAccordion heading="Cappuccino">
      <SlottedSVG
        slot="icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </SlottedSVG>
      <IcAccordion heading="Espresso">
        <IcTypography variant="body">
          Our tasty double shot of espresso made from the finest Arabica beans.
        </IcTypography>
      </IcAccordion>
      <IcAccordion heading="Steamed milk">
        <IcTypography variant="body">
          Steamy milk how you like it. Choose from whole, semi-skimmed, soy, oat
          or almond.
        </IcTypography>
      </IcAccordion>
      <IcAccordion heading="Chocolate sprinkles">
        <IcTypography variant="body">
          No cappuccino is complete without the sprinkles. Ours are made from
          sumptuous dark Belgian chocolate.
        </IcTypography>
      </IcAccordion>
    </IcAccordion>
  </IcAccordionGroup>
</ComponentPreview>

## When to use

Use accordions to organise information, shorten the page length and reduce the scroll time when the page is initially loaded.

Use accordion groups to categorise accordions into sections with a title.

For example, use an accordion group for a frequently asked questions (FAQs) page.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig1}
    imageAlt="Two collapsed accordion groups. One titled ‘Bari-star member benefits’ and one titled ‘FAQs’, both containing three accordions."
    state="good"
    caption="Add accordion titles to help organise content."
  />
</DoubleDoDontCaution>

Use the accordion title section to title the group of accordions and contain the 'see all' or 'hide all' button. Don’t display a title to achieve a title section with only the 'see all' or 'hide all' button.

Use 'see all' and 'hide all' functionality to show or hide all information from all accordions at once.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig2a}
    imageAlt="A collapsed accordion group titled ‘Bari-star member benefits’ with a ‘see all’ button."
    state="good"
    caption="Use the 'see all' button to open all accordions within an accordion group at once. "
  />
</DoubleDoDontCaution>

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig2b}
    imageAlt="An expanded accordion group titled ‘Bari-star member benefits’ with a ‘hide all’ button."
    state="good"
    caption="Use the 'hide all' button to close all accordions within an accordion group at once."
  />
</DoubleDoDontCaution>

Add custom content to an accordion using the slotted section to create different uses for your accordions.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig3}
    imageAlt="An accordion titled ‘Order details’ including a three-row data entity for a coffee order in the content area."
    state="good"
    caption="Use the slotted content of an accordion to house other content."
  />
</DoubleDoDontCaution>

Set an accordion to open one at a time when the information in the accordions is unrelated.

Set an accordion to open all at once when all information can be viewed at the same time and is related.

## When not to use

Do not use accordions when all information is critical to the people using the page.

Avoid overusing accordions to hide all information on a page. Accordions may be ignored if used too frequently.

Do not place accordion groups within nested accordion groups, one layer of nesting is the maximum.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig4}
    imageAlt="An accordion group titled ‘Roasting hot’ containing an accordion group with another nested accordion group within it."
    state="bad"
    caption="Do not nest an accordion or accordion group within an already nested accordion. One level of nesting is the maximum. "
  />
</DoubleDoDontCaution>

Do not use nested accordions as a replacement for an accordion group. Consider using multiple accordion groups on the page instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig5a}
    imageAlt="An accordion group titled Coffee with three collapsed accordions"
    state="good"
    caption="Use an accordion group with a title for clearer organisation."
  />
  <DoDontCaution
    imageSrc={accordionFig5b}
    imageAlt="A parent accordion with the heading Coffee with a nested accordion group containing three accordions."
    state="caution"
    caption="Avoid nesting an accordion group to add a title. Instead, use an accordion group title."
  />
</DoubleDoDontCaution>

## Colour

Use the dark or light appearance to achieve colour contrast compliance when using accordions on different coloured backgrounds.

## Sizing

Use an accordion's size property to change its vertical size and achieve compact or spacious layouts.

Set the width of the accordion depending on the screen size or the container that is being used.

## Layout and placement

Use accordions in main page content. Accordions can also be placed within other components to organise content.

## Content

### Heading and title

When using a title for an accordion group, make sure it is relevant to the information provided by each accordion header.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig6}
    imageAlt="An accordion group containing three accordions with headings of different types of tea, with a title of ‘Our coffee menu’"
    state="bad"
    caption="Always make sure your title is relevant to your accordion group content."
  />
</DoubleDoDontCaution>

Always give an accordion a suitable header that is relevant to the information that it contains.

Relevant titles and headings allow people to skip over the information if it is not relevant.

### Accordion content

Use text content by default or use the accordion slot to provide custom content or layouts.

Do not make accordion content scrollable as this will interfere with the page scroll.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={accordionFig7}
    imageAlt="An accordion group with three accordions where the first accordion is expanded, containing a scroll bar."
    state="bad"
    caption="Do not use scroll bars within accordions."
  />
</DoubleDoDontCaution>

### Icons

Use an icon on an accordion header to provide additional meaning or to aid in recognition.

Make sure that the icon is understandable and relevant to the accordion header and content.

Always provide alternative descriptions for icons if they aren't decorative. Only use icons if they are necessary, they are removed as default.

## Accessibility considerations

Make sure to change an accordion’s semantic heading style to achieve a logical heading structure on the page.

---

# Link

URL: https://design.sis.gov.uk/components/link
Status: BETA
Subtitle: Links can be used to navigate to different pages or sections of a page.


import { IcLink, IcTypography } from "@ukic/react";
import linksFig1 from "./images/always-include-a-launch-icon-when-directing-users-to-an-external-address.png";
import linksFig2 from "./images/dont-use-a-default-link-for-links-which-open-a-new-tab-or-website.png";
import linksFig3 from "./images/use-a-button-when-displaying-a-clickable-action.png";
import linksFig4 from "./images/dont-use-a-link-to-initiate-an-action.png";
import linksFig5 from "./images/when-using-inline-links-always-use-a-different-colour-to-the-adjacent-text.png";
import linksFig6 from "./images/avoid-using-the-same-colour-style-as-the-adjacent-text.png";
import linksFig7 from "./images/use-the-monochromatic-variant-when-listing-links.png";
import linksFig8 from "./images/do-not-use-bad-link-text.png";

## Component demo

Links can include a launch icon to the right of the link for clarity.

<ComponentPreview>
  <IcTypography>
    Return to the{" "}
    <IcLink href="/components/link" target="_blank">
      café homepage
    </IcLink>
  </IcTypography>
</ComponentPreview>

## When to use

Use links to navigate to a new page.

Links can be applied to any text element but will use the link styling.

Always show a launch icon when a link is set up to open a page in a new tab or window, or when directing to an external app.

<DoDontCaution
  imageSrc={linksFig1}
  imageAlt="An example of a link labelled ‘Fairtrade Foundation” featuring a ‘launch’ icon to denote it will open a new tab or page."
  caption="Always include an external link icon formed by a square and an arrow when directing users to an external address."
  state="good"
/>

<DoDontCaution
  imageSrc={linksFig2}
  imageAlt="An example of a link labelled ‘Fairtrade Foundation” not featuring an external link icon."
  caption="Don’t use a default link for links that open a new tab or website."
  state="bad"
/>

## When not to use

Don’t use a link to display an action on a page, use a [button](/components/button) instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={linksFig3}
    imageAlt="An image of an example form featuring a group of radio buttons, with a submit button at the end."
    caption="Use a button when displaying a clickable action."
    state="good"
  />
  <DoDontCaution
    imageSrc={linksFig4}
    imageAlt="An image of an example form featuring a group of radio buttons, and a link labelled ‘Submit’ at the end."
    caption="Don’t use a link to initiate an action."
    state="bad"
  />
</DoubleDoDontCaution>

## Colour

Once a link has been visited, the browser will remember this and the link will change to use the visited styling.

Your browser is set to remember what links have been visited. Visited links feature a different colour style.

All other states will use specific [hyperlink styling](/styles/colour#links).

Use default appearance links when used inline with other text. If the text appears on a different coloured background, use the light or dark appearance links to achieve good colour contrast.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={linksFig5}
    imageAlt="An example paragraph with black text, featuring a link with blue colour styling."
    caption="When using links, always use a different colour to the adjacent text."
    state="good"
  />
  <DoDontCaution
    imageSrc={linksFig6}
    imageAlt="An example paragraph with black text, featuring a link the same colour styling."
    caption="Avoid using the same link appearance as the adjacent text. Only use the same appearance if the text is used on a dark background."
    state="bad"
  />
</DoubleDoDontCaution>

Use the light or dark appearance links when listing a series of links on different coloured backgrounds.

<DoDontCaution
  imageSrc={linksFig7}
  imageAlt="An image of a footer with two navigation groups titled ‘Services’ and ‘Policy’ which house a list of several links. Every text element in the footer is white, including the hyperlinks."
  caption="Use light appearance links when displaying links on a dark background."
  state="good"
/>

## Content

### Link text

Always use a concise string of text in a link rather than displaying the full URL. Make sure the link text is descriptive enough to be relevant to the page the link points to.

Don’t omit important descriptive information from the link text. Avoid using unnecessarily lengthy descriptions, but strike a balance between relevance and conciseness.

<ComponentPreview state="good" caption="test">
  <IcLink href="#">About our coffees</IcLink>
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Use concise but relevant links.
</IcTypography>

<DoDontCaution
  imageSrc={linksFig8}
  imageAlt="An example of three links. One reads ‘www.coffeeshop.com/about-our-coffees', the second reads ‘Let us tell you all about our speciality coffees’, and the third reads ‘Coffees’."
  caption="Don’t use URLs in the link text, don’t use unnecessarily long link text, and don’t omit important descriptive information."
  state="bad"
/>

### Email addresses

When linking to email addresses use the full email address in the link text. Don’t describe the contact without showing the email address.

<ComponentPreview state="good">
  <IcLink href="mailto:info@icds.co.uk">info@icds.co.uk</IcLink>
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Show the full email address.
</IcTypography>

<ComponentPreview state="bad">
  <IcLink href="mailto:info@icds.co.uk">ICDS team</IcLink>
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Don’t embed labels when linking email addresses.
</IcTypography>

## Accessibility considerations

When reading a page, screen reader users might navigate to links independently of the adjacent content. Make sure links are descriptive enough that they make sense out of context.

Consider that some screen readers allow users to view a full list of all links present on a page. This may be ordered either alphabetically, or in order of appearance. Make sure to label links with relevant information at the beginning of the string of text. For example, don’t embed “How to contact us”, but rather “Contact us”.

---

# Empty state

URL: https://design.sis.gov.uk/components/empty-state
Status: BETA
Subtitle: Use the empty state component when there is no content to display. It provides a consistent way of communicating to people what to do next.


import { IcEmptyState, IcButton, IcLink } from "@ukic/react";
import emptyStateFig1 from "./images/fig-1-data-table-with-empty-state.png";
import emptyStateFig2 from "./images/fig-2-use-empty-state-for-access-rights.png";
import emptyStateFig3 from "./images/fig-3-use-empty-state-with-positive-messaging.png";
import emptyStateFig4 from "./images/fig-4-use-empty-states-as-starting-points-for-flows.png";
import emptyStateFig5 from "./images/fig-5-dont-use-empty-states-for-messages-unrelated-to-empty-state.png";
import emptyStateFig6 from "./images/fig-6-dont-use-empty-state-for-loading-messages.png";
import emptyStateFig7 from "./images/fig-7-use-empty-states-on-a-full-screen.png";
import emptyStateFig8 from "./images/fig-8-use-empty-states-on-a-side-panel.png";
import emptyStateFig9 from "./images/fig-9-use-empty-states-on-other-containers.png";
import emptyStateFig10 from "./images/fig-10-empty-state-anatomy.png";
import emptyStateFig11 from "./images/fig-11-avoid-using-too-many-actions.png";
import emptyStateFig12 from "./images/fig-12-dont-use-other-component-in-interaction-area.png";

## Component demo

<ComponentPreview>
  <IcEmptyState
    heading="Hmm...there's nothing here"
    subheading="We don't currently have any favourite teas, probably because coffee is much better."
    body="Take a look at our favourite coffees instead, there's much more of those."
  >
    <svg slot="image" viewBox="0 0 1600 1600">
      <rect fill="#ff7700" width="1600" height="1600" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
    <IcButton slot="actions">Go to favourite coffees</IcButton>
    <IcLink slot="actions" href="#" onClick={(e) => e.preventDefault()}>
      Customer support
    </IcLink>
  </IcEmptyState>
</ComponentPreview>

## When to use

Use an empty state component to communicate to people that no content is available to display. Use them to engage people and guide them on what is best to do next by including a button or a link to the next best action.

Empty states are used for many different reasons such as:

- No content yet exists due to the first-time use of the functionality.
- Data was not successfully loaded.
- A query or search term yielded no results.
- Data was removed resulting in nothing remaining to display.

Use empty states when no data can be displayed in a component’s contents. For example, show an empty state when no data is available to display in a data table, or if a search term didn’t find any results.

<DoDontCaution
  imageSrc={emptyStateFig1}
  imageAlt="An example app called ‘We love coffee’ with a page displaying favourite teas. An empty data table is displayed with an empty state that reads ‘There’s nothing here’."
  state="good"
  caption="Use empty states when there is no data available to display."
/>

Use empty states to highlight access issues. If a user does not have access to some content, use an empty state to provide this messaging as well as a means of continuing.

<DoDontCaution
  imageSrc={emptyStateFig2}
  imageAlt="An example app showing favourite coffees. The ‘americano’ product is selected, but show’s a ‘locked’ status on it. A drawer is displayed containing an empty state component that reads ‘Sorry, you don’t have access to this at the moment’."
  state="good"
  caption="Use empty states to show access rights issue if the content is not available to that user."
/>

Empty states are not always due to errors, so use positive messaging as well. For example, in a to-do list app, all items might have been cleared and so the empty state message may be celebratory.

<DoDontCaution
  imageSrc={emptyStateFig3}
  imageAlt="An example app that shows new orders for coffee that need to be fulfilled. After the orders have been completed, an empty state component is displayed showing a positive message that reads ‘All done! Have a cuppa’."
  state="good"
  caption="Use empty states for positive messaging when empty is the desirable state, such as in a ticketing system or to-do list."
/>

Use empty states as starting points for processes that require people to add input into an app. For example, a calendar entry may have no events yet, so use an empty state to prompt for an event to be added.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={emptyStateFig4}
    imageAlt="An example app showing a product customisation page for an Americano coffee. A section appears titled ‘Extras’ and an empty state message is displayed prompting the user to ‘add extras’."
    state="good"
    caption="Use the empty state component as a starting point for a process, such as adding extras to a product customisation."
  />
</DoubleDoDontCaution>

## When not to use

Avoid using custom components instead of empty states. The empty state component creates an easily understandable, consistent method of indicating that no data is available and therefore what to do next.

Don’t use empty states to communicate other messages to people that are not related to something being empty, use [alerts](/components/alert) or [toasts](/components/toasts) instead. Only use empty states in situations where no data is present to display.

<DoDontCaution
  imageSrc={emptyStateFig5}
  imageAlt="A blog post titled ‘The perfect blend’. An empty state component is used inline with the content that reads ‘This is a brand new post’."
  state="bad"
  caption="Don’t use empty states to convey messages that are not related to an empty state."
/>

Don’t use empty states to show error messages that could otherwise be displayed using other [form validation](/patterns/form-validation) patterns. Only use empty states to show errors relating to data not being loaded successfully.

Don’t use empty states to indicate something is loading, instead use a [loading indicator](/components/loading-indicator).

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={emptyStateFig6}
    imageAlt="An empty state component being used to indicate that an order history is loading."
    state="bad"
    caption="Don’t use empty state components for loading messages."
  />
</DoubleDoDontCaution>

## Sizing

Embed empty states in components that would otherwise show data. For example, use them in containers, cards, dialogs or data tables.

Use an empty state on a full screen in case something couldn’t be loaded, or there is no content available yet. For example, use an empty state to show a 404 message.

<DoDontCaution
  imageSrc={emptyStateFig7}
  imageAlt="An empty state component displayed on a full screen that reads ‘There’s nothing here.’"
  state="none"
  caption="Use empty states on full screen page if no data is available to display."
/>

<DoDontCaution
  imageSrc={emptyStateFig8}
  imageAlt="An example app with a side panel displayed over the page content containing an empty state component that reads ‘No comments yet’."
  state="none"
  caption="Use empty states in other containers such as drawers and side panels."
/>

<DoDontCaution
  imageSrc={emptyStateFig9}
  imageAlt="A grid of cards for coffee products with one card showing an empty state component that reads ‘Woops, this coffee cup is empty’."
  state="none"
  caption="Use empty states within other components and containers when no data is present."
/>

## Layout and placement

Set the alignment of the empty state to match the component or container it sits in.

Place empty states at the top and don’t resize the container, keep it sized the same as if the primary content was displayed instead.

## Content

Use the empty state to clearly communicate to someone what has happened, why they are seeing the empty state and what to do next.

<DoDontCaution
  imageSrc={emptyStateFig10}
  imageAlt="A diagram showing the different elements that make up the empty state component. These are an image or icon, a title, a subtitle, some body text, and an interaction area."
  state="none"
  caption="The empty state component has an image or icon, a title, a subtitle, some body text and an interaction area."
/>

Add an illustration, image or icon to an empty state to provide additional recognition or reinforce the written message.

Use the empty state heading to clearly indicate the state of the empty content.

Use the subheading to add more detail and explain why this may have happened.

Use the body to explain how to rectify the issue, or to explain what is best to do next.

Use the interaction area to include actions and links that will help people to continue through the app. Always include either a primary button or a navigation link, and occasionally include a secondary button or link if other routes are possible.

However, avoid placing too many actions in the interaction area as this will cause confusion about what to do next.

<DoDontCaution
  imageSrc={emptyStateFig11}
  imageAlt="An empty state component that has three buttons and three links within its interaction area."
  state="caution"
  caption="Avoid placing too many actions within the interaction area."
/>

Don’t place other interactive components, such as inputs, in an empty state’s interaction area. If input needs to be collected, then do this on a full page or on a dialog.

<DoDontCaution imageSrc={emptyStateFig12} imageAlt="" state="bad" caption="" />

## Accessibility considerations

If an empty state is displayed as a result of a change on a page, make sure it is announced by a screen reader using a live region.

## Related components

- [Alert](/components/alert).
- [Loading indicator](/components/loading-indicator).

---

# Alert

URL: https://design.sis.gov.uk/components/alert
Status: BETA
Subtitle: Alerts display a short important message in a way that attracts attention without interrupting the current task.


import { IcAlert } from "@ukic/react";
import alertFig1 from "./images/fig-1-do-use-alerts-inline-with-other-associated-page-content.png";
import alertFig2 from "./images/fig-2-do-use-alerts-with-an-optional-action-and-dismiss-button.png";
import alertFig3 from "./images/fig-3-dont-use-alerts-overlaid-on-page-content.png";
import alertFig4 from "./images/fig-4-dont-use-an-alert-variant-unrelated-to-its-message.png";
import alertFig5 from "./images/fig-5-avoid-using-lengthy-messages-within-an-alert.png";

## Introduction

Alerts are displayed inline with other page content and show status depending on the severity of the message.

<ComponentPreview>
  <IcAlert
    heading="Hot drink"
    message="Please be careful, your drink will be hot."
    variant="warning"
  />
</ComponentPreview>

Alerts have five status variants:

- Neutral
- Success
- Warning
- Error
- Info

## When to use

Use an alert to notify a user without blocking or interrupting them.

Position alerts in line with page content so that they are closely associated with the related content that follows them.

<DoDontCaution
  imageSrc={alertFig1}
  imageAlt="An article titled ‘The perfect blend’ displaying a warning alert which reads ‘Take care. This article has yet to be reviewed and so may contain errors’. "
  state="good"
  caption="Use alerts in line with other associated page content. "
/>

Use alerts to:

- Summarise [form validation](/patterns/form-validation) errors.
- Inform of failures in a particular part of an app.
- Inform of a success when returning to a homepage, confirmation page or starting location.
- Make important information stand out from surrounding content.

Include a button or link within an alert to provide related interactions.

Include a dismiss button within an alert to allow the alert to be dismissed.

<DoDontCaution
  imageSrc={alertFig2}
  imageAlt="An article titled ‘The perfect blend’ showing an information alert with an action button that says ‘Post comment’ and a dismiss button. The alert message says ‘This is a brand new post. Show your appreciation by leaving a comment below."
  state="good"
  caption="Include a button or link to provide actions on an alert. Use a dismiss button to allow the alert to be dismissed."
/>

## When not to use

Don’t use alerts for passive feedback on a process, for example 'draft discarded' or 'email sent'. Use [toasts](/components/toast) instead.

Don’t overlay alerts on page content. Alerts are placed inline with the rest of the page content.

<DoDontCaution
  imageSrc={alertFig3}
  imageAlt="An article titled ‘The perfect blend’ with an information alert overlaid on top of the page content."
  state="bad"
  caption="Don’t use alerts positioned above/on top of page content."
/>

Use the [form validation pattern](/patterns/form-validation) for errors on a text field or in a form.

<DoDontCaution
  imageSrc={alertFig4}
  imageAlt="A form titled ‘The perfect blend’ that contains 2 skeletons. A success alert shows an error message that says ‘There was an error on this page. Please fix any errors highlighted before continuing.’"
  state="bad"
  caption="Do not use an alert variant that is not related to its message."
/>

## Content

Avoid using lengthy message content in an alert. Use dialogs or a [full page error message](/patterns/form-validation) to display longer messages.

Use a title on an alert to provide a short description of the alert content.

<DoDontCaution
  imageSrc={alertFig5}
  imageAlt="An image of an article titled ‘The perfect blend’ showing an info alert with a lengthy message that takes a lot of room to display among other page content."
  state="caution"
  caption="Avoid using lengthy messages within an alert."
/>

Use the default icons with success, warning, error and info alerts.

When using neutral alerts, specify an icon to be used from the [iconography guidance](/styles/icons). Always specify alt text when using any custom icon.

## Related components

- [Toasts](/components/toast)
- [Error validation](/patterns/form-validation)

---

# Popover menu

URL: https://design.sis.gov.uk/components/popover-menu
Status: BETA
Subtitle: Use popover menus to place actions inside a menu that overlays other page content when opened.


import { IcPopoverMenu, IcMenuItem, IcButton } from "@ukic/react";
import { useState } from "react";
import popoverFig1 from "./images/fig-1-use-popover-menu-to-house-secondary-actions.png";
import popoverFig2 from "./images/fig-2-dont-use-popover-menu-for-few-actions.png";
import popoverFig3 from "./images/fig-3-set-maxheight-to-force-scroll.png";
import popoverFig4 from "./images/fig-4-position-menus-in-available-space.png";
import popoverFig5 from "./images/fig-5-menu-buttons-with-different-elements.png";
import popoverFig6 from "./images/fig-6-menu-toggle-buttons.png";
import popoverFig7 from "./images/fig-7-menu-groups.png";
import popoverVid1 from "./images/anim-1-popover-menu-interaction.mp4";
import popoverVid2 from "./images/anim-2-sub-menu-interaction.mp4";
import popoverVid3 from "./images/anim-3-avoid-nested-sub-menus.mp4";

## Introduction

Click on the 'More Information' button below to view an example of the popover menu component.

export const IntroPopover = () => {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const handlePopoverToggled = () => setPopoverOpen((value) => !value);
  const handlePopoverClosed = () => setPopoverOpen(false);
  return (
    <>
      <IcButton
        variant="icon"
        title="More information"
        id="button-1"
        onClick={handlePopoverToggled}
        aria-expanded={popoverOpen}
      >
        <svg
          slot="icon"
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="bi bi-three-dots-vertical"
          viewBox="0 0 16 16"
        >
          <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
        </svg>
      </IcButton>
      <IcPopoverMenu
        anchor="button-1"
        aria-label="popover"
        open={popoverOpen}
        onIcPopoverClosed={handlePopoverClosed}
      >
        <IcMenuItem label="Copy code" />
        <IcMenuItem label="Paste code" />
        <IcMenuItem label="Actions" submenuTriggerFor="actions" />
      </IcPopoverMenu>
      <IcPopoverMenu submenuId="actions" aria-label="popover">
        <IcMenuItem label="Edit" />
        <IcMenuItem label="Find" />
        <IcMenuItem label="Delete" variant="destructive" />
      </IcPopoverMenu>
    </>
  );
};

<ComponentPreview
  style={{
    display: "flex",
    justifyContent: "center",
  }}
>
  <IntroPopover />
</ComponentPreview>

## When to use

Use a popover menu to place multiple actions behind a single trigger. This is especially useful when there is not enough space to include all actions on the base page. Popover menus are commonly used for ‘More actions’ and often triggered using an icon button.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={popoverFig1}
    imageAlt="A popover menu with edit and view options using a mix of menu items, menu groups and menu toggle items."
    state="good"
    caption="Use popover menus to contain multiple actions."
  />
</DoubleDoDontCaution>

## When not to use

Don’t use a popover menu if there are only a small number of actions. Consider if the actions can be better placed on the page itself.

Avoid placing important actions in popover menus as these may be missed. Instead, use popover menus to house secondary or less important actions and place your most important actions on the page itself.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={popoverFig2}
    imageAlt="A popover menu with two options for edit and download. Plenty of space is available on the background interface to display these options."
    state="bad"
    caption="Avoid using popover menus with few actions, or with important actions."
  />
</DoubleDoDontCaution>

Don’t include any other content within a popover menu other than the elements described in this page. If additional information is required about an action, consider using a [dialog](/components/dialog) instead.

## Interaction behaviour

When you click a trigger element, a popover menu appears. Make sure to associate the popover menu with a trigger and ensure that the trigger can be actioned via any input mode.

When you click a menu item within a popover menu, the popover menu will hide and the menu item’s associated action will be triggered.

<video
  class="half-width"
  muted
  controls
  loop
  title="An animation showing a popover menu that appears after clicking a ‘more’ button. The menu is closed when a menu item is clicked."
>
  <source src={popoverVid1} type="video/mp4" />
</video>

### Sizing

By default, popover menus expand vertically to hug their contents. Set a max-height on the popover menu to constrain the height and allow the menu to scroll. Avoid setting the width of the popover menu to be greater than the available viewport.

<DoDontCaution
  imageSrc={popoverFig3}
  imageAlt="Two examples of popover menus. The first displays all menu items within the menu container. The second example shows the same menu items, but with some hidden due to a smaller menu container. A scroll bar allows the menu to be scrolled."
  state="good"
  caption="Set a max-height to constrain the height of the menu and cause its contents to scroll."
/>

### Layout and placement

Popover menus appear adjacent to their triggering element. By default, they appear below and aligned to the left of the trigger element. However, if no space is available, the popover menu will appear above or aligned to the right of the trigger element.

<DoDontCaution
  imageSrc={popoverFig4}
  imageAlt="Two examples of popover menus. The first example shows the menu aligned to the left of the screen. The second shows the menu aligned to the right."
  state="good"
  caption="Popover menus position themselves based on the available space."
/>

## Content

Popover menus contain menu items, menu toggle items, menu groups and menu sections.

### Labels

Follow the [content style](/styles/content-style) guidelines when writing labels and keep them concise but specific.

Always specify an accessible label for the menu items. The accessible label can include more detail than is described in the visible label.

For example, a menu item may have a visible label that reads ‘Edit’. The accessible label may read ‘Edit record’. This includes more information to aid assistive technology users.

### Icons

Use an icon on a menu item to provide additional meaning or to aid in recognition. Menu items, menu toggle items and parent menu items can display an icon.

Make sure that the icon is understandable and relevant to the action.

Always provide alternative descriptions for icons if they aren't decorative. Only use icons if they are necessary.

### Menu items

Use the 'default' variant of menu items for single actions that do not have a selection status.

Add an additional description to a menu item to provide additional context. Keep the description concise and consider if the action is too complicated if too much information is required to describe the action.

If a keyboard shortcut is available for a menu item’s action, then display it using the keyboard shortcut label.

Use the 'destructive' variant of a menu item to highlight a destructive action. Position destructive actions at the bottom of a popover menu.

Specify a menu item as a parent if it has children that appear in a sub-menu. When clicked, the sub-menu will slide into view.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={popoverFig5}
    imageAlt="A popover menu showing a set of edit options that include icons and keyboard shortcuts alongside their labels."
    state="good"
    caption="Use menu items for single actions. Add an icon or a description to provide more context. Highlight keyboard shortcuts using the keyboard shortcut label."
  />
</DoubleDoDontCaution>

### Menu toggle items

Use the 'toggle' variant of menu items for actions that provide an ability to toggle something on or off. Menu toggle items will display a checkmark when toggled on and hide it when toggled off.

Like default menu items, provide an icon or a description to add additional context if required.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={popoverFig6}
    imageAlt="A popover menu containing two menu toggle items. Their labels read ‘Show/Hide’ and ‘Lock/Unlock’ and display a tick indicating that they are toggled on."
    state="good"
    caption="Use menu toggle items to show a selection state alongside the action."
  />
</DoubleDoDontCaution>

### Menu groups

Use menu groups to organise menu items into sections within the popover menu. Provide a label for the menu group to describe its contents. Alternatively, leave the menu group label blank if a description is unnecessary.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={popoverFig7}
    imageAlt=" A popover menu with a menu group for ‘Edit options’, a menu group for ‘View options’, an untitled menu group containing unrelated actions, and a final untitled menu group containing destructive actions."
    state="good"
    caption="Use menu groups to create sections within a popover menu."
  />
</DoubleDoDontCaution>

### Parent menu items

Use a parent menu item to open sub-menus that include more menu items. Use this to contain similar actions or options relating to the menu group name.

<video
  class="half-width"
  muted
  controls
  loop
  title="An animation showing a popover menu with a parent menu item titled ‘Zoom’. A sub-menu containing menu items for different zoom levels is opened after the ‘zoom’ parent menu item is clicked. After the back button is clicked in the sub-menu the main menu is displayed again."
>
  <source src={popoverVid2} type="video/mp4" />
</video>

### Sub-menus

Use a sub-menu to contain a parent menu item’s children items. Use sub-menus for multiple related actions that are opened from the main menu.

The sub-menu displays the same label as the parent menu item. Clicking the back button in a sub-menu will return the user to the parent menu item in the main menu.

Use menu items, toggle menu items, menu groups or parent menu items in a sub-menu but avoid nesting too many levels of sub-menus as this can be confusing to navigate.

<video
  class="half-width"
  muted
  controls
  loop
  title="An animation showing a popover menu that contains four parent menu items each with nested parent menu items in their sub-menus. The user clicks ‘help options’ to go into the sub-menu, then clicks ‘information’ to go into a second sub-menu, then clicks ‘tutorials’ to go into a third sub-menu."
>
  <source src={popoverVid3} type="video/mp4" />
</video>

## Accessibility considerations

When specifying the trigger element for a popover menu, make use of ‘aria-expanded’ and ‘aria-collapsed’ so that a screen reader announces the appearance of the popover menu.

---

# Pagination

URL: https://design.sis.gov.uk/components/pagination
Status: BETA
Subtitle: Use the Pagination components to split large amounts of content into pages and navigate between them.


import { IcPagination } from "@ukic/react";
import paginationFig1 from "./images/fig-1-use-pagination-to-split-content-across-pages.png";
import paginationFig2 from "./images/fig-2-complex-simple-pagination.png";
import paginationFig3 from "./images/fig-3-data-table-with-pagination-bar.png";
import paginationFig4 from "./images/fig-4-use-colour-variants.png";
import paginationFig5 from "./images/fig-5-place-pagination-at-bottom.png";
import paginationFig6 from "./images/fig-6-place-pagination-at-top-and-bottom.png";
import paginationFig7 from "./images/fig-7-setting-adjacent-and-boundary-items.png";
import paginationFig8 from "./images/fig-8-pagination-bars-with-different-elements.png";

## Introduction

Pagination enables large amounts of content to be split across multiple pages so that it is more manageable and doesn’t require overly long page lengths.

<ComponentPreview style={{ margin: "auto" }}>
  <IcPagination pages={15} type="complex" />
</ComponentPreview>

## Component variants

There are two types of pagination that can be used to control pages of content:

- Complex pagination: Contains buttons for navigating to next, previous, first and last pages as well as individual page buttons for adjacent and boundary pages.
- Simple pagination: Contains only buttons for navigating to next, previous, first and last pages. Displays the current page as a label.

Use the pagination components within a pagination bar to provide other navigation controls including:

- Items per page selector: Switch the number of content items visible per page.
- Item count: Display the range of currently visible items as well as the total number of items.
- Go to page shortcut: Allow quick access to any page number by typing the page number and hitting ‘go’.

## When to use

Use pagination when you have a large, known amount of content that can be split across pages. Order the content so the most relevant appears on the first page. Pagination works best for lists of content such as search results and data items.

Try to create an understandable order to the content split across pages. This way it is easier to understand what content might appear on a later page.

For example, if content is ordered alphabetically, then it becomes obvious that entries beginning with a ‘Z’ would appear on the last few pages.

<DoDontCaution
  imageSrc={paginationFig1}
  imageAlt="An example application showing a list of hot drink products split across pages. A pagination component provides access to navigate through the list of products."
  state="good"
  caption="Use pagination to split content across multiple pages."
/>

Use pagination for content when there are other elements on the page that can be scrolled to. This means all elements on the page can easily be navigated to without scrolling through a large amount of content.

Pagination provides full control over the content; it allows navigation to any page of content quickly and gives an indication of the total amount of content available.

Use complex pagination to allow people to easily navigate between pages without having to move sequentially through content. This allows people to quickly skip around between pages to search for specific content.

Use simple pagination to navigate sequentially between pages using the ‘next’ and ‘previous’ buttons.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={paginationFig2}
    imageAlt="An image showing two pagination components. Complex pagination provides numbered buttons for each page. Simple pagination simply provides next, previous, first and last buttons."
    state="none"
    caption="Use complex or simple pagination variants for different implementations."
  />
</DoubleDoDontCaution>

Use a pagination bar to provide more navigation functionality through particularly complex data sets. For example, use pagination bars with data tables to navigate large data sets easily.

<DoDontCaution
  imageSrc={paginationFig3}
  imageAlt="An example nutritional data table for coffee products. Coffee products are displayed in a table and a pagination bar allows the number of items per page to be changed, displays the total number of items, and includes a simple pagination control allowing navigation through the pages."
  state="good"
  caption="Use a pagination bar to provide more functionality."
/>

## When not to use

Avoid using pagination to split up linear content such as articles or blogs. Scrolling down the page makes it easier to consume this content.

Avoid using pagination when the size of the content is unknown or if it frequently changes. This causes the number of pages to change frequently and means it is hard to create a ‘last page’ option.

Use an infinite scrolling pattern when navigating content should be explorative, or when there is a near infinite amount of content. For example, newsfeeds and comments threads can be near endless and infinite scrolling allows exploration by simply continuing to scroll.

Avoid using simple pagination when it is important to be able to move between specific pages; complex pagination is better for this as it shows more adjacent pages, allowing one click navigation.

## Interaction behaviour

Pagination components fire an event when a new page is selected. Use this to trigger the switch of pages in the app.

In a pagination bar, when the number of items per page is changed, then the pagination component and the item count updates to show the new number of pages. Make sure to update the pagination component if anything else on the page changes the number of pages. For example, setting a filter may reduce the number of pages required to display the filtered results.

## Colour

Use the default, dark and light appearance pagination components when placing them on different coloured backgrounds to ensure the correct contrast ratios are met.

<DoDontCaution
  imageSrc={paginationFig4}
  imageAlt="Three pagination examples on different coloured backgrounds. The default appearance pagination is used on a white background. The dark appearance pagination is used on a light yellow background. The light appearance pagination is used on a dark grey background."
  state="good"
  caption="Use colour contrast variants when placing pagination components on different coloured backgrounds."
/>

## Layout and placement

Place the pagination component so that it is obvious what it controls. Match the width of a pagination bar to the width of the page.

Try to place pagination at the bottom of the page it controls, as this encourages the user to read through the page before moving to the next. However, placing pagination at the top of the page is still a valid option.

<DoDontCaution
  imageSrc={paginationFig5}
  imageAlt="An example product grid showing hot beverages. A pagination control appears below the drinks grid that it controls."
  state="good"
  caption="Try to place pagination at the bottom of the container it controls."
/>

For large page containers that require scrolling, use two pagination components at the top and bottom of the page container to provide easy access to navigation when at either the top or bottom of the page.

<DoDontCaution
  imageSrc={paginationFig6}
  imageAlt="An example product grid showing hot beverages. A complex pagination control appears below the drinks grid that it controls. A simple pagination control is displayed in the top-right above the product grid."
  state="good"
  caption="Place pagination controls at the top and bottom of the page container to provide additional navigation functionality."
/>

## Content

When using complex pagination, specify the number of adjacent pages to display next to the current page. Also specify the number of boundary pages to display at the start and end of the page range.

<DoDontCaution
  imageSrc={paginationFig7}
  imageAlt="Three complex pagination components with different settings for adjacent and boundary items. Increasing boundary items shows more page buttons at the start and end of the range. Increasing the adjacent items shows more page buttons next to the current page."
  state="none"
  caption="Set the adjacent and boundary items to change which page buttons are displayed."
/>

Select which elements within a pagination bar you want to display. Each element in the pagination bar can be toggled on or off except for the pagination component itself, which can be switched to use complex or simple pagination.

<DoDontCaution
  imageSrc={paginationFig8}
  imageAlt="Three example pagination bars with different elements displaying. The top shows the ‘items per page selector’ and ‘go to page button’ displayed, whilst the other examples have these elements hidden."
  state="none"
  caption="Select which elements to show within a pagination bar."
/>

By default, pages are referred to as pages in the pagination component. Override the pagination label to change this. For example, change the term pages to ‘sheets’ if it makes more sense for a data table implementation.

---

# Text field

URL: https://design.sis.gov.uk/components/text-field
Status: BETA
Subtitle: Text fields let users input and edit text. Text fields capture a single line of text and text areas capture multiple lines of text.


import { IcTextField } from "@ukic/react";
import textInputFig1 from "./images/fig-1-a-textfield-with-helper-text.png";
import textInputFig2 from "./images/fig-2-a-textfield-with-an-example-of-placeholder-text-and-user-inputted-text.png";
import textInputFig3 from "./images/fig-3-use-understandable-visual-icons-to-add-clarity-to-the-field-and-draw-attention.png";
import textInputFig4 from "./images/fig-4-dont-use-unrelated-icons.png";
import textInputFig5 from "./images/fig-5-examples-of-a-textarea-with-a-character-count.png";
import textInputFig6 from "./images/fig-6-three-text-fields-correctly-sized-to-the-expected-length-of-input.png";
import textInputFig7 from "./images/fig-7-three-text-fields-not-correctly-sized-to-expected-content.png";
import textInputFig8 from "./images/fig-8-textfields-showing-the-three-different-validation-states.png";
import textInputFig9 from "./images/fig-9-use-inline-validation-for-successes-that-dont-require-success-labels.png";

## Component variants

There are two types of text field:

- Single line text fields
- Multi-line text fields (also known as text areas)

### Text fields

Use text fields for entering and editing single lines of text.

<ComponentPreview>
  <IcTextField
    label="What is your favourite coffee?"
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
  />
</ComponentPreview>

### Text areas

Use text areas for entering and editing large amounts of text that require more than a single line.

<ComponentPreview>
  <IcTextField
    rows="6"
    label="What is your favourite coffee?"
    placeholder="Please enter…"
    helperText="Such as Arabica, Robusta or Liberica"
  />
</ComponentPreview>

## When to use

Use text fields as part of a form or other data collection page for capturing text input.

## Content

### Labels

Use clear labels to indicate what information should be entered into the field.

### Helper text

Use helper text in addition to the field label when additional information helps users understand what information is required.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={textInputFig1}
    imageAlt="A text field component with a label and helper text."
    state="good"
    caption="A text field with helper text."
  />
</DoubleDoDontCaution>

When setting minimum and maximum values using the `min` and `max` props, make sure to add an indication of these formatting rules in the helper text.

### Placeholder text

Use placeholder text to optionally provide an example of what to type into the field.

Only use placeholder text if it makes it easier to fill in the text field.

Don't use placeholder text to convey additional meaning other than an example of the expected input.

<DoDontCaution
  imageSrc={textInputFig2}
  imageAlt="An image showing two text fields, both with a label which states 'Email'. One shows a placeholder email in the input box, while the other shows a filled in input box with an actual email address."
  state="good"
  caption="A text field with an example of placeholder text and user-inputted text."
/>

### Icons

When including an icon in a text input make sure that the icon is understandable and relevant to the type of input required by the field. Always provide alternative descriptions for icons. Don't use icons if they aren't necessary.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={textInputFig3}
    imageAlt="An image showing two text fields. The top one titled 'Username' features an icon of a person, and the field titled 'Password' features an icon of a lock."
    state="good"
    caption="Use understandable visual icons to add clarity to the field and draw attention."
  />
  <DoDontCaution
    imageSrc={textInputFig4}
    imageAlt="An image showing two text fields. The top one titled 'Username' features an icon of a telephone, and the field titled 'Password' features an icon of a dog paw."
    state="bad"
    caption="Incorrect use of icons can cause confusion."
  />
</DoubleDoDontCaution>

## Character count

Include a character limit and counter to show how close the current input is to the maximum input length.

<DoDontCaution
  imageSrc={textInputFig5}
  imageAlt="An example of two text areas with a character count. The first is below the character count, and the second is over the character count and is showing an error."
  state="good"
  caption="Use a character count to clearly inform users of the character limit."
/>

## Layout and placement

### Field width

Make the width of the field reflect the length of content you expect the user to enter.

<DoDontCaution
  imageSrc={textInputFig6}
  imageAlt="An image showing three text fields. The top two, titled 'First name' and 'Second name' take up half the horizontal size of the third one, titled 'Address'."
  state="good"
  caption="Three text fields correctly sized to the expected length of input."
/>

<DoDontCaution
  imageSrc={textInputFig7}
  imageAlt="An image showing three text fields. The top two, titled 'First name' and 'Second name' are the same horizontal size of the third one, titled 'Address'."
  state="bad"
  caption="Three text fields not correctly sized to expected content."
/>

## Validation (error handling)

Real-time validation helps the user streamline their process and efficiently complete a form. All error validation should be accompanied by an error label. Use inline validation for successes that don't require success labels.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={textInputFig8}
    imageAlt="An image showing three different text fields with different validation states. The first one shows an success validation message. The second one shows a warning validation message. The third one shows an error validation message."
    state="good"
    caption="Text fields showing the three different validation states."
  />
  <DoDontCaution
    imageSrc={textInputFig9}
    imageAlt="A text field labelled 'Favourite hot drink', with a green tick icon within the input field to show the successful validation state."
    state="good"
    caption="Use inline validation for successes that don't require success labels."
  />
</DoubleDoDontCaution>

---

# Status tag

URL: https://design.sis.gov.uk/components/status-tag
Status: BETA
Subtitle: Status tags are short, clear and digestible ways to display the status of something on the page.


import { IcStatusTag } from "@ukic/react";
import statusTagFig1 from "./images/fig-1-do-use-status-tags-exclusively-to-denote-status.png";
import statusTagFig2 from "./images/fig-2-do-not-use-status-tags-for-anything-other-than-denoting-status.png";
import statusTagFig3 from "./images/fig-3-do-not-use-a-mix-of-primary-and-secondary-status-tags-to-show-the same-statuses-message-within-a-group-of-items.png";
import statusTagFig4 from "./images/fig-4-do-use-the-correct-status-tag-size-to-match-other-ui-component-sizes.png";
import statusTagFig5 from "./images/fig-5-do-not-mix-sizes-when-using-multiple-ui-components.png";
import statusTagFig6 from "./images/fig-6-do-use-adjectives-to-describe-status.png";
import statusTagFig7 from "./images/fig-7-do-not-use-verbs-in-status-tags.png";
import statusTagFig8 from "./images/fig-8-do-use-relevant-wording-that-supports-the-status-tag-colour.png";
import statusTagFig9 from "./images/fig-9-do-not-use-wording-which-directly-contrasts-and-or does-not-support-the-status-of-the-tag.png";
import statusTagFig10 from "./images/fig-10-avoid-using-long-labels-as-it-will-force-the-text-to-wrap.png";

## Introduction

The status tag has four types:

- Neutral
- Success
- Warning
- Danger

Each status tag has a filled and outlined appearance option and is available in three sizes.

<ComponentPreview style={{ gap: "0.5rem" }}>
  <IcStatusTag label="Neutral" status="neutral" />
  <IcStatusTag label="Success" status="success" />
  <IcStatusTag label="Warning" status="warning" />
  <IcStatusTag label="Danger" status="danger" />
</ComponentPreview>

## When to use

Display a status tag to show the status of an item in an application. For example, status tags could be used to show if a system is online or offline, if a document has been actioned or approved, or if a displayed train network is currently active or not.

### Filled

Filled status tags use the status colours to denote the type of status tag.

Use filled status tags to convey emphasis and importance.

### Outlined

Outlined status tags use a lighter colour variation of the relevant status colour.

Use outlined status tags to provide emphasis to less important items.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig1}
    imageAlt="A good example of a success status tag labelled ‘approved’ used to show the status of a page titled ‘Guidance’."
    state="good"
    caption="Use status tags to convey the current status of something."
  />
</DoubleDoDontCaution>

## When not to use

Don't use status tags to display anything other than status, use [static chips](/components/chip/#static-chips).

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig2}
    imageAlt="An example of a status tag being used to display the author of a page."
    state="bad"
    caption="Don't use status tags for anything other than denoting status."
  />
</DoubleDoDontCaution>

Don't use a mix of filled and outlined status tags when using them together.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig3}
    imageAlt="An incorrect example of filled and outlined status tags being used in the same page section."
    state="bad"
    caption="Don't use a mix of filled and outlined status tags to show the same status messages within a group of items."
  />
</DoubleDoDontCaution>

## Layout and placement

When components are used together the size of the components should match. For example, a default sized status tag should be used with a default sized input component.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig4}
    imageAlt="A good example of default sized status tags being used in the same section as other default sized components, and a small status tag being used in the same section as another small component."
    state="good"
    caption="Use the correct status tag size to match other UI component sizes."
  />
  <DoDontCaution
    imageSrc={statusTagFig5}
    imageAlt="An incorrect example of small sized status tags used in the same section as other default sized components, and a default status tag being used in the same section as a small component."
    state="bad"
    caption="Don't mix sizes when using multiple UI components."
  />
</DoubleDoDontCaution>

## Content

### Labels

Use adjectives in the status tag label over verbs. Verbs may indicate to a user that by clicking on them the tag will be interactive.

Text in tags should be all capitals to increase readability.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig6}
    imageAlt="A correct example of a status tag which has the label 'submitted'."
    state="good"
    caption="Use adjectives to describe status. "
  />
  <DoDontCaution
    imageSrc={statusTagFig7}
    imageAlt="An incorrect example of a status tag which has the label 'submit'."
    state="bad"
    caption="Don't use verbs in status tags."
  />
</DoubleDoDontCaution>

Use the right status tag type that is relevant to the label. Don't use labels that convey different information to what the status colour conveys.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig8}
    imageAlt="A correct example of status tag labelling. The default variant has the label 'incomplete', the success variant has the label 'accepted’, the warning variant has the label 'in review', the danger variant has the label 'rejected'."
    state="good"
    caption="Use relevant wording that supports the status tag colour."
  />
  <DoDontCaution
    imageSrc={statusTagFig9}
    imageAlt="An incorrect example of status tag labelling. The default variant has the label 'urgent', the success variant has the label 'error’, the warning variant has the label 'success', the danger variant has the label 'approved'."
    state="bad"
    caption="Don't use wording that directly contradicts or doesn’t support the status of the tag."
  />
</DoubleDoDontCaution>

Use concise labels for better readability. Longer labels will force the text to wrap.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={statusTagFig10}
    imageAlt="An example of a long label being wrapped on two lines."
    state="caution"
    caption="Avoid using long labels as it will force the text to wrap."
  />
</DoubleDoDontCaution>

## Related components

- [Chips](/components/chip)

---

# Side navigation

URL: https://design.sis.gov.uk/components/side-navigation
Status: BETA
Subtitle: Side navigation provides an app's main navigation and is fixed on the left-hand side of the app. It includes the app's name, main navigation and optional secondary links.


import { IcSideNavigation, IcNavigationItem, IcAlert } from "@ukic/react";

import sideNavigationFig1 from "./images/fig-1-dont-use-both-side-and-top-navigation.png";
import sideNavigationFig2 from "./images/fig-2-avoid-side-navigation-for-complex-app-structures.png";
import sideNavigationFig3 from "./images/fig-3-set-side-navigation-default-display.png";
import sideNavigationFig4 from "./images/fig-4-static-side-navigation.png";
import sideNavigationFig5 from "./images/fig-5-side-navigation-sub-menu.png";
import sideNavigationFig6 from "./images/fig-6-personality-colourisation.png";
import sideNavigationFig7 from "./images/fig-7-dont-position-side-nav-above-footer.png";
import sideNavigationFig8 from "./images/fig-8-keep-menu-option-labels-concise-to-avoid-truncation.png";
import sideNavigationFig9 from "./images/fig-9-tooltips-show-labels-on-hover-or-focus.png";
import sideNavigationFig10 from "./images/fig-10-set-menu-options-to-display-labels.png";
import sideNavigationFig11 from "./images/fig-11-use-menu-groups-and-drilldowns.png";

## Introduction

An example of the side navigation component.

<ComponentPreview
  style={{
    display: "flex",
    height: "100%",
    overflow: "hidden",
    position: "relative",
    justifyContent: "flex-start",
    padding: "0rem",
  }}
>
  <IcSideNavigation
    appTitle="ACME coffee shop"
    version="v0.0.7"
    status="Alpha"
    disableAutoParentStyling
    inline
  >
    <svg slot="app-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <title>coffee-outline</title>
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <IcNavigationItem slot="primary-navigation" href="#" label="Home">
      <svg xmlns="http://www.w3.org/2000/svg" slot="icon" viewBox="0 0 24 24">
        <title>home</title>
        <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
      </svg>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Search">
      <svg xmlns="http://www.w3.org/2000/svg" slot="icon" viewBox="0 0 24 24">
        <title>magnify</title>
        <path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
      </svg>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Drinks">
      <svg xmlns="http://www.w3.org/2000/svg" slot="icon" viewBox="0 0 24 24">
        <title>coffee-outline</title>
        <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
      </svg>
    </IcNavigationItem>
    <IcNavigationItem slot="primary-navigation" href="#" label="Equipment">
      <svg xmlns="http://www.w3.org/2000/svg" slot="icon" viewBox="0 0 24 24">
        <title>coffee-maker-outline</title>
        <path d="M18 6V4H20V2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H20V20H15.97C17.2 19.09 18 17.64 18 16V11H8V16C8 17.64 8.81 19.09 10.03 20H6V4H8V6C8 6.55 8.45 7 9 7H17C17.55 7 18 6.55 18 6M10 16V13H16V16C16 17.65 14.65 19 13 19S10 17.65 10 16M13 8C13.55 8 14 8.45 14 9S13.55 10 13 10 12 9.55 12 9 12.45 8 13 8Z" />
      </svg>
    </IcNavigationItem>
    <IcNavigationItem slot="secondary-navigation" href="#" label="Settings">
      <svg xmlns="http://www.w3.org/2000/svg" slot="icon" viewBox="0 0 24 24">
        <title>cog-outline</title>
        <path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" />
      </svg>
    </IcNavigationItem>
  </IcSideNavigation>
</ComponentPreview>

## When to use

Use side navigation to help provide more screen space for the main content. Side navigation is well suited to apps that have mutually exclusive features that need to be switched between easily on any page.

Use side navigation alongside additional components like [page headers](/components/page-header) to create a variety of different [layouts](/styles/layout-spacing) and navigation styles.

## When not to use

For intranet-style and content-heavy apps, use [top navigation](/components/top-navigation) as it's better suited for providing links to a large number of pages.

Use either side navigation or top navigation. Don't use both at the same time.

<DoDontCaution
  imageSrc={sideNavigationFig1}
  imageAlt="An example app that shows a top navigation and side navigation used on the same page."
  state="bad"
  caption="Don't use both side navigation and top navigation at the same time."
/>

Avoid using side navigation if the app has many destinations grouped into a multi-level hierarchy. Instead use a [top navigation](/components/top-navigation) with grouped links.

<DoDontCaution
  imageSrc={sideNavigationFig2}
  imageAlt="An example app using side navigation to display multiple groups of links."
  state="caution"
  caption="Avoid using side navigation for apps with complex page hierarchies. Instead use top navigation with grouped links."
/>

## Interaction behaviour

Side navigation is expandable and displays the navigation labels and app info when expanded. Choose whether to display the side navigation as expanded or collapsed by default when the page loads.

<DoDontCaution
  imageSrc={sideNavigationFig3}
  imageAlt="An example of an application with the side navigation expanded or collapsed by default as the page loads."
  state="good"
  caption="Choose to display the side navigation as collapsed or expanded when the page loads."
/>

Set the side navigation to static if you want it to be either permanently expanded or permanently collapsed. This removes the expansion toggle button from the bottom of the side navigation.

<DoDontCaution
  imageSrc={sideNavigationFig4}
  imageAlt="Two examples of side navigation that are set to static collapsed and static expanded. No expansion toggle button is displayed in the bottom section of the side navigation."
  state="good"
  caption="Static side navigation examples."
/>

Use a drill-down menu option to provide access to child links in a sub-menu. The sub-menu can be closed by using the back button in the sub-menu's top section.

Sub-menus can be nested, but avoid creating overly deep page hierarchies and consider using top navigation with grouped links instead.

<DoDontCaution
  imageSrc={sideNavigationFig5}
  imageAlt="An example side navigation component showing a menu option with a sub-menu of child links."
  state="good"
  caption="A side navigation component with a sub-menu."
/>

## Colour

The side navigation uses the app's [theme colour](/styles/colour/#theme) as the background and automatically sets the foreground colour to ensure accessible contrast ratios. Change the app's theme colour to change the background colour of the side navigation and help distinguish your app from others your users may use.

<DoDontCaution
  imageSrc={sideNavigationFig6}
  imageAlt="Two examples of side navigation components using different theme colours."
  state="good"
  caption="Examples of side navigation using different theme colours."
/>

## Layout and placement

Always position the side navigation on the left hand of the screen and make sure that it vertically fills the browser window.

<DoDontCaution
  imageSrc={sideNavigationFig7}
  imageAlt="An example app with a side navigation component that sits above the footer."
  state="bad"
  caption="Don't position the side navigation so that it does not vertically fill the browser window."
/>

## Content

### App information

Use your app's name, icon, status and version information in the side navigation's app info fields.

### Labels and icons

Follow the [content style guidelines](/styles/content-style) for all menu option labels as well as each option group labels.

Follow the [icon style guidelines](/styles/icons) when selecting icons for menu options.

Keep labels concise as they will truncate if they are too long to display in the side navigation.

<DoDontCaution
  imageSrc={sideNavigationFig8}
  imageAlt="An example side navigation showing menu items with long labels that are truncated."
  state="caution"
  caption="Keep labels concise to avoid truncation."
/>

### Menu items

Set the side navigation menu items to reflect your app's main navigation links.

By default, menu items will only display their icon when the side navigation is collapsed. The item label will be displayed via a tooltip when hovering or focusing on the menu item.

<DoDontCaution
  imageSrc={sideNavigationFig9}
  imageAlt="An example side navigation component showing the menu option labels in a tooltip when hovering or focusing on the menu option."
  state="good"
  caption="Side navigation shows menu item labels using tooltips when collapsed."
/>

Set the menu items to display their labels in the collapsed state by default if this will aid the recognition of the feature. However, take care when doing this as long menu item labels will be truncated.

<DoDontCaution
  imageSrc={sideNavigationFig10}
  imageAlt="An example side navigation in collapsed state showing labels below the icons for each menu option."
  state="good"
  caption="Set menu items to display their labels even in the collapsed state if this aids recognition of the feature."
/>

Group related menu items into expandable menu item groups.

Use a drill-down menu item if the menu item has a large number of child links to display. This will display the child links in the side navigation's sub-menu.

<IcAlert
  heading="Coming soon"
  message="Drill-down menu functionality is in development."
  variant="info"
/>

<DoDontCaution
  imageSrc={sideNavigationFig11}
  imageAlt="An example of side navigation showing grouped menu items and drill-down menu items."
  state="good"
  caption="Side navigation showing grouped menu items and drill-down menu items."
/>

### Bottom menu items

Use the sticky bottom menu section to provide quick links to global app features or external links.

## Accessibility considerations

Make sure to include alt-text when specifying icons for menu items.

## Related Components

- [Top navigation](/components/top-navigation)

---

# Testing with Jest and React Testing Library

URL: https://design.sis.gov.uk/get-started/test-components/testing-with-jest-and-rtl
Subtitle: How to test our components with Jest and React Testing Library.


import testFiles from "./test-app/index";

export const snippetArray = [
  {
    fileName: testFiles.rtl.fileName,
    disableMoreButton: testFiles.rtl.disableMoreButton,
    snippets: {
      short: testFiles.rtl.snippets.short,
      long: testFiles.rtl.snippets.long,
    },
  },
  {
    fileName: testFiles.component.fileName,
    disableMoreButton: testFiles.component.disableMoreButton,
    snippets: {
      short: testFiles.component.snippets.short,
      long: testFiles.component.snippets.long,
    },
  },
  {
    fileName: testFiles.types.fileName,
    disableMoreButton: testFiles.types.disableMoreButton,
    snippets: {
      short: testFiles.types.snippets.short,
      long: testFiles.types.snippets.long,
    },
  },
  {
    fileName: testFiles.constants.fileName,
    disableMoreButton: testFiles.constants.disableMoreButton,
    snippets: {
      short: testFiles.constants.snippets.short,
      long: testFiles.constants.snippets.long,
    },
  },
  {
    fileName: testFiles.methods.fileName,
    disableMoreButton: testFiles.methods.disableMoreButton,
    snippets: {
      short: testFiles.methods.snippets.short,
      long: testFiles.methods.snippets.long,
    },
  },
];

export const stackblitzProps = {
  test: "develop",
  title: "Testing with Jest and React Testing Library",
  branch: "/tree/main",
};

## About Jest

<p>
  <ic-link
    target="_blank"
    href="https://jestjs.io/"
    rel="noreferer noopener nofollow"
  >
    Jest
  </ic-link>{" "}
  is a JavaScript testing framework designed to ensure correctness of any
  JavaScript codebase. It allows you to write tests with an approachable,
  familiar and feature-rich API that gives you results quickly.
</p>

<p>
  These instructions have been written with JavaScript in mind. Jest also
  supports TypeScript. Further instructions on how to set up Jest for TypeScript
  can be found on their{" "}
  <ic-link
    target="_blank"
    href="https://jestjs.io/docs/getting-started#using-typescript"
    rel="noreferer noopener nofollow"
  >
    'Getting Started'
  </ic-link>{" "}
  page.
</p>

<p>
  More information on setting up Jest can be found on{" "}
  <ic-link
    target="_blank"
    href="https://jestjs.io/docs/getting-started"
    rel="noreferer noopener nofollow"
  >
    Jest’s Getting Started page
  </ic-link>
  .
</p>

## Testing with React components

The `@ukic/react` package will need to be transformed before you can use these components in Jest tests.

Add a `transformIgnorePatterns` field with the value `["/node_modules/(?!@ukic/react)"]` to your Jest config.

## About React Testing Library

<p>
  <ic-link
    target="_blank"
    href="https://testing-library.com/docs/react-testing-library/intro"
    rel="noreferer noopener nofollow"
  >
    React Testing Library (RTL)
  </ic-link>{" "}
  provides a set of utility functions, which interrogate the DOM tree, in order
  to build maintainable React tests. The recommended approach with RTL is to
  test React components based on how the users view the components rather than
  the implementation of the component. For example, a user wouldview a button by
  the label 'Add', so the library provides a method called{" "}
  <code style={{ backgroundColor: "#EEEFF0" }}>getByText()</code> to facilitate
  that.
</p>

## Shadow DOM Testing Library

<p>
  It is not possible to exclusively use RTL to test{" "}
  <code style={{ backgroundColor: "#EEEFF0" }}>@ukic/react</code> components as
  they are React-wrapped web components, which use the{" "}
  <ic-link
    target="_blank"
    href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"
    rel="noreferer noopener nofollow"
  >
    shadow DOM
  </ic-link>{" "}
  (<code style={{ backgroundColor: "#EEEFF0" }}>&lt;ShadowRoot&gt;</code>). RTL
  does not provide utility functions that traverse beyond the shadow DOM. With
  the addition of{" "}
  <ic-link
    target="_blank"
    href="https://github.com/KonnorRogers/shadow-dom-testing-library"
    rel="noreferer noopener nofollow"
  >
    Shadow DOM Testing Library
  </ic-link>
  , elements within the shadow DOM can be selected and then interacted with by using
  methods provided by RTL. Shadow DOM Testing Library provides functions with 'Shadow'
  prefixed to the query type (for example, <code
    style={{ backgroundColor: "#EEEFF0" }}
  >
    getByShadowText()
  </code>).
</p>

```tsx
// DOM tree for IcAlert.
<ic-alert class="dark hydrated" message="Foo" role="alert">
  <ShadowRoot>
    ...
    <ic-typography class="ic-typography-body hydrated">
      <ShadowRoot>
        <slot />
      </ShadowRoot>
      Foo
    </ic-typography>
    ...
  </ShadowRoot>
</ic-alert>
```

## Example: Testing multiple components

Below is an example of testing `@ukic/react` components within an ICDS ‘test app’ using RTL, Jest and Shadow DOM Testing Library.

<ComponentTesting
  snippetArray={snippetArray}
  showStackblitzBtn
  stackblitzButtonTestAppProps={stackblitzProps}
/>

---

# Documents Overview

URL: https://design.sis.gov.uk/icds
Subtitle: This section contains documents regarding the Design System website and your use of it.


## Our Policy Documents

- [Accessibility Statement](/icds/accessibility-statement) - A summary of the Design System's compliance to the Web Content Accessibility Guidelines.
- [Cookies Policy](/icds/cookies-policy) - A breakdown of the cookies that the Design System uses to operate.
- [Privacy Policy](/icds/privacy-policy) - A summary of the user information that the Design System collects.

---

# Back to top

URL: https://design.sis.gov.uk/components/back-to-top
Status: BETA
Subtitle: The back to top component helps people quickly return to the top of a long page.


import { IcTypography, IcButton } from "@ukic/react";
import backToTopFig1 from "./images/fig-1-do-show-the-back-to-top-button-on-the-bottom-right-hand-side.png";
import backToTopFig2 from "./images/fig-2-do-not-show-the-back-to-top-button-on-a-non-scrollable-page.png";
import backToTopFig3 from "./images/fig-3-dont-use-other-buttons-for-back-to-top.png";
import backToTopFig4 from "./images/fig-4-dont-show-back-to-top-anywhere-other-than-the-bottom-right.png";
import backToTopFig5 from "./images/fig-5-anchored-on-footer.png";
import backToTopFig6 from "./images/fig-6-icon-back-to-top-zoom.png";
import backToTopFig7 from "./images/fig-7-default-back-to-top-zoom.png";

## Introduction

An example of the back to top component.

<div id="scroll-to-target" style={{ position: "absolute", top: "-3.125rem" }}>
  <IcTypography>Top of page</IcTypography>
</div>

<ComponentPreview>
  <IcButton
    onClick={() => {
      window.scrollTo(0, document.body.scrollHeight);
    }}
  >
    Show Back to top component
  </IcButton>
</ComponentPreview>

## Component variants

There are two variants of the back to top component:

- Default
- Icon-only

## When to use

### Default

Use this component for pages with a lot of content that requires scrolling, such as intranets, reports and content-heavy apps.

Consider using it on all apps to improve usability for everyone, including keyboard-only and some assistive technology users.

<DoDontCaution
  imageSrc={backToTopFig1}
  imageAlt="An example page that is scrolled half way down and showing an overlaid back to top button in the bottom right-hand side."
  state="good"
  caption="Display the back to top button when a page has been scrolled."
/>

### Icon-only

The icon-only back to top button should be used when a page is zoomed, to minimise overlapping content.

<DoDontCaution
  imageSrc={backToTopFig6}
  imageAlt="An example page that is scrolled halfway down and zoomed in, with an icon-only variant back to top button in the bottom right corner."
  state="good"
  caption="Use the icon-only variant when zoomed to reduce overlapping content."
/>

## When not to use

Don't use when the page is designed to fill the viewport without scrolling.

Don't display the back to top button when the page is already scrolled to the top.

<DoDontCaution
  imageSrc={backToTopFig2}
  imageAlt="An example page that fits within the viewport without scrolling. A back to top button is overlaid in the bottom right-hand side."
  state="bad"
  caption="Don’t show a back to top button when the page does not require scrolling, or is already scrolled to the top of the page."
/>

Only use the provided back to top component. Don't use any other button in place of the back to top component.

<DoDontCaution
  imageSrc={backToTopFig3}
  imageAlt="An example page that is scrolled half way down and displays a primary button reading ‘Back to top’ in the bottom right corner instead of the back to top component."
  state="bad"
  caption="Don’t use any other component for providing back to top functionality. Use the back to top button."
/>

Avoid using the default back to top button when zoomed, as it may obscure important page content. The icon-only back to top button should be used instead.

<DoDontCaution
  imageSrc={backToTopFig7}
  imageAlt="An example page that is scrolled halfway down and zoomed in, with a default variant back to top button in the bottom right corner that obscures some of the text on the page."
  state="caution"
  caption="Avoid using the default variant where it may obscure important page content."
/>

## Interaction behaviour

The back to top button targets the `main` region in your code.

Avoid setting focus to the top of the `body` because users will have to navigate through the header and navigation.

## Layout and placement

Don’t place the back to top button anywhere else as it may obscure important information or interactive components.

<DoDontCaution
  imageSrc={backToTopFig4}
  imageAlt="An example page that is scrolled halfway that shows a back to top button overlaid in the bottom left-hand corner of the screen. The button obscures a list of filters that appear behind it."
  state="bad"
  caption="Don’t show the back to top button anywhere other than the right-hand side as it may obscure other content.  "
/>

When the bottom of the page is reached, the back to top button anchors into place above the [footer](/components/footer).

<DoDontCaution
  imageSrc={backToTopFig5}
  imageAlt="An example page that is scrolled all the way to the bottom showing a footer component with the back to top button positioned above it."
  state="good"
  caption="The back to top button anchors above the footer when scrolled to the bottom of the page."
/>

## Motion

When clicked, the component should navigate to the top of the page without any scrolling animation.

---

# Breadcrumb

URL: https://design.sis.gov.uk/components/breadcrumb
Status: BETA
Subtitle: Breadcrumbs show someone where they are in an app’s hierarchy and provide a secondary method of navigating back to parent pages.


import { IcBreadcrumbGroup, IcBreadcrumb } from "@ukic/react";
import breadcrumbsFig1 from "./images/fig-1-use-breadcrumbs-as-a-secondary-navigation-method.png";
import breadcrumbsFig2 from "./images/fig-2-dont-use-breadcrumbs-for-shallow-app-structures.png";
import breadcrumbsFig3 from "./images/fig-3-dont-include-current-page-in-breadcrumbs.png";
import breadcrumbsFig4 from "./images/fig-4-use-contrast-breadcrumbs-for-different-backgrounds.png";

## Introduction

An example of the breadcrumbs component.

<ComponentPreview>
  <IcBreadcrumbGroup>
    <IcBreadcrumb
      pageTitle="Home"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      pageTitle="Beverages"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcBreadcrumb
      current="true"
      pageTitle="Coffee"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcBreadcrumbGroup>
</ComponentPreview>

## When to use

Use breadcrumbs to describe an app’s hierarchy and where the current page sits within it. Use breadcrumbs for apps that have a large number of pages within a complex structure.

Show the current page’s parents, grandparents and other ancestors so that the user can easily move back up the hierarchy. Always show a link to the app’s homepage as the top-level link in the breadcrumb component.

Use breadcrumbs as a secondary navigation option to supplement the app’s main navigation method.

<DoDontCaution
  imageSrc={breadcrumbsFig1}
  imageAlt="Above the page header is a breadcrumb component with links to parent pages for ‘Coffees’, ‘Beverages’ and ‘Home’. This is separate from the site navigation."
  state="good"
  caption="A breadcrumb providing a secondary method of navigation that supplements the main navigation from the top navigation."
/>

Use the ‘back breadcrumb’ for apps with simple structures that are only one or two levels deep. Show the current page’s immediate parent in the back breadcrumb link.

Use a condensed breadcrumb to hide the middle steps between the page’s parent and the homepage. However, always allow the condensed breadcrumb to be expanded to show the full path.

## When not to use

Don’t use breadcrumbs as the primary method of navigating through an app’s pages. Always include a global navigation method to allow any page to be easily accessed from any other page.

Don’t use breadcrumbs to show the history of recently visited pages. Only use breadcrumbs to show the location of the current page within an app’s structure.

Don’t use breadcrumbs if the app’s structure is only one or two pages deep. Use the ‘back breadcrumb’ or use a different method to indicate the page’s position.

<DoDontCaution
  imageSrc={breadcrumbsFig2}
  imageAlt="Above the page header is a breadcrumb component with links to parent pages for ‘Coffee’ and ‘Home’."
  state="bad"
  caption="Don’t use breadcrumbs for apps with structures that are only one or two pages deep."
/>

Don’t include the current page as a link within the breadcrumbs. Instead use clear titling on the page itself to label the current page. If displaying the current page within the breadcrumb, then make sure it is not clickable.

<DoDontCaution
  imageSrc={breadcrumbsFig3}
  imageAlt="An example app called ‘A whole latte love’ showing a page titled ‘Latte’. A breadcrumb exists in the page header that includes links to the current page ‘Latte’, and its ancestors ‘Coffee’, ‘Beverages’ and ‘Home’."
  state="bad"
  caption="Don’t include the current page as a link within the breadcrumb."
/>

Avoid showing more than six levels in a breadcrumb. Consider your app’s information architecture and whether the site’s structure can be flattened. If this can’t be achieved, use hub pages as the first link in a breadcrumb, which themselves provide a method of returning back to the homepage.

## Colour

Always use the default appearance of breadcrumbs to ensure that the links are recognisable as links. However, use the light or dark appearance if breadcrumbs are positioned on different coloured backgrounds to ensure good colour contrast.

<DoDontCaution
  imageSrc={breadcrumbsFig4}
  imageAlt="An example app called ‘A whole latte love’ that shows a page titled ‘Latte’. A hero banner sits at the top of the page with a dark blue background. A breadcrumb component that sits on top of the dark hero banner uses white styled links to achieve high contrast."
  state="good"
  caption="Use contrast styling if using breadcrumbs on different coloured backgrounds."
/>

## Content

Make sure that the breadcrumb label is the exact title of the page it links to.

## Layout and placement

Always position breadcrumbs at the top of page content but below main navigation components such as the [top navigation](/components/top-navigation).

## Related components

- [Page header](/components/page-header)

---

# Card

URL: https://design.sis.gov.uk/components/card
Status: BETA
Subtitle: Cards are containers used to display structured information or interactive content.


import { IcCard, IcButton, IcTypography, IcStatusTag } from "@ukic/react";
import cardsFig1 from "./images/fig-1-card-anatomy.png";
import cardsFig2 from "./images/fig-2-heading-area-anatomy.png";
import cardsFig3 from "./images/fig-3-place-images-either-at-the-top-or-in-the-middle-of-cards-if-content-is-present.png";
import cardsFig4 from "./images/fig-4-dont-place-images-below-content.png";
import cardsFig5 from "./images/fig-5-interaction-area-anatomy.png";
import cardsFig6 from "./images/fig-6-dont-mix-card-variants-when-arranged-in-a-group.png";
import cardsFig7 from "./images/fig-7-dont-vertically-align-cards-with-different-widths.png";
import cardsFig10 from "./images/fig-10-use-the-show-less-show-more-pattern-when-adding-long-portions-of-text-to-the-content-area.png";
import cardsFig11 from "./images/fig-11-avoid-displaying-lengthy-descriptions-in-the-content-area.png";

## Component variants

There are three variants of cards:

- Interactive cards
- Static cards
- Clickable cards

<ComponentPreview>
  <IcCard
    heading="Americano order"
    subheading="Name: Michael"
    message="Extras: Double espresso shot and oat milk."
    expandable
    style={{ width: "22.5rem" }}
  >
    <IcStatusTag slot="adornment" status="warning" label="In Progress" small />
    <IcButton variant="icon" title="More information" slot="interaction-button">
      <svg
        slot="icon"
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="bi bi-three-dots-vertical"
        viewBox="0 0 16 16"
      >
        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
      </svg>
    </IcButton>
    <svg
      slot="image-mid"
      style={{
        height: "100%",
        width: "100%",
        maxHeight: "20.375rem",
        maxWidth: "20.375rem",
      }}
      viewBox="0 0 1600 1250"
    >
      <rect fill="#ff7700" width="1600" height="1600" y="-350" />
      <polygon fill="#cc0000" points="957 450 539 900 1396 900" />
      <polygon fill="#aa0000" points="957 450 872.9 900 1396 900" />
      <polygon fill="#c50022" points="-60 900 398 662 816 900" />
      <polygon fill="#a3001b" points="337 900 398 662 816 900" />
      <polygon fill="#be0044" points="1203 546 1552 900 876 900" />
      <polygon fill="#9c0036" points="1203 546 1552 900 1162 900" />
      <polygon fill="#b80066" points="641 695 886 900 367 900" />
      <polygon fill="#960052" points="587 900 641 695 886 900" />
      <polygon fill="#b10088" points="1710 900 1401 632 1096 900" />
      <polygon fill="#8f006d" points="1710 900 1401 632 1365 900" />
      <polygon fill="#aa00aa" points="1210 900 971 687 725 900" />
      <polygon fill="#880088" points="943 900 1210 900 971 687" />
    </svg>
    <svg
      slot="icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M2,21V19H20V21H2M20,8V5H18V8H20M20,3A2,2 0 0,1 22,5V8A2,2 0 0,1 20,10H18V13A4,4 0 0,1 14,17H8A4,4 0 0,1 4,13V3H20M16,5H6V13A2,2 0 0,0 8,15H14A2,2 0 0,0 16,13V5Z" />
    </svg>
    <div slot="interaction-controls" style={{ display: "flex", gap: "1rem" }}>
      <IcButton variant="primary">Accept</IcButton>
      <IcButton variant="secondary">Cancel</IcButton>
    </div>
    <IcTypography slot="expanded-content" variant="body">
      To cancel your order click cancel.
    </IcTypography>
  </IcCard>
</ComponentPreview>

### Interactive cards

Interactive cards contain different types of content and actions. The container itself is not interactive but can have interactive components.

### Clickable cards

Clickable cards provide a single action that is triggered by clicking anywhere on the card.

### Static cards

Static cards are non-interactive and contain static content only.

## Anatomy

The following section describes the different areas of content on a card.

<DoDontCaution
  imageSrc={cardsFig1}
  imageAlt="A diagram showing the positioning of the different areas within a card. The areas are a heading area, an image area, a content area, an interaction area, and an expandable area."
  state="none"
  caption="A card includes a heading area, an image area, a content area, an interaction area and an expandable area."
/>

### 1. Heading area

<DoDontCaution
  imageSrc={cardsFig2}
  imageAlt="A diagram showing the positioning of the different sections within the heading area. The area is split up into three different rows. The first row houses section 'A' on the left, section 'B' in the middle, and section 'E' on the right. The second row houses section 'C', and the third row houses section 'D'."
  state="none"
  caption="A card's heading area includes five elements."
/>

The heading area can contain:

- A: Icon/Avatar
- B: Heading
- C: Subtitle
- D: Adornment, for example [status tags](/components/status-tag)
- E: More options icon button (only for interactive cards)

### 2. Image

Include an image either at the top or in the middle of the card. Don't place images below content if this is included in the card.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={cardsFig3}
    imageAlt="Two example cards vertically aligned, where the top card displays an image above the heading area and content area, and the bottom card displays an image below the heading area and above the content area."
    state="good"
    caption="Place images either at the top or in the middle of cards if content is present."
  />
  <DoDontCaution
    imageSrc={cardsFig4}
    imageAlt="An example card where an image is displayed below the heading and content area."
    state="bad"
    caption="Don't place images below content."
  />
</DoubleDoDontCaution>

### 3. Content area

Add a descriptive message within the card content section. Interactive and static cards can include a 'see more' link to expand hidden content.

Since clickable cards can only contain one interaction, text can't be hidden.

### 4. Interaction area (interactive cards only)

<DoDontCaution
  imageSrc={cardsFig5}
  imageAlt="A diagram showing the positioning of the different sections within the interaction area. The area features one row with two different sections, 'A' on the left and 'E' on the far right."
  state="none"
  caption="A card's interaction area includes two elements."
/>

Add interactive components to the interaction area at the bottom of the card (A). Avoid using too many interactions. The interaction area is only found in interactive cards.

Use any type of button in the interaction area to provide actions.

Include an expand button (E) if you include content in the [expandable area](/components/card#5-expandable-area-interactive-cards-only).

### 5. Expandable area (interactive cards only)

Use an expandable area to hold content that either doesn't fit in the collapsed card or doesn't align to the above areas.

This area can be expanded by clicking the “expand” button found on the interaction bar.

## Layout and placement

### Grouping

When arranging multiple cards together, try to use the same card variant for each.

<DoDontCaution
  imageSrc={cardsFig6}
  imageAlt="An image showing a three static cards, one interactive card, and one clickable card arranged in a group."
  state="caution"
  caption="Avoid mixing card variants when arranged in a group."
/>

### Sizing

When cards are shown in columns, make sure cards are vertically aligned and maintain the same width for all cards.

When arranging cards in rows, try to match the vertical height of the cards by including similar amounts of content so that they automatically align horizontally.

<DoDontCaution
  imageSrc={cardsFig7}
  imageAlt="An image showing six cards arranged into three rows and two columns, and the width of the cards changes for each row."
  state="bad"
  caption="Don't vertically align cards with different widths."
/>

## Content

Keep headings, subheadings and adornments clear and concise.

### Image

Use the pre-defined aspect ratios for images in cards. These are:

- 16:9
- 1:1
- 9:16
- 4:1
- 4:3
- 3:4

Set an image to fit within the image container to show the whole image, but this may introduce empty areas in the image container if the image does not match the container aspect ratio. Alternatively, set the image to fill the image container, but be aware this may crop some of the image’s content.

Use a custom image aspect ratio if your image doesn't fit into one of the pre-defined options.

Images should always feature an `alt` attribute. Set the `alt` equal to a descriptive alternative when an image is informational.

### Content area

If placing several lines of text in the content area, use a 'see more' link to make the content expandable.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={cardsFig10}
    imageAlt="An example card titled ‘Your order' with two rows of content in the content area. The second line displays truncated content and a 'see more' clickable text button."
    state="good"
    caption="Use a ‘see more’ link when adding long text to the content area."
  />
  <DoDontCaution
    imageSrc={cardsFig11}
    imageAlt="An example card titled 'Your order' with nine rows of content in the content area."
    state="caution"
    caption="Avoid displaying lengthy descriptions in the content area."
  />
</DoubleDoDontCaution>

## Custom cards

Cards can also be used as custom containers if the pre-defined options don't meet your needs. When designing a custom card, make sure to respect the general anatomy and structure of cards as defined in this document.

Any interactive components must be placed either within the interaction bar, or the expandable area. Make sure the interactive area is always placed at the bottom of a collapsed card.

Cards support one single image. If you need to place two or more images, place the additional images in the expandable area.

Don't include any interactive components within a clickable card as these will interfere with the clickable card’s own action.

---

# Checkbox

URL: https://design.sis.gov.uk/components/checkbox
Status: BETA
Subtitle: Use checkboxes as part of a form, in dialogs or in control areas such as filters or settings.


import { IcCheckboxGroup, IcCheckbox } from "@ukic/react";
import checkboxFig1 from "./images/fig-1-use-the-checklist-to-provide-a-number-of-options.png";
import checkboxFig2 from "./images/fig-2-use-single-checkboxes-to-allow-a-person-to-agree-to-a-statement.png";
import checkboxFig3 from "./images/fig-3-a-nested-checklist-that-shows-indeterminate-states-of-a-parent-checkbox-when-only-some-of-its-children-are-selected.png";
import checkboxFig4 from "./images/fig-4-use-dense-sizing-options-for-compact-layouts.png";
import checkboxFig5 from "./images/fig-5-checklist-error-state-shown-correctly.png";
import checkboxFig6 from "./images/fig-6-single-checkbox-error-state-shown-correctly.png";
import checkboxFig7 from "./images/fig-7-checkbox-child-input-error-shown-correctly.png";
import checkboxFig8 from "./images/fig-8-checkbox-child-input-error-shown-incorrectly.png";
import checkboxFig9 from "./images/fig-9-use-clear-and-concise-wording-in-checkbox-labels.png";
import checkboxFig10 from "./images/fig-10-do-not-use-ambiguous-wording.png";

## Introduction

An example of the checkbox component.

<ComponentPreview>
  <IcCheckboxGroup label="Select your extras" name="1">
    <IcCheckbox value="extra" label="Extra shot (50p)" />
    <IcCheckbox value="Soya milk" label="Soya milk" checked />
    <IcCheckbox value="keep cup" label="Takeaway cup" disabled />
  </IcCheckboxGroup>
</ComponentPreview>

## When to use

Use checkboxes to allow a user to select any number of options from a list. Checkboxes are grouped into a checkbox group to provide multiple options. Any number of options can be selected and any type of checkbox can be included within the checkbox group.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={checkboxFig1}
    imageAlt="A checklist asking the question ‘What are your favourite types of coffee?’ with six options where two are checked."
    state="good"
    caption="Use the checkbox group to provide a number of options that can be selected."
  />
</DoubleDoDontCaution>

Use a single checkbox on its own to allow a user to agree with a statement. For example, use a single checkbox to allow a user to mark whether they agree to a terms and conditions statement.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={checkboxFig2}
    imageAlt="A single unchecked checkbox with a label that reads “I agree to the terms and conditions, and privacy statement”."
    state="good"
    caption="Use single checkboxes to allow a person to agree to a statement."
  />
</DoubleDoDontCaution>

Use a checkbox with a conditional field to display a related additional element when that checkbox is selected. The conditional field can be set to static so that it is always visible and becomes enabled once the checkbox is selected. If the conditional field is set to dynamic the field is displayed only when the checkbox is selected.

## When not to use

Don’t use checkboxes when only one option from a list can be selected. For single select lists, use [radio buttons](/components/radio).

## Interaction behaviour

Checkboxes have three possible selection states: selected, unselected and indeterminate.

Display the indeterminate selection state when the selection of child elements is mixed.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={checkboxFig3}
    imageAlt="A checkbox group asking ‘Which hot drinks do you like?’. A checkbox with label ‘coffee’ shows its indeterminate state as only one of its two child checkboxes is selected."
    state="good"
    caption="A nested checkbox group that shows an indeterminate state on a parent checkbox when only some of its children are selected."
  />
</DoubleDoDontCaution>

Checkboxes are selected or unselected by clicking any part of the checkbox, including the label.

### Sizing

Use small sized checkbox groups for compact layouts. Always use small components with other small input components.

<DoDontCaution
  imageSrc={checkboxFig4}
  imageAlt="Two forms containing a checklist and a text input. One uses default sizing resulting in larger spacing between components. The other uses small sizing that reduces space between components and results in a shorter vertical height for the same form."
  state="good"
  caption="Use small sizing for compact layouts."
/>

### Validation

There are two types of error that can occur on a checkbox: a checkbox input error or an error on a checkbox’s conditional field.

A checkbox input error is when the checkbox or checkbox group component itself is responsible for the error. This is shown using the checkbox error state.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={checkboxFig5}
    imageAlt="A checklist asking 'What are your favourite types of coffee?' with helper text stating 'Select at least one'. Six options are shown but all are unchecked. An error message is displayed below the checklist reading 'Please select at least one option'."
    state="good"
    caption="Checkbox group error state shown correctly."
  />
  <DoDontCaution
    imageSrc={checkboxFig6}
    imageAlt="An unchecked checkbox with label 'I agree to the terms and conditions and privacy statement' alongside a submit button. An error state is shown after the checkbox reading 'Please agree before continuing'."
    state="good"
    caption="Single checkbox error state shown correctly."
  />
</DoubleDoDontCaution>

For errors on a checkbox’s conditional field, the error is shown only on the conditional field itself and not the wider checkbox or checkbox group component.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={checkboxFig7}
    imageAlt="A checklist asking ‘What are your favourite types of coffee’. Six options are shown and one labelled ‘Flat white’ is selected and shows a conditional field that asks ‘How frothy do you like it?’. An error message is displayed below the conditional field reading ‘Please provide an answer’."
    state="good"
    caption="Checkbox conditional field error shown correctly."
  />
  <DoDontCaution
    imageSrc={checkboxFig8}
    imageAlt="A checklist asking ‘What are your favourite types of coffee?’. Six options are shown and one labelled ‘Flat white’ is selected and shows a child field that asks ‘How frothy do you like it?’. An error message is displayed below the child field reading ‘Please provide an answer’. Another error message is displayed below the checklist repeating the same error message."
    state="bad"
    caption="Checkbox conditional field error shown incorrectly. Only the field needs to show the error state and not the parent checkbox or checkbox group."
  />
</DoubleDoDontCaution>

## Content

### Labels

Follow the [content style guidelines](/styles/content-style) for checkbox group labels as well as each individual checkbox label. Use the checkbox group label to ask the question, and use the checkbox options to provide possible answers.

Make sure to use labels that make it easy to understand what selecting the checkbox represents. Avoid using ambiguous labels that make it unclear whether to select a checkbox or not.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={checkboxFig9}
    imageAlt="A short form asking the user to agree to the terms and conditions. A single unchecked checkbox with label ‘I agree to the terms and conditions and privacy statement’ is shown alongside a submit button."
    state="good"
    caption="Use clear and concise wording in checkbox labels that makes it easy to understand what selecting the box represents."
  />
  <DoDontCaution
    imageSrc={checkboxFig10}
    imageAlt="A short form asking the user to agree to the terms and conditions. A single unchecked checkbox with label ‘These are our terms and conditions and privacy statement’ is shown alongside a submit button."
    state="bad"
    caption="Don’t use ambiguous wording that makes it hard to understand what selecting the box represents."
  />
</DoubleDoDontCaution>

## Related components

- [Radio button](/components/radio)

---

# Data entity

URL: https://design.sis.gov.uk/components/data-entity
Status: BETA
Subtitle: The data entity component displays a group of related data in a consistent and easy to consume way.


import { IcDataEntity, IcDataRow } from "@ukic/react";
import dataEntityFig1 from "./images/fig-1-assign-interactions-to-individual-rows-within-the-interaction-area,-or-the-full-data-entity-table-by-using-buttons-at-the-end-of-the-table.png";
import dataEntityFig2 from "./images/fig-2-make-sure-the-data-in-the-cell-displays-in-its-correct-format.png";
import dataEntityFig3 from "./images/fig-3-do-not-pass-non-text-data-in-a-text-format.png";
import dataEntityFig4 from "./images/fig-4-set-the-width-of-all-data-entity-tables-on-a-page-to-the-same-size.png";
import dataEntityFig5 from "./images/fig-5-do-not-set-different-widths-for-different-data-entity-tables.png";
import dataEntityFig6 from "./images/fig-6-make-sure-that-a-data-entity-table-always-has-a-section-header.png";
import dataEntityFig7 from "./images/fig-7-do-not-omit-section-headers-from-data-entity-tables.png";

## Introduction

An example of the data entity component.

<ComponentPreview>
  <IcDataEntity heading="Order details">
    <IcDataRow label="Drink" value="Espresso" />
    <IcDataRow label="Order name" value="Michael" />
    <IcDataRow label="Price" value="£2.80" />
  </IcDataEntity>
</ComponentPreview>

## Interaction behaviour

Use the interaction area in a data entity row to provide an action to that row's data. For example, providing an edit link could display an edit screen so that the value can be changed.

To include interactions that affect the whole data entity, design a pattern using buttons with clear labels.

<DoDontCaution
  imageSrc={dataEntityFig1}
  imageAlt="A data entity titled ‘Personal details’ with six rows. The first five include an ‘edit’ link button, while the sixth includes a download icon button. At the end of the data table there are two buttons, one labelled ‘submit’, and the second labelled ‘edit’."
  state="good"
  caption="Assign interactions to individual rows within the interaction area, or the full data entity by using buttons at the end of the table."
/>

## Content

Cells display the following types of data in a specific format:

- Text
- Numbers
- Date
- Telephone

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={dataEntityFig2}
    imageAlt="A data entity titled ‘details’ with four rows. The first row has a text entry in a text format, the second has a number in a number format, the third has a date in the correct date format, and the fourth has a telephone in the correct telephone format."
    state="good"
    caption="Make sure the data in the cell displays in its correct format."
  />
  <DoDontCaution
    imageSrc={dataEntityFig3}
    imageAlt="A data entity titled ‘details’ with four rows. All four rows are displayed in normal text formatting even though they display a date, number and telephone."
    state="bad"
    caption="Don’t pass non-text data in a text format."
  />
</DoubleDoDontCaution>

## Sizing

When multiple data entities are present on a page, make sure to size them all equally.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={dataEntityFig4}
    imageAlt="An image of two data entities. The top component, labelled ‘personal details’ is the same width as the bottom one, labelled ‘order details’."
    state="good"
    caption="Set the width of all data entities on a page to the same size."
  />
  <DoDontCaution
    imageSrc={dataEntityFig5}
    imageAlt="An image of two data entities. The top component, labelled ‘personal details’ is wider than the bottom one, labelled ‘order details’."
    state="bad"
    caption="Don’t set different widths for different data entities."
  />
</DoubleDoDontCaution>

## Layout and placement

Always include a section header, even when using a single row.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={dataEntityFig6}
    imageAlt="An image of a data entity titled ‘Payment details’ with three rows."
    state="good"
    caption="Make sure that a data entity always has a section header."
  />
  <DoDontCaution
    imageSrc={dataEntityFig7}
    imageAlt="An image of a data entity with three rows, but no title."
    state="bad"
    caption="Don’t omit section headers from data entities."
  />
</DoubleDoDontCaution>

---

# Classification banner

URL: https://design.sis.gov.uk/components/classification-banner
Status: BETA
Subtitle: Classification banners are used to show the data classification (also known as protective marking) of an app.


import { IcClassificationBanner } from "@ukic/react";

## Introduction

Protective markings indicate the level of sensitivity of classified or controlled information.

<ComponentPreview style={{ gap: "0.5rem" }}>
  <IcClassificationBanner inline />
  <IcClassificationBanner classification="official" inline />
  <IcClassificationBanner classification="official-sensitive" inline />
  <IcClassificationBanner classification="secret" inline />
  <IcClassificationBanner classification="top-secret" inline />
</ComponentPreview>

## When to use

All apps, except public ones, require a classification banner. When multiple pieces of information require different markings, use classification banners on each component.

## Layout and placement

Place a single banner at the bottom of the viewport. The banner is always fixed and should not scroll with the page.

## Content

If there is information on a single page that has multiple different classifications, display the maximum classification with the text prefix of `UP TO`.

## Colour

Don’t alter or customise the [classification banner colours](/styles/colour#classification) as they've been designed to meet accessibility requirements.

## Accessibility consideration

Make sure the classification banner is the first item that is read out to people who use screen readers. Put the component at the top of the DOM/HTML.

---

# Footer

URL: https://design.sis.gov.uk/components/footer
Status: BETA
Subtitle: Footers are placed at the bottom of the page and can be used for additional links not found in the main navigation.


import { IcFooter, IcFooterLink } from "@ukic/react";
import footerFig1 from "./images/fig-1-colours.png";
import footerFig2 from "./images/fig-2-not-full-width.png";
import footerFig3 from "./images/fig-3-below-the-fold.png";
import footerFig4 from "./images/fig-4-above-the-fold.png";
import footerFig5 from "./images/fig-5-app-drawer-layouts.png";
import footerFig6 from "./images/fig-6-left-aligned.png";
import footerFig7 from "./images/fig-7-centred.png";
import footerFig8 from "./images/fig-8-full-width.png";
import footerFig9 from "./images/fig-9-single-line-links.png";
import footerFig10 from "./images/fig-10-grouped-links.png";
import footerFig11 from "./images/fig-11-desktop-logos.png";
import footerFig12 from "./images/fig-12-correct-copy.png";
import footerFig13 from "./images/fig-13-incorrect-copy.png";

## Introduction

An example of the footer component.

<ComponentPreview>
  <IcFooter
    description="The UK Intelligence Community Design System (ICDS) is a joint project by MI6, GCHQ, MI5, and partners."
    caption="All content is available under the Open Government Licence v3.0, except source code and code examples which are available under the MIT Licence."
  >
    <IcFooterLink slot="link" href="#">
      Accessibility
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Styles
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Components
    </IcFooterLink>
    <IcFooterLink slot="link" href="#">
      Patterns
    </IcFooterLink>
  </IcFooter>
</ComponentPreview>

## When to use

There are two types of footer that display links in different ways. These are single line footers and grouped footers.

Use a footer on every page so that the required legal information is displayed.

### Single line

Use single line footers when eight or fewer links are required and there is no need to split those links into groups.

### Grouped

Use grouped footers when more than eight links are required or the links can be grouped meaningfully.

## Colour

The background colour of the footer reflects the chosen theme colour for the application. Set the global theme colour token to change the footer’s appearance.

<DoDontCaution
  imageSrc={footerFig1}
  imageAlt="A footer using automatically generated secondary and tertiary shades of the app’s theme colour as the background colours for the footer’s link section and logo section respectively."
  state="good"
  caption="Change the global theme colour token to change the footer’s appearance."
/>

## Sizing

The footer always extends to the full width of the viewport.

Don’t embed the footer within another container that is not full width.

<DoDontCaution
  imageSrc={footerFig2}
  imageAlt="A footer positioned centred between two other content areas that sit to the left and right of the footer."
  state="bad"
  caption="Don’t place the footer within other content. Always make sure it's the full width of the viewport."
/>

## Layout and placement

### Placement

Always place the footer at the bottom of the page and below the fold, meaning users should scroll to see it.

<DoDontCaution
  imageSrc={footerFig3}
  imageAlt="A footer component placed below the fold within a page design."
  state="good"
  caption="Footer placed correctly below the fold on a page."
/>

<DoDontCaution
  imageSrc={footerFig4}
  imageAlt="A footer component placed above the fold within a page design."
  state="bad"
  caption="Footer placed incorrectly above the fold."
/>

Position the footer adjacent to the [side navigation](/components/side-navigation) if your app uses one.

<DoDontCaution
  imageSrc={footerFig5}
  imageAlt="An example app showing a side navigation component with a footer component positioned on the right and adjacent to the side navigation."
  state="good"
  caption="Place the footer adjacent to the side navigation."
/>

### Alignment

The footer can be set to left-aligned, centred or full width.

Use left-aligned to align footer content to the left of the main body of the page. This works well with apps that use the side navigation.

<DoDontCaution
  imageSrc={footerFig6}
  imageAlt="A footer component with its content left aligned."
  state="good"
  caption="A footer with its content left aligned."
/>

Use centred alignment to centre footer content to the main body of the page.

<DoDontCaution
  imageSrc={footerFig7}
  imageAlt="A footer component with its content centre aligned."
  state="good"
  caption="A footer with its content centre aligned."
/>

Use full-width to position footer content so that it spans the full width of the viewport.

<DoDontCaution
  imageSrc={footerFig8}
  imageAlt="A footer component with its content aligned to the full width of the viewport."
  state="good"
  caption="A footer with its content aligned to the full width of the viewport."
/>

## Content

### Links

Footers provide a set of links that can be accessed from every page within an app. Specify either single links or grouped links when using a footer.

Give link groups clear labels when using grouped links.

Order the links so that the most important links appear at the top left of the links section.

<DoDontCaution
  imageSrc={footerFig9}
  imageAlt="A footer showing a single set of links. The four links include ‘Accessibility statement’, ‘Privacy’, ‘Cookies’ and ‘Contribute’."
  state="good"
  caption="A footer with a single set of links."
/>

<DoDontCaution
  imageSrc={footerFig10}
  imageAlt="A footer showing two groups of links. The two link groups are titled ‘Services’ and ‘Policy’ and each group includes a set of links."
  state="good"
  caption="A footer with grouped links."
/>

### Logos

Footers can include a number of different logos. The logos appear at the bottom of the footer. Choose the correct variant (i.e., light or dark) of your logo to match the selected theme colour background.

<DoDontCaution
  imageSrc={footerFig11}
  imageAlt="A footer displaying four different logos on a large screen."
  state="good"
  caption="A footer displaying four different logos on a large screen."
/>

### Additional information

Provide additional information in either the top section above the links or in the bottom section below the logos. Any additional information provided should be concise and easy to understand.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={footerFig12}
    imageAlt="A footer component showing concise and easily understandable information. It reads ‘The ICDS is maintained by the Design Practice Team. If you’ve got a question or want to feedback, please get in touch.’"
    state="good"
    caption="Concise and easily understandable information shown in the footer."
  />
  <DoDontCaution
    imageSrc={footerFig13}
    imageAlt="A footer component showing overly lengthy information. It reads ‘The ICDS is maintained by the Design Practice Team. If you’ve got a question or want to feedback, please get in touch. The best way to contact the team would be through Microsoft Teams between the hours of 9am to 5pm, Monday to Friday. We will strive to get back to you as soon as possible.’"
    state="bad"
    caption="The information included in the footer is too long."
  />
</DoubleDoDontCaution>

---

# Hero

URL: https://design.sis.gov.uk/components/hero
Status: BETA
Subtitle: A large banner found at the top of page used to introduce page content, provide key actions and add personality.


import { IcHero, IcButton } from "@ukic/react";
import heroFig1 from "./images/fig-1-dont-place-hero-banners-in-middle-of-page.png";
import heroFig2 from "./images/fig-2-hero-banners-automatically-use-personality-colour.png";
import heroFig3 from "./images/fig-3-use-grey-background-when-colour-is-not-appropriate.png";
import heroFig4 from "./images/fig-4-dont-place-hero-banners-not-full-width.png";
import heroFig5 from "./images/fig-5-hero-alignment-options.png";
import heroFig6 from "./images/fig-6-use-buttons-in-the-interaction-area.png";
import heroFig7 from "./images/fig-7-use-links-in-the-interaction-area.png";
import heroFig8 from "./images/fig-8-use-simple-inputs-in-the-interaction-area.png";
import heroFig9 from "./images/fig-9-don't-use-complex-forms-in-the-interaction-area.png";
import heroFig10 from "./images/fig-10-use-clickable-cards-for-latest-announcements.png";
import heroFig11 from "./images/fig-11-use-secondary-headings-for-more-info.png";
import heroFig12 from "./images/fig-12-use-empty-space-on-right-hand-side-to-emphasise-title.png";
import heroFig13 from "./images/fig-13-use-embedded-images.png";
import heroFig14 from "./images/fig-14-use-full-height-images.png";
import heroFig15 from "./images/fig-15-use-background imagery.png";
import heroFig16 from "./images/fig-16-use-safe-areas-when-using-background-imagery.png";

## Introduction

An example of the hero component.

<ComponentPreview>
  <IcHero
    heading="Everything I brew, I brew it for you"
    subheading="This news is hot off the French press."
  >
    <IcButton variant="primary" appearance="light" slot="interaction">
      Explore
    </IcButton>
    <IcButton variant="secondary" appearance="light" slot="interaction">
      Check out our new drinks
    </IcButton>
  </IcHero>
</ComponentPreview>

## When to use

Use the hero on a homepage to introduce your app or service and provide navigation to its main functions. Use the hero to catch a user's attention as it's often the first thing that they see.

## When not to use

Don't use hero banners part way through page content to introduce sections. They should always appear at the top of the page to act as an introduction to the full page.

<DoDontCaution
  imageSrc={heroFig1}
  imageAlt="An example application with some content at the top of the page, then a hero banner introducing a section, and then more content."
  state="bad"
  caption="Don't position hero banners part way through a page. Always position them at the top of page content."
/>

## Colour

Hero banners use an automatic secondary variant of an app's chosen theme colour.

<DoDontCaution
  imageSrc={heroFig2}
  imageAlt="A hero banner with background colours based of the selected green theme colour."
  state="none"
  caption="Hero banners automatically set their colour based on the selected theme colour."
/>

<DoDontCaution
  imageSrc={heroFig3}
  imageAlt="A hero banner with a grey background colour and black text."
  state="none"
  caption="Set the hero background colour to grey when colour is not appropriate."
/>

## Sizing

Use default sized hero for most applications. Use small sized hero banners for apps with compact layouts.

## Layout and placement

Always position the hero banner at the top of the page and make it span the width of the container.

<DoDontCaution
  imageSrc={heroFig4}
  imageAlt="A hero that is embedded within a container and doesn't span its full width."
  state="bad"
  caption="Don't place the hero so that it does not span its container's full width."
/>

Use the alignment options to align the hero content to either full-width, left or centre of its container.

<DoDontCaution
  imageSrc={heroFig5}
  imageAlt="Three examples of a hero with content aligned to the full-width of the container, the left of the container, and to the centre of the container."
  state="none"
  caption="Use full-width, left or centre alignment to position the hero's content."
/>

## Content

### Interaction area

Use the hero's interaction slot to add interactive elements such as buttons, links or search bars.

Don't add too much to the slot as it may become too busy. A hero should introduce the page, but not contain all of the page's content.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={heroFig6}
    imageAlt="A hero that says 'Everything I brew, I brew it for you' with a button that says 'Explore'."
    state="none"
    caption="Use buttons to provide actions in the interaction area."
  />
  <DoDontCaution
    imageSrc={heroFig7}
    imageAlt="A hero that says 'Everything I brew, I brew it for you' with a link that says 'Explore'."
    state="none"
    caption="Use links to provide navigation from the interaction area."
  />
</DoubleDoDontCaution>

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={heroFig8}
    imageAlt=" A hero that says 'Everything I brew, I brew it for you' with a search bar in the interaction area."
    state="none"
    caption="Use simple inputs to provide page level functions in the interaction area."
  />
  <DoDontCaution
    imageSrc={heroFig9}
    imageAlt="A hero that says 'Everything I brew, I brew it for you' with a text field, a text area and a button in the interaction area."
    state="bad"
    caption="Don't use complex forms in the interaction area."
  />
</DoubleDoDontCaution>

### Secondary area

Use the hero's secondary area to add additional information or navigation options. For example, use a [clickable card](/components/card) to provide a link to recent posts, use a secondary heading to give more info about the app, or keep it empty to help the main heading stand out.

<DoDontCaution
  imageSrc={heroFig10}
  imageAlt="A hero with a clickable card in the secondary area that says ‘Latest Announcement’."
  state="none"
  caption="Use clickable cards to provide links to other pages."
/>

<DoDontCaution
  imageSrc={heroFig11}
  imageAlt="A hero with a secondary heading in the secondary area that says 'Grab a cuppa and make yourself at home'."
  state="none"
  caption="Use a secondary heading in the secondary area to provide more information."
/>

<DoDontCaution
  imageSrc={heroFig12}
  imageAlt="A hero with a title that reads 'Everything I brew, I brew it for you' with no content in the secondary area."
  state="none"
  caption="Keep the secondary area empty to provide more emphasis to the main hero heading."
/>

### Imagery

Use imagery on a hero to add personality to your app. Either embed the image in the secondary area, specify a full-size image to fill the secondary area, or add an image to the hero background itself.

<DoDontCaution
  imageSrc={heroFig13}
  imageAlt="A hero with an image of a coffee cup in the secondary area."
  state="none"
  caption="Use embedded images in the secondary area."
/>

<DoDontCaution
  imageSrc={heroFig14}
  imageAlt="A hero with a full height image of a hand holding a coffee cup in the secondary area."
  state="none"
  caption="Use full-height images in the secondary area for greater emphasis on the imagery."
/>

<DoDontCaution
  imageSrc={heroFig15}
  imageAlt="A hero with an image of a hexagon patterns as the background."
  state="none"
  caption="Use an image as the hero's background to add personality."
/>

When using an image background, ensure that you include 'safe areas' in your image to avoid the image's content interfering with the hero's text content.

Always specify alt-text with any image that you use so that its content can be understood equally by everyone.

<DoDontCaution
  imageSrc={heroFig16}
  imageAlt="A diagram showing safe areas for background imagery. The safe area appears on the left-hand side under where the hero's text content lives. The image content appears outside of the safe areas."
  state="none"
  caption="Use safe areas with hero background images to avoid content interfering."
/>

---

# Loading indicator

URL: https://design.sis.gov.uk/components/loading-indicator
Status: BETA
Subtitle: Loading indicators help inform users that a request is being processed. Radial and linear indicators provide flexibility in design.


import { IcLoadingIndicator, IcTypography } from "@ukic/react";
import loadingIndicatorFig1 from "./images/fig-1-use-clear-concise-and-specific-labels.png";
import loadingIndicatorFig2 from "./images/fig-2-do-not-make-labels-unnecessarily-long.png";
import loadingIndicatorFig3 from "./images/fig-3-always-centre-the-component.png";
import loadingIndicatorFig4 from "./images/fig-4-do-not-position-the-loading-indicators-on-other-parts-of-the-page-or-container.png";
import loadingIndicatorFig5 from "./images/fig-5-place-the-full-width-indicator-at-the-top-of-the-container.png";
import loadingIndicatorFig6 from "./images/fig-6-do-not-position-full-width-loading-indicators-on-other-parts-of-the-container.png";
import loadingIndicatorFig7 from "./images/fig-7-place-loading-indicators-in-modals-when-overlayed-on-other-content.png";
import loadingIndicatorFig8 from "./images/fig-8-do-not-place-loading-indicators-over-other-content.png";

## Component variants

Loading indicators have two variants: radial and linear.

Loading indicators can either be determinate or indeterminate:

- Use determinate loading indicators when the percentage of completion can be determined.
- Use indeterminate loading indicators when the process completion rate can't be determined.

## Radial

Radial loading indicators have four sizes:

- Small
- Default
- Large
- Icon

The icon size is available for use within other components.

<ComponentPreview>
  <IcLoadingIndicator type="circular" progress="50" max="100" label="50%" />
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Radial determinate.
</IcTypography>

<ComponentPreview>
  <IcLoadingIndicator type="circular" label="Loading..." />
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Radial indeterminate.
</IcTypography>

## Linear

Linear loading indicators have three sizes:

- Small
- Default
- Large

Linear loading indicators have two variants:

- Default
- Full-width

Linear loading indicators can be set to full-width to span its container.

<ComponentPreview>
  <IcLoadingIndicator
    style={{ width: "15rem" }}
    type="linear"
    label="50%"
    progress="50"
    max="100"
  />
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Linear determinate.
</IcTypography>

<ComponentPreview>
  <IcLoadingIndicator
    style={{ width: "15rem" }}
    type="linear"
    label="Loading..."
    max="100"
  />
</ComponentPreview>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Linear indeterminate.
</IcTypography>

## When to use

Use loading indicators when loading full pages or containers where the structure is unknown.

Use determinate loading indicators wherever the percentage of completion can be calculated.

## When not to use

Avoid using loading indicators when loading full pages if the structure of the page loading is known. Instead, use the [skeleton](/components/skeleton) component.

## Content

### Labels

Determinate loading indicators feature the percentage completion rate in percentage points, 0 to 100%.

Indeterminate loading indicators have a customisable label. The label can be set to change after a specified amount of time. Make sure to display each label for at least five seconds. Keep labels clear and concise. Where possible, provide specific labels to the process being performed.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={loadingIndicatorFig1}
    imageAlt="A graphic of a radial loading indicator with the label of 'Submitting form...'."
    state="good"
    caption="Use clear, concise and specific labels."
  />
  <DoDontCaution
    imageSrc={loadingIndicatorFig2}
    imageAlt="A graphic of a radial loading indicator with the label of ‘The form is now being submitted... Please wait...’."
    state="bad"
    caption="Don’t make labels unnecessarily long."
  />
</DoubleDoDontCaution>

## Layout and placement

Loading indicators always appear centred within their container. If the whole page is loading, position the loading indicator at the centre of the page. If the loading indicator is used inside another component, like a card, position the loading indicator at the centre of the component.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={loadingIndicatorFig3}
    imageAlt="A graphic of a radial loading indicator positioned in the middle of a blank page."
    state="good"
    caption="Always centre the component."
  />
  <DoDontCaution
    imageSrc={loadingIndicatorFig4}
    imageAlt="A graphic of a radial loading indicator positioned in the top left corner of a blank page."
    state="bad"
    caption="Don’t position the loading indicators on other parts of the page or container."
  />
</DoubleDoDontCaution>

When using the full-width variant of linear loading indicators, make sure to place this at the top of the component or page. Also, make sure that the loading indicator takes up the full width of the component or page.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={loadingIndicatorFig5}
    imageAlt="A graphic of a full width loading indicator at the top of a page."
    state="good"
    caption="Place the full width indicator at the top of the container."
  />
  <DoDontCaution
    imageSrc={loadingIndicatorFig6}
    imageAlt="A graphic of a full width loading indicator positioned in the centre of a container with a bigger width."
    state="bad"
    caption="Don’t position full width loading indicators on other parts of the container. Make sure it has the same width of this container."
  />
</DoubleDoDontCaution>

If loading indicators are overlaid on other content, place them in a dialog.

<DoDontCaution
  imageSrc={loadingIndicatorFig7}
  imageAlt="A loading indicator placed inside a modal dialog, overlaid on a page filled with content."
  state="good"
  caption="Place loading indicators in dialogs when overlaid on other content."
/>

<DoDontCaution
  imageSrc={loadingIndicatorFig8}
  imageAlt="A loading indicator overlaid on a page filled with content."
  state="bad"
  caption="Don’t place loading indicators over other content, even if changing the opacity of the background."
/>

---

# Radio button

URL: https://design.sis.gov.uk/components/radio
Status: BETA
Subtitle: Radio buttons let people select a single option from a list.


import { IcRadioGroup, IcRadioOption } from "@ukic/react";
import radioFig1 from "./images/fig-1-do-not-use-a-radio-button-group-to-allow-multiple-selected-options-from-a-list.png";
import radioFig2 from "./images/fig-2-use-a-checkbox-group-to-allow-multiple-sections-from-a-list.png";
import radioFig3 from "./images/fig-3-do-not-use-radio-buttons-to-turn-something-on-or-off.png";
import radioFig4 from "./images/fig-4-use-a-switch-to-toggle-something-on-or-off.png";
import radioFig5 from "./images/fig-5-always-display-radio-buttons-as-a-stack-when-there-are-more-than-two-options.png";
import radioFig6 from "./images/fig-6-do-not-display-radio-groups-with-more-than-two-options-in-a-row.png";
import radioFig7 from "./images/fig-7-display-radio-buttons-as-a-stack-or-in-a-row-when-radio-groups-have-two-options.png";
import radioFig8 from "./images/fig-8-when-there-is-an-issue-show-an-error-message-next-to-the-entire-radio-group.png";
import radioFig9 from "./images/fig-9-error-validation-shown-correctly-on-the-field-causing-the-error.png";
import radioFig10 from "./images/fig-10-only-display-the-error-on-the-field-causing-it.png";

## Introduction

An example of the radio button component.

<ComponentPreview style={{ marginTop: "1.5rem" }}>
  <IcRadioGroup label="Add a free purchase with any hot drink" name="snacks">
    <IcRadioOption value="crisps" label="Crisps" />
    <IcRadioOption
      value="cookie"
      label="Deluxe chocolate chip cookie (sold out)"
      disabled
      inactive
    />
    <IcRadioOption value="fruit" label="Banana" />
    <IcRadioOption value="No item" label="No thanks, just my coffee" />
  </IcRadioGroup>
</ComponentPreview>

## When to use

Use radio buttons in a radio button group to present a set of selectable options.

Use radio buttons when only one option can be selected from a list.

Use a radio button with a conditional field to display a related additional element when that radio button is selected. The conditional field can be set to static so that it is always visible and becomes enabled once the radio button is selected. If the conditional field is set to dynamic the field is only displayed when the radio button is selected.

## When not to use

Don’t use radio buttons on their own, they should always appear as part of a radio button group.

Don’t use radio buttons when the user can select multiple options from the list. Use [checkboxes](/components/checkbox) instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig1}
    imageAlt="A radio button group titled ‘What are your favourite coffees?’ with two out of six radio buttons showing as selected."
    state="bad"
    caption="Don’t use a radio button group to allow multiple selected options from a list."
  />
  <DoDontCaution
    imageSrc={radioFig2}
    imageAlt="A checkbox group titled ‘What are your favourite coffees?’ with two out of six checkboxes selected."
    state="good"
    caption="Use a checkbox group to allow multiple sections from a list."
  />
</DoubleDoDontCaution>

Don’t use radio buttons to turn something on or off. Use a [switch](/components/switch) instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig3}
    imageAlt="A two option radio button group with the label ‘Turn on the coffee machine?’ with options for ‘On’ and ‘Off’."
    state="bad"
    caption="Don’t use radio buttons to turn something on or off."
  />
  <DoDontCaution
    imageSrc={radioFig4}
    imageAlt="Two switches under the heading 'equipment'. One switch is toggled on whilst the other is off."
    state="good"
    caption="Use a switch to toggle something on or off."
  />
</DoubleDoDontCaution>

## Interaction behaviour

In most circumstances, set a default selected option from a radio button group to help people understand that something must be selected, and to expedite the completion of the input using the commonly preferred option.

Alternatively, use a radio button group without a default selected option to force people to select an option before moving on. This eliminates bias towards a single option and avoids people skipping over the question by leaving the default selection.

### Sizing

Use small sized radio button groups to achieve compact layouts. Always use small sized components with other small sized components.

### Layout and placement

Stack radio buttons when there are more than two options.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig5}
    imageAlt="A radio button group titled ‘What milk would you like?’ with three radio buttons for ‘dairy’, ‘soya’ and ‘nut’ stacked vertically."
    state="good"
    caption="Always display radio buttons as a stack when there are more than two options."
  />
</DoubleDoDontCaution>

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig6}
    imageAlt="A radio button group asking ‘What milk would you like?’ and showing three options for ‘Dairy’, ‘Soya’  and ‘Nut’ displayed in a row."
    state="bad"
    caption="Don’t display radio button groups with more than two options in a row."
  />
</DoubleDoDontCaution>

If there are only two options, you can display them either stacked or in a row.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig7}
    imageAlt="A radio button group asking ‘Would you like a coffee?’ with radio buttons for ‘Yes’ and ‘No’ displayed in a row. A second radio button group asking ‘What milk would you like?’ with radio buttons for ‘Dairy’ and ‘Soya’ displayed stacked."
    state="good"
    caption="Display radio buttons as a stack or in a row when radio button groups have two options."
  />
</DoubleDoDontCaution>

### Validation

There are two types of error that can occur on a radio button: a radio button input error or an error on a radio button's conditional field.

A radio button input error is when the radio button group itself is responsible for the error. This is shown using the radio button error state.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig8}
    imageAlt="A radio button group displayed with no radio button selected with an error message reading ‘Please select an option’."
    state="good"
    caption="When there’s an issue show an error message next to the entire radio button group."
  />
</DoubleDoDontCaution>

For errors on a radio button’s conditional field, the error is shown only on the conditional field itself and not on the parent radio button group component.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={radioFig9}
    imageAlt="A graphic showing a radio button group with four options and an error reading ‘Answer required’ displayed with an empty input field that is a conditional field of one of the radio buttons."
    state="good"
    caption="Error validation shown correctly on the field causing the error."
  />
  <DoDontCaution
    imageSrc={radioFig10}
    imageAlt="A graphic showing two error labels incorrectly applied to a radio button group. One error reading ‘Answer required’ is displayed with an empty input field that is the conditional field of a radio button. The other error, also reading ‘Answer required’ is displayed with the whole radio button group."
    state="bad"
    caption="Only display the error on the field causing it. Don’t display an error on the field as well as the radio group."
  />
</DoubleDoDontCaution>

## Content

### Labels

Follow the [content style guidelines](/styles/content-style) for radio button group labels as well as each individual radio button label. Use the radio button group label to ask the question, and use the radio button labels to provide possible answers.

## Related components

- [Checkbox](/components/checkbox)

---

# Search bar

URL: https://design.sis.gov.uk/components/search-bar
Status: BETA
Subtitle: A search bar is a special input field that allows users to search for information using keywords or phrases.


import { IcSearchBar } from "@ukic/react";
import searchBarFig1 from "./images/fig-1-dont-display-large-numbers-of-search-results-in-droplist.png";
import searchBarFig3 from "./images/fig-3-search-field-with-helpful-placeholder.png";
import searchBarFig4 from "./images/fig-4-search-field-with-unhelpful-placeholder.png";
import searchBarFig5 from "./images/fig-5-suggested-options-loading-state.png";
import searchBarFig6 from "./images/fig-6-suggested-options-empty-state.png";

## Introduction

An example of the search bar component.

<ComponentPreview>
  <IcSearchBar
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
    onIcChange={(ev) => console.log("onIcChange", ev.detail.value)}
    onIcSubmitSearch={(ev) => console.log("onIcSubmitSearch", ev.detail.value)}
    placeholder="Start typing to search…"
  />
</ComponentPreview>

## When to use

### Search bar with results

Use the search bar with search results for automatically displaying search results relating to the input query in the input field. Use this for searching through a known data set, such as a site search displaying individual pages as the search results (like the search on this website).

Search for an ‘espresso’ below in the search bar example.

<ComponentPreview>
  <IcSearchBar
    label="What is your favourite coffee?"
    options={[
      { label: "Espresso", value: "espresso" },
      { label: "Double Espresso", value: "doubleespresso" },
      { label: "Flat White", value: "flatwhite" },
      { label: "Cappuccino", value: "cappuccino" },
      { label: "Americano", value: "americano" },
      { label: "Mocha", value: "mocha" },
    ]}
  />
</ComponentPreview>

### Search bar with suggested options

Use the search bar with suggested options to provide search term suggestions in the drop-list. Use this type of search when you don't want to show actual search results, but instead possible or common search terms that will form the search query when submitted.

Users may select a suggested option or they may continue with searching on the term they have entered.

When displaying suggested options, order them in the most helpful way and use the same formatting for each option presented.

### Search bar only

Use a search bar without a drop-list when you want to handle the search operation yourself. Use this to capture a search term and then direct a user to a custom search results page for the input query.

<ComponentPreview>
  <IcSearchBar label="What is your favourite coffee?" />
</ComponentPreview>

## When not to use

Don't use a search bar with search results if you are likely to need additional filters and advanced search settings. It's better to use a search bar with a custom search results page in this case.

Take care when using a search bar with search results when you have large, complex data sets that take time to load. This can cause excessive loading times and it's best to use a custom search results page to handle and display large numbers of results.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={searchBarFig1}
    imageAlt="A search bar with a large number of results causing long scroll length."
    state="bad"
    caption="Avoid showing long lists of results in a search bar's search results."
  />
</DoubleDoDontCaution>

Don't use a search bar on its own, or a search bar with suggested options, if you don't have a method of displaying the results. Always include a search results page if you aren't using the search bar with search results.

## Sizing

Use the default and small size options for search bars to match their size to other components in your app.

## Content

Use clear and specific placeholder text that informs the user on the context and scope of the search.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={searchBarFig3}
    imageAlt="An example of helpful search placeholder text outlining 'search coffee drinks'."
    state="good"
    caption="Use helpful placeholder text within a search bar to describe what the user is searching for."
  />
  <DoDontCaution
    imageSrc={searchBarFig4}
    imageAlt="An example of unhelpful search placeholder text outlining 'coffee'."
    state="bad"
    caption="Don't use generic placeholder text."
  />
</DoubleDoDontCaution>

For searches that take time to load results or suggestions, display the loading state whilst the search is loading. Use the empty state for searches that have no results or suggested options.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={searchBarFig5}
    imageAlt="A search bar with an entered search term that displays a loading indicator whilst the search is occurring."
    state="good"
    caption="Use the loading state whilst results load."
  />
  <DoDontCaution
    imageSrc={searchBarFig6}
    imageAlt="A search bar with an entered search term that has no search results."
    state="good"
    caption="Tell the user when their search term yields no results."
  />
</DoubleDoDontCaution>

---

# Skeleton

URL: https://design.sis.gov.uk/components/skeleton
Status: BETA
Subtitle: Skeleton loading states are representations of the shape of content that help inform users that a specific type of component is loading.


import skeletonFig1 from "./images/fig-1-use-the-variant-which-outlines-the-whole-components.png";
import skeletonFig2 from "./images/fig-2-do-not-use-skeletons-within-skeletons.png";
import skeletonFig3 from "./images/fig-3-use-the-correct-text-style-to-match-the-size-of-the-text.png";
import skeletonFig4 from "./images/fig-4-do-not-use-the-same-text-variant-for-different-text-sizes.png";
import skeletonFig5 from "./images/fig-5-use-a-separate-text-skeleton-component-for-each-line.png";
import skeletonFig6 from "./images/fig-6-do-not-scale-the-text-skeleton-to-the-full-height-of-a-body-of-text.png";

## Introduction

Skeleton has three variants:

- Circle
- Text
- Rectangle

<ComponentPreview>
  <ic-skeleton />
</ComponentPreview>

### Circle

Use the circle variant as a placeholder for any circular components, like avatars and circular logos.

### Text

Use the text variant as a placeholder for any text or labels that sit outside of any component. This applies to helper text for input labels, headings and body text.

### Rectangle

Use the rectangle variant as a placeholder for any other components. This includes buttons, chips and tags, input fields and cards.

## When to use

Use skeleton variants as a placeholder for when a full page or individual components are loading. Don't nest skeletons. If a label or text is wrapped inside a component, for example in cards, only use the skeleton variant of the component that wraps the other components.

<DoDontCaution
  imageSrc={skeletonFig1}
  imageAlt="An image which shows the card component and the rectangle skeleton variant used to replace the full card width and height while it’s loading."
  state="good"
  caption="Use skeletons to outline the whole component."
/>

<DoDontCaution
  imageSrc={skeletonFig2}
  imageAlt="An image showing a card component’s skeleton state including text skeleton variants used within another rectangle skeleton variant."
  state="bad"
  caption="Don't use skeletons within skeletons."
/>

### Sizing

Set the height and width of the skeleton to match the size of the component that will replace it once loaded.

When using the text variant, set the skeleton’s height to match the text style of the text that will replace it once loaded.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={skeletonFig3}
    imageAlt="A graphic of a list of text styles side by side with the correct text variant height."
    state="good"
    caption="Use the correct text style to match the size of the text."
  />
  <DoDontCaution
    imageSrc={skeletonFig4}
    imageAlt="A graphic of a list of different text styles side by side with a list of skeleton components of the same height."
    state="bad"
    caption="Don't use the same skeleton size for different text sizes."
  />
</DoubleDoDontCaution>

Don't replace large bodies of texts with one single large text skeleton. Replace each line with a separate text skeleton.

<DoDontCaution
  imageSrc={skeletonFig5}
  imageAlt="An image showing multiple lines of text being replaced by multiple text skeleton components for each line of text."
  state="good"
  caption="Use a separate text skeleton component for each line."
/>

<DoDontCaution
  imageSrc={skeletonFig6}
  imageAlt="An image showing multiple lines of text being incorrectly replaced by one large custom text skeleton."
  state="bad"
  caption="Don't scale the text skeleton to the full height of a body of text."
/>

## When not to use

Avoid displaying skeleton placeholders when something will load in 300ms or under to avoid flashing on the page. If needed, manually specify a 300ms delay, after which the skeleton component is displayed.

Don’t use skeleton loading states when the loading progress can be calculated. Instead, use [determinate loading indicators](/components/loading-indicator).

Don’t use skeleton components when the general structure of the page that will replace skeleton variants is not known. Instead, use [indeterminate loading indicators](/components/loading-indicator).

## Related components

- [Loading indicators](/components/loading-indicator)

---

# Stepper

URL: https://design.sis.gov.uk/components/stepper
Status: BETA
Subtitle: A stepper is a visual representation of a user's progress through a predefined set of steps in a linear process.


import { IcStepper, IcStep } from "@ukic/react";
import stepperFig1 from "./images/fig-1-stepper-component-being-used-to-describe-the-steps-of-a-multistep-form.png";
import stepperFig2 from "./images/fig-2-use-concise-labels-within-a-stepper.png";
import stepperFig3 from "./images/fig-3-dont-use-long-labels-within-a-stepper.png";
import stepperFig4 from "./images/fig-4-a-stepper-accompanied-by-a-page-title-showing-how-the-stepper-should-be-implemented.png";
import stepperFig5 from "./images/fig-5-dont-use-a-compact-stepper-if-the-page-content-does-not-include-the-step-name-in-a-heading.png";
import stepperFig6 from "./images/fig-6-a-stepper-that-is-leftaligned-at-the-top-of-the-page-showing-how-the-stepper-should-be-implemented.png";
import stepperFig7 from "./images/fig-7-a-stepper-that-is-centrealigned-at-the-top-of-the-page-showing-how-the-stepper-should-not-be-implemented.png";
import stepperFig8 from "./images/fig-8-use-compact-stepper-when-there-is-not-much-room.png";

## Introduction

An example of the stepper component.

<ComponentPreview>
  <IcStepper>
    <IcStep stepTitle="Order coffee" stepType="completed" />
    <IcStep stepTitle="Pay for order" stepType="current" />
    <IcStep stepTitle="Collect" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

## Component variants

### Default

Use the default stepper when you have the available space.

### Compact

Use the compact variant for compact layouts or processes with many steps.

## When to use

Use steppers when a multi-step linear process is required. Steps are displayed from left to right and show the direction of movement through the process.

<DoDontCaution
  imageSrc={stepperFig1}
  imageAlt="An image showing a form titled 'Make a coffee' featuring a stepper with four steps, titled 'Take order', 'Make drink', 'Take payment', and 'Finish'. The first step is selected, and the page below shows three input fields and a button labelled 'Confirm order'."
  state="good"
  caption="Stepper component being used to describe the steps of a multi-step form."
/>

Always indicate which step the user is currently on. This gives a sense of control and describes their position in the process in relation to where they have been, as well as how much they have left to do.

## When not to use

Don't use the stepper to indicate a non-linear process where steps can be completed in any order. Linear processes require each step to be completed in order.

## Interaction behaviour

### Steps

Steps are single elements that together form the stepper. Steps have four different states:

- Active: Indicates that the step is available but not yet completed by the user. This step type is rendered as current if displayed in the compact stepper.

- Current: Shows the step the user is currently on.

- Completed: Shows a previous step that has been completed by the user.

- Disabled: Shows a step that is unavailable. This could be because it's conditional on another step. If a step is always unavailable, then it should not be included in the stepper when it's loaded.

<ComponentPreview>
  <IcStepper>
    <IcStep stepTitle="Add details" stepType="completed" />
    <IcStep stepTitle="Customer" stepType="current" />
    <IcStep stepTitle="Upload" />
    <IcStep stepTitle="Submit" stepType="disabled" />
  </IcStepper>
</ComponentPreview>

## Layout and placement

Always align steppers to the left and place them above the main body content of the page.

<DoDontCaution
  imageSrc={stepperFig6}
  imageAlt="An image showing a stepper with four steps, titled 'Warm kettle', 'Add milk', 'Pour water', and 'Drink coffee'. The first step is selected, and the stepper is accurately placed at the top-left of a page."
  state="good"
  caption="A stepper that is left-aligned at the top of the page, showing how the stepper should be implemented."
/>

<DoDontCaution
  imageSrc={stepperFig7}
  imageAlt="An image showing a stepper with four steps, titled 'Warm kettle', 'Add milk’, 'Pour water’, and 'Drink coffee'. The first step is selected, and the stepper is incorrectly placed in the centre of a page."
  state="bad"
  caption="A stepper that is centre-aligned at the top of the page, showing how the stepper should not be implemented."
/>

When a stepper is too large to fit comfortably within its container, it will switch to use the compact stepper. This shows the current step along with its status, as well as the next step in the process.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={stepperFig8}
    imageAlt="A compact stepper showing the current step labelled 'warm kettle' and the next step label 'add milk'."
    state="good"
    caption="The compact stepper shows the current step as well as the next step in the process."
  />
</DoubleDoDontCaution>

## Content

### Labels

Use the step title to describe each step concisely in one or two words. Avoid using lengthy step titles.

<DoDontCaution
  imageSrc={stepperFig2}
  imageAlt="An image showing a stepper with four steps, labelled 'Take order', 'make drink', 'Take payment', and 'Finish’. The first step is selected."
  state="good"
  caption="Use concise labels within a stepper."
/>

<DoDontCaution
  imageSrc={stepperFig3}
  imageAlt="An image showing a stepper with four steps, each with very long labels. The first step is selected."
  state="caution"
  caption="Avoid using long labels within a stepper."
/>

When a stepper is used, always use page titles and section headings on the page content itself.

<DoDontCaution
  imageSrc={stepperFig4}
  imageAlt="An image showing a form titled 'Make a coffee' featuring a stepper with four steps, labelled 'Take order', 'Make drink', 'Take payment', and 'Finish’. The first step, 'Take order', is selected, and the page below shows three input fields and a button labelled 'Confirm order'."
  state="good"
  caption="A stepper accompanied by a page title, showing how the stepper should be implemented."
/>

Hide step information only if the step content is clearly labelled itself. Do not omit step labels if no headings are provided in the step content.

<DoDontCaution
  imageSrc={stepperFig5}
  imageAlt="An image showing a form without a heading featuring a stepper with 4 steps, each without a label. The first unlabelled step is selected, and the page below shows three input fields and a button labelled ‘Confirm order’."
  state="bad"
  caption="Don’t use a stepper without step labels if the page content does not include the step name in a heading."
/>

Set a step status to show whether the step is required or optional in the step's subtitle. Override the step subtitle text to provide a custom message.

### Validation

Validate each step as the user moves through the process. Use the standard error handling approach to display inline [alert](/components/alert) and error messages if the user attempts to proceed to the next step without first completing the current step correctly.

---

# Switch

URL: https://design.sis.gov.uk/components/switch
Status: BETA
Subtitle: Switches are used to quickly toggle an option on or off.


import { IcSwitch, IcTypography } from "@ukic/react";
import switchVid1 from "./images/anim-1-avoid-change-a-switch-state-from-a-different-trigger.mp4";
import switchVid2 from "./images/anim-2-dont-change-switch-label-at-same-time-as-switch-state.mp4";
import switchFig1 from "./images/fig-1-make-sure-switch-changes-take-effect-immediately.png";
import switchFig2 from "./images/fig-2-dont-use-a-separate-trigger-to-make-switch-changes-take-effect.png";
import switchFig3 from "./images/fig-3-dont-use-a-switch-for-yes-no-answers.png";
import switchFig4 from "./images/fig-4-give-switches-clear-labels.png";
import switchFig5 from "./images/fig-5-dont-give-switches-ambiguous-labels.png";
import switchFig6 from "./images/fig-6-dont-mix-switches-with-icons-with-switches-without-icons.png";

## Introduction

An example of the switch component.

<ComponentPreview>
  <IcSwitch label="Coffee preferences" />
</ComponentPreview>

## When to use

Use switches to turn a single option 'on' or 'off' and when you want the selection to take immediate effect.

Use switches when there is an obvious default value: either 'on' or 'off'.

## When not to use

Don't use a switch when the selection of the option should take effect after a separate trigger such as a submit button. Instead, use a single [checkbox](/components/checkbox).

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={switchFig1}
    imageAlt="An example settings panel with text that says 'Your changes will take place immediately'. Three switches are displayed for 'notifications', 'don't disturb' and 'night mode'."
    state="good"
    caption="Make sure the change in a switch's state causes immediate effect."
  />
  <DoDontCaution
    imageSrc={switchFig2}
    imageAlt="An example settings panel with text that says 'Remember to save your changes'. Three switches are displayed for 'notifications', 'don't disturb' and 'night mode'. A button that says 'Save changes' sits below the switches. "
    state="bad"
    caption="Don't use a separate trigger to make the change in state take effect."
  />
</DoubleDoDontCaution>

Switches always have a default state: either 'on' or 'off'. Don't use a switch if there is no default setting. Instead, use checkboxes or two [radio buttons](/components/radio).

Don't use a switch as an input in a form. Use them to instantaneously control a single option.

Don't use a switch for 'yes' or 'no' answers. Use two [radio buttons](/components/radio) instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={switchFig3}
    imageAlt="An example settings panel with a single switch with a heading that says 'Do you want to receive notifications?''. The switch is in the 'on' position and it has a label that says 'Yes'."
    state="bad"
    caption="Don't use a switch for 'yes' or 'no' answers."
  />
</DoubleDoDontCaution>

## Interaction behaviour

Avoid automatically altering a switch's state based on another trigger. A change in a switch's state should always be the user's decision.

<video width="50%" muted controls loop>
  <source src={switchVid1} type="video/mp4" />
</video>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Avoid changing a switch's state without the user’s specific instruction.
</IcTypography>

## Sizing

Use a default sized switch in most scenarios where other default sized components are used.

Use a small sized switch with other small sized components for compact layouts.

## Content

Use clear labels so that it's obvious what the switch will do when in the 'on' or 'off' position. Don't make them neutral or ambiguous. The switch should read 'Label: on' or 'Label: off'.

For example, a switch to turn notifications 'on' or 'off', with a label that says 'Notifications', is understandable when read as 'Notifications: on' and 'Notifications: off'. If the label said 'Turn notifications off', it's ambiguous and more difficult to understand what the 'on' and 'off' position will do.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={switchFig4}
    imageAlt="An example settings panel with a single switch in the 'off' position. It's label says 'Notifications'."
    state="good"
    caption="Give switches labels that make it clear what the switch will do in either the 'on' or 'off' position."
  />
  <DoDontCaution
    imageSrc={switchFig5}
    imageAlt="An example settings panel with a single switch in the 'off' position. It's label says 'Turn notifications off?'."
    state="bad"
    caption="Don't give switches ambiguous labels that makes it hard to understand what the switch will do."
  />
</DoubleDoDontCaution>

Avoid using additional labels that say 'on' or 'off' in the switch label. The position of the switch describes this itself. Changing the label between state changes makes it difficult to understand the current state.

<video width="50%" muted controls loop>
  <source src={switchVid2} type="video/mp4" />
</video>

<IcTypography
  variant="label"
  style={{ marginTop: "-1rem", marginBottom: "1.5rem" }}
>
  Don’t change the switch’s label at the same time as the state changes.
</IcTypography>

Use an icon with a switch label only if it aids the recognition of the option.

Don't group switches with icons with other switches without icons.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={switchFig6}
    imageAlt="An example settings panel with three switches. The first switch is on with a label that says 'Notifications'. The second switch is off with a label that says 'Don't disturb'. The third switch is off with a label that includes a moon icon and says 'Night mode'."
    state="bad"
    caption="Don't mix switches with icons with switches without icons."
  />
</DoubleDoDontCaution>

---

# Tabs

URL: https://design.sis.gov.uk/components/tabs
Status: BETA
Subtitle: Tabs let users navigate between content within the same context. Tabs organise complex layouts by separating content into multiple sections.


import { IcTab, IcTabContext, IcTabGroup, IcTabPanel } from "@ukic/react";
import tabsFig1 from "./images/fig-1-light-tab-bar-example.png";
import tabsFig2 from "./images/fig-2-dark-tab-bar-example.png";
import tabsFig3 from "./images/fig-3-dont-separate-the-tab-container-from-the-tab-bar.png";
import tabsFig4 from "./images/fig-4-compact-tab-presentation.png";
import tabsFig5 from "./images/fig-5-keep-labels-concise.png";
import tabsFig6 from "./images/fig-6-dont-use-long-labels.png";
import tabsFig7 from "./images/fig-7-avoid-using-too-many-tabs.png";
import tabsFig8 from "./images/fig-8-use-clear-icons-for-tabs.png";
import tabsFig9 from "./images/fig-9-dont-use-ambiguous-icons.png";
import tabsFig10 from "./images/fig-10-dont-mix-icon-tabs-with-normal-tabs.png";

## Introduction

An example of the tab component.

<ComponentPreview>
  <IcTabContext>
    <IcTabGroup label="Example tab group">
      <IcTab>Ingredients</IcTab>
      <IcTab>Method</IcTab>
      <IcTab>History</IcTab>
    </IcTabGroup>
    <IcTabPanel>Tab One - Ingredients</IcTabPanel>
    <IcTabPanel>Tab Two - Method</IcTabPanel>
    <IcTabPanel>Tab Three - History</IcTabPanel>
  </IcTabContext>
</ComponentPreview>

## When to use

Use tabs to organise large amounts of related content into different sections and allow people to quickly switch between them. Tabs display one section at a time.

Always consider the amount of content presented on one page and decide if it can be reduced or split across multiple pages to make it more digestible instead of placing into tabs.

## When not to use

Don’t use tabs if the order of the content is important, such as in a checkout process. Instead use a [stepper](/components/stepper) to order the sections into a linear process.

Don’t use tabs if the content on different tabs needs to be compared.

## Colour

Use a dark tab bar on light backgrounds and use a light tab bar on darker backgrounds.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tabsFig1}
    imageAlt="A recipe site showing a recipe titled ‘Hazelnut macchiato recipe’. The recipe sits on a white background and has a dark tab bar with two tabs for ‘Ingredients’ and ‘Method’."
    state="good"
    caption="Use a dark tab bar on light backgrounds."
  />
  <DoDontCaution
    imageSrc={tabsFig2}
    imageAlt="A recipe site showing a recipe titled ‘Hazelnut macchiato recipe’. The recipe sits on a dark blue background and has a light tab bar with two tabs for ‘Ingredients’ and ‘Method’."
    state="good"
    caption="Use a light tab bar on dark backgrounds."
  />
</DoubleDoDontCaution>

## Layout and placement

Always place tabs directly above the content container that they control.

Don’t position tabs so that they are unconnected from the content that belongs to them.

<DoDontCaution
  imageSrc={tabsFig3}
  imageAlt="A recipe site showing a page titled ‘Hazelnut macchiato recipe’. The page title has a tab bar showing two tabs ‘Ingredients’ and ‘Method’. Between the tab bar and the tab container is a link to ‘our menu’."
  state="bad"
  caption="Don’t separate the tab container from the tab bar."
/>

On smaller screen sizes, tab bars with a large number of tabs will collapse into a compact tab selector instead.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tabsFig4}
    imageAlt="A recipe site showing a page titled ‘Hazelnut macchiato recipe’. The page title has a tab bar showing a series of tabs. Three tabs are viewable on the screen and scroll buttons are displayed in the tab bar indicating that more tabs can be scrolled into view."
    state="good"
    caption="A tab bar showing multiple tabs in a compact layout. Scroll controls are added to navigate through the tab bar."
  />
</DoubleDoDontCaution>

## Content

### Labels

Keep labels short and informative so that the tab’s content is clear. Tab labels always display on one line, so keeping them short means that more tabs can be displayed if required.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tabsFig5}
    imageAlt="A recipe page showing a tab bar with two tabs labelled ‘Ingredients’ and ‘Method’."
    state="good"
    caption="Use concise labels on tabs."
  />
  <DoDontCaution
    imageSrc={tabsFig6}
    imageAlt="A recipe page showing a tab bar with two tabs labelled ‘This is what goes in it’ and 'How it's made’."
    state="bad"
    caption="Don’t use long labels."
  />
</DoubleDoDontCaution>

### Order of tabs

Arrange the tabs in an order that makes the most sense in context. Always show the first tab by default when the page loads. Place the most important content in the first tab.

Avoid using six or more tabs as this may add too much complexity to the page. Consider if content can be reduced or split across multiple pages instead.

<DoDontCaution
  imageSrc={tabsFig7}
  imageAlt="A recipe page with a tab bar with six tabs."
  state="caution"
  caption="Avoid using too many tabs as it can complicate the page."
/>

### Icons

Add icons to tab labels to provide an extra visual cue to the tab’s content. Ensure that icons are relevant to the tab content.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tabsFig8}
    imageAlt="A tab bar with two icon tabs labelled ‘Ingredients’ and ‘Method’. The ingredients tab has a fridge icon and the method tab has a checklist icon."
    state="good"
    caption="Use clear icons on tab labels."
  />
  <DoDontCaution
    imageSrc={tabsFig9}
    imageAlt="A tab bar with two icon tabs labelled ‘Ingredients’ and ‘Method’. Both icons are difficult to understand as they don't clearly match the label."
    state="bad"
    caption="Don’t use ambiguous icons."
  />
</DoubleDoDontCaution>

Don’t use icons for some tabs and not others. Always apply icons to all tabs if using them.

<DoDontCaution
  imageSrc={tabsFig10}
  imageAlt=" A recipe page that shows a tab bar with three tabs. Only one tab out of the three uses an icon."
  state="bad"
  caption="Don’t mix normal tabs with icon tabs. Use either all normal tabs or all icon tabs."
/>

## Accessibility considerations

When deciding to use tabs, consider whether this component gives users the most understandable and usable way of navigating between the content.

Consider laying out your content into a single page with anchor links to move between sections.

Also consider using other containers that are more suited to responsive behaviour such as accordions, which use a single column.

---

# Top navigation

URL: https://design.sis.gov.uk/components/top-navigation
Status: BETA
Subtitle: Top navigation sits across the top of the page. It includes the app name, search bar, main navigation and secondary links.


import {
  IcTopNavigation,
  IcSearchBar,
  IcNavigationItem,
  IcNavigationGroup,
} from "@ukic/react";
import topNavFig1 from "./images/fig-1-dont-use-both-side-and-top-navigation.png";
import topNavFig2 from "./images/fig-2-show-status-version-and-secondary-links.png";
import topNavFig3 from "./images/fig-3-top-nav-with-megamenu.png";
import topNavFig4 from "./images/fig-4-use-drawer-navigation-on-small-screens.png";
import topNavFig5 from "./images/fig-5-personality-colours.png";
import topNavFig6 from "./images/fig-6-dont-position-top-nav-not-full-width.png";
import topNavFig7 from "./images/fig-7-use-full-width-alignment.png";
import topNavFig8 from "./images/fig-8-use-centre-alignment.png";
import topNavFig9 from "./images/fig-9-dont-use-long-labels.png";
import topNavFig10 from "./images/fig-10-megamenu-with-too-many-links.png";

## Component variants

Top navigation has two variants: standard and one with a mega-menu.

### Standard

Use a standard top navigation for apps with eight or fewer navigation options.

<ComponentPreview>
  <IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </svg>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationItem
      slot="navigation"
      label="Get started"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Accessibility"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Styles"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
    <IcNavigationItem
      slot="navigation"
      label="Components"
      href="#"
      onClick={(e) => e.preventDefault()}
      selected="true"
    />
    <IcNavigationItem
      slot="navigation"
      label="Patterns"
      href="#"
      onClick={(e) => e.preventDefault()}
    />
  </IcTopNavigation>
</ComponentPreview>

### With mega-menu

Use a top navigation with mega-menu for apps with more than eight navigation options, or options that can be grouped into categories. The main link groups are displayed in the top navigation and open a mega-menu when hovered over or focused.

<ComponentPreview style={{ zIndex: "1" }}>
  <IcTopNavigation appTitle="ICDS" status="alpha" version="v0.0.7">
    <svg
      slot="app-icon"
      xmlns="http://www.w3.org/2000/svg"
      height="24"
      viewBox="0 0 24 24"
      width="24"
      fill="#000000"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z" />
    </svg>
    <IcSearchBar slot="search" placeholder="Search" label="Search" />
    <IcNavigationGroup slot="navigation" label="Navigation group">
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
      <IcNavigationItem label="Navigation" href="#" />
    </IcNavigationGroup>
    <IcNavigationGroup slot="navigation" label="Second navigation group">
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
      <IcNavigationItem label="Second navigation" href="#" />
    </IcNavigationGroup>
  </IcTopNavigation>
</ComponentPreview>

## When to use

Use the top navigation component for intranet-style and content-heavy apps. Use it for apps with complex page structures where every page should be accessible from any other page using the mega-menu.

Use top navigation alongside additional components like [page headers](/components/page-header) to create a variety of different [layout](/styles/layout-spacing) and navigation styles.

## When not to use

For apps with a small number of pages, use [side navigation](/components/side-navigation) as it's better suited for providing quick access and maximising the screen space for page content.

Use either top navigation or side navigation. Don't use both at the same time.

<DoDontCaution
  imageSrc={topNavFig1}
  imageAlt="An example app that shows a top navigation and side navigation used on the same page."
  state="bad"
  caption="Don't use both top navigation and side navigation at the same time."
/>

## Optional elements

### Search bar

Include an optional [search bar](/components/search-bar) to provide search functionality on every page in the app.

### Secondary links

Include secondary links or actions that appear on the right-hand side of the top navigation. Use these for global utilities like application settings, or as links to other related sites.

### App status and version

Use the title adornment and app version to display the app's info in the top navigation.

<DoDontCaution
  imageSrc={topNavFig2}
  imageAlt="An example of top navigation with a search bar included as well as secondary links and app status and version information."
  state="good"
  caption="Top navigation with search bar, secondary links and app status and version."
/>

## Interaction behaviour

When using a top navigation with mega-menu, the menu is displayed when hovering over, or focusing on, the main navigation groups.

<DoDontCaution
  imageSrc={topNavFig3}
  imageAlt="An example top navigation with mega-menu showing the mega-menu appearing when the user hovers over a navigation group in the top navigation component."
  state="good"
  caption="A mega-menu is displayed when hovering or focusing on the top navigation's main groups."
/>

On smaller screens, both top navigation variants will display a menu button that opens a drawer menu from the right-hand side of the screen. The drawer menu can display lists of single links or grouped links that can be expanded and collapsed.

<DoDontCaution
  imageSrc={topNavFig4}
  imageAlt="An example of top navigation displayed on a smaller screen. It displays a menu button that opens a drawer menu that includes the navigation links."
  state="good"
  caption="Top navigation displayed on smaller screens uses a drawer menu to display its navigation links."
/>

## Colour

The top navigation uses the app's [theme colour](/styles/colour/#theme) as the background and automatically sets the foreground colour to ensure accessible contrast ratios.

Change the app's theme colour to change the background colour of the top navigation and help distinguish your app from others your users may use.

<DoDontCaution
  imageSrc={topNavFig5}
  imageAlt="Six examples of top navigation components using different theme colours."
  state="good"
  caption="Examples of top navigation using different theme colours."
/>

## Sizing

Always position the top navigation at the top of the screen and make sure that it horizontally fills the browser window.

<DoDontCaution
  imageSrc={topNavFig6}
  imageAlt="An example app with top navigation that does not horizontally fill the browser window."
  state="bad"
  caption="Don't position the top navigation so that it does not horizontally fill the browser window."
/>

## Layout and placement

### Alignment

Align the top navigation's content either full width or centred.

Use full width alignment to position the top navigation content to the left and right of the browser window.

<DoDontCaution
  imageSrc={topNavFig7}
  imageAlt="An example top navigation that is aligned full width. The app name and main navigation is aligned to the left-hand side of the browser window and the secondary links and search bar is aligned to the right."
  state="good"
  caption="Use full width alignment to position the top navigation content to the left and right of the browser window."
/>

Use centre alignment to position the top navigation content in line with other page content.

<DoDontCaution
  imageSrc={topNavFig8}
  imageAlt="An example top navigation with its content aligned to centre. The top navigation content aligns with the page margins used for the rest of the page content."
  state="good"
  caption="Use centre alignment to position the top navigation content in line with other page content."
/>

## Content

### Labels and icons

Follow the [content style guidelines](/styles/content-style) for all navigation option labels as well as each option group label.

Follow the [icon style guidelines](/styles/icons) when selecting icons for menu options or secondary links.

### Navigation options

Make sure to keep navigation option labels concise, as they may not all fit within the top navigation on all screen sizes.

For the standard variant, don't use more than eight links as this may not display correctly.

<DoDontCaution
  imageSrc={topNavFig9}
  imageAlt="An example top navigation with eight links with long labels. The links don't fit horizontally within the top navigation."
  state="bad"
  caption="Don't use lengthy navigation option labels as they may not fit on all screen sizes."
/>

### Mega-menu

Include up to five columns of navigation links in the mega-menu and aim to keep the number of links in each column to six or fewer.

<DoDontCaution
  imageSrc={topNavFig10}
  imageAlt="An example top navigation with mega-menu that shows seven columns of links, with each column containing eight links."
  state="caution"
  caption="Avoid using a mega-menu with more than five columns of links, and avoid using more than six links in each group."
/>

---

# Tooltip

URL: https://design.sis.gov.uk/components/tooltip
Status: BETA
Subtitle: Tooltips provide helpful information when the cursor hovers over an element or when focus is applied.


import { IcTooltip, IcButton } from "@ukic/react";
import tooltipsFig1 from "./images/fig-1-tooltips-provide-text-alternatives.png";
import tooltipsFig2 from "./images/fig-2-dont-describe-unrelated-things.png";
import tooltipsFig3 from "./images/fig-3-keep-the-tooltip-visible-when-cursor-is-over-tooltip.png";
import tooltipsFig4 from "./images/fig-4-use-multiple-lines-to-show-longer-messages.png";
import tooltipsFig5 from "./images/fig-5-avoid-position-tooltips-so-they-obscure-other-content.png";
import tooltipsFig6 from "./images/fig-6-dont-include-interactive-content-in-a-tooltip.png";

## Introduction

A tooltip wraps around a component and displays a message when the component is hovered over.

Below is an example of the tooltip component on a button.

<ComponentPreview>
  <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
    <IcTooltip
      label="Add Americano to favourites"
      target="test-button-0"
      placement="top"
    >
      <IcButton id="test-button-0" aria-describedby="ic-tooltip-test-button-0">
        Add
      </IcButton>
    </IcTooltip>
    <IcTooltip
      label="Remove Americano from favourites"
      target="test-button-1"
      placement="bottom"
    >
      <IcButton id="test-button-1" aria-describedby="ic-tooltip-test-button-1">
        Remove
      </IcButton>
    </IcTooltip>
  </div>
</ComponentPreview>

## When to use

When interacting with an element, use a tooltip to provide additional and helpful information.

Always use tooltips on icon buttons to provide a textual alternative.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tooltipsFig1}
    imageAlt="A focused icon button displaying a tooltip that says 'Search'."
    state="good"
    caption="Use tooltips to provide a text alternative to icon buttons."
  />
</DoubleDoDontCaution>

## When not to use

Don't use tooltips to provide information relating to anything other than the element the tooltip is attached to.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tooltipsFig2}
    imageAlt="Three icon buttons with a cursor hovering over the search icon button. A tooltip is displayed that says 'Settings, inbox and search'."
    state="bad"
    caption="Don't use tooltips to contain information regarding another element."
  />
</DoubleDoDontCaution>

Don't use tooltips to provide vital information to completing a task. Instead, include vital information on the page itself.

Don't use tooltips if its content is unnecessary. Not every element needs to have a tooltip.

## Interaction behaviour

Tooltips are triggered by hovering over its associated element, or by focusing on it. Make sure the tooltip is displayed the whole time the associated element is focused or hovered over.

Moving the pointer over the tooltip's content maintains the tooltip visibility even if the pointer has moved out of the associated element's area.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tooltipsFig3}
    imageAlt="A button showing a tooltip with the cursor hovering over the button, and a second button showing a tooltip with the cursor hovering over the tooltip content."
    state="good"
    caption="Tooltips display when hovering over the triggering element or the tooltip itself."
  />
</DoubleDoDontCaution>

## Sizing

Set the width of a tooltip to contain the content. Adhere to readable line lengths when setting tooltip widths, and wrap content onto multiple lines if necessary.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tooltipsFig4}
    imageAlt="Three icon buttons and a tooltip displayed. The tooltip says ‘Search for drinks, recipes and pairing suggestions’ and wraps onto two lines."
    state="good"
    caption="Size the tooltip so that its content adheres to readable line lengths."
  />
</DoubleDoDontCaution>

## Layout and placement

Avoid positioning tooltips so that they obscure other content. Use the directional options to place the tooltip on different sides of the associated element.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tooltipsFig5}
    imageAlt="A set of icon buttons that are obscured by a tooltip that is displayed."
    state="caution"
    caption="Avoid positioning tooltips so that they obscure other content."
  />
</DoubleDoDontCaution>

## Content

Use short, simple sentences within a tooltip. Don't provide more than one sentence in a tooltip. If a lot of information is required in a tooltip, consider placing it on the page content itself.

Include an icon on a tooltip if it helps to provide additional meaning, but don't use icons if they don't add anything.

Don't include links or other interactive content within a tooltip. If an interaction is useful, place it within the page content.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={tooltipsFig6}
    imageAlt="A tooltip that says 'For advanced search click here' where the word 'here' is a link."
    state="bad"
    caption="Don't use interactive content within a tooltip."
  />
</DoubleDoDontCaution>

---

# Cookies Policy

URL: https://design.sis.gov.uk/icds/cookies-policy
Subtitle: Cookies Policy for the Intelligence Community Design System.


import InlineCookiesManager from "../../static/components/InlineCookiesManager";
import CookiesData from "../../static/components/CookiesData";

export const cookiesHeaders = ["Provider", "Domain", "Description", "Cookies"];
export const essentialCookies = [
  {
    provider: "design.sis.gov.uk",
    domain: "design.sis.gov.uk",
    desc: "This cookie records whether or not the cookie notification pop-up has been acknowledged by the user, including whether or not you permit us to use Google Analytics (GA).",
    cookies: "ICDSPREF",
  },
  {
    provider: "Google Analytics",
    domain: "sis.gov.uk",
    desc: "These cookies are generated from our parent site, sis.gov.uk. These cookies are used to collect essential performance data so that we can review performance of the website, including aspects such as number of visitors and which pages are most popular.",
    cookies: "_ga, _gid, _gcl_au",
  },
  {
    provider: "Google Doubleclick",
    domain: "sis.gov.uk",
    desc: "These cookies are used to help us to monitor which digital advertising channels are most effective. By recording which job adverts are generating the most interest, we are able to make better choices about where to advertise.",
    cookies: "APISID, SSID, NID, PREF, drt, SID, SAPISID, id, HSID",
  },
  {
    provider: "OneTrust",
    domain: "sis.gov.uk",
    desc: "These cookies are generated from our parent site, sis.gov.uk. These cookies record whether or not the cookie notification pop-up that appears on our parent site has been acknowledged by the user and records whether consent for the cookies have been given.",
    cookies: "OptanonConsent, OptanonAlertBoxClosed",
  },
  {
    provider: "Cloudflare",
    domain: "sis.gov.uk",
    desc: "This cookie is generated from our parent site, sis.gov.uk. It helps manage incoming traffic to our parent site and allows for better visibility on the origin of a particular request.",
    cookies: "_cfruid",
  },
];
export const optionalCookies = [
  {
    provider: "Google Analytics",
    domain: "design.sis.gov.uk",
    desc: "These cookies are used to collect essential performance data so that we can review performance of the website, including aspects such as number of visitors and which pages are most popular.",
    cookies: "_ga, _gat",
  },
];

## About cookies

A cookie is a file stored on your device that contains an identifier (usually a string of letters and numbers) when you access a website. When you visit the same website again, the cookies stored on your device are accessed by code on the website. This means that the website can recognise the device being used and provide useful features, such as remembering your preferences or keeping you logged in.

Cookies may be either 'persistent cookies' or 'session cookies'. A persistent cookie will be stored by a web browser and will remain valid until its set expiry date, unless deleted by the user before the expiry date. A session cookie, on the other hand, will expire at the end of the user session, when the web browser is closed.

Cookies that are set by the website owner are called 'first party cookies'. Cookies that are set by another platform or service are called 'third party cookies'. These tend to be used for additional services, such as advertising or analytics.

Cookies do not typically contain any information that personally identifies a user, but personal information that we store about you may be linked to the information stored in and obtained from cookies.

We use cookies on this website to help improve the performance of our digital advertising and to collect basic data about how the website is used so that we can make decisions about how to improve it.

## Summary of cookies used by this website

### Essential cookies

Essential cookies do things like remember the notifications you’ve seen so we don't show them to you again, and to adhere to your cookie preferences. They are always present and help us host the website.

<CookiesData
  headers={cookiesHeaders}
  data={essentialCookies}
  caption="Essential Cookies Table"
/>

## Manage your cookie preferences

<InlineCookiesManager />
<br />
<br />

We use optional cookies from Google Analytics (GA) to collect data that we use to improve your experience of our website. We do this to help make sure the site is meeting the needs of its users and to help us make improvements.

For more information, please read [Google's overview of privacy and safeguarding data](https://support.google.com/analytics/answer/6004245), and should you wish, you can [opt-out of Google Analytics cookies](https://tools.google.com/dlpage/gaoptout).

<CookiesData
  headers={cookiesHeaders}
  data={optionalCookies}
  caption="Optional Cookies Table"
/>

## Limitations and amendments

This statement only covers the Design System website at design.sis.gov.uk. This statement does not cover third party websites to which we may link. It does not cover the main SIS website.

## Changes to this notice

We may change this privacy notice. When we make changes to this notice, the 'last updated' date at the bottom of this page will also change. Any changes to this privacy notice will apply to you and your data immediately. If these changes affect how your personal data is processed, SIS will take reasonable steps to make sure you know.

---

# Design principles

URL: https://design.sis.gov.uk/get-started/design-principles
Subtitle: Follow our community design principles.


## Introduction

Design principles should be referred to throughout the whole design process to question whether design decisions uphold the principles or break them.

## Inclusivity by design

The Design System's contents, components, patterns and processes should be able to be used by everyone equally. This means addressing accessibility and context of use as well as personal preference.

## Consistency through re-use

We use re-usable patterns and components to drive consistency through the use of familiar and intuitive design.

## Mission driven

We build by listening to the Intelligence Community in order to deliver their specific needs.

## Research first

We make decisions based on data and research, not opinions.

## Flexible, adaptive, powerful

The system should be flexible; it should adapt as necessary; it should empower users.

## Continuously evolving

The system should evolve to stay in alignment with modern practices and adapt to include new content that helps to solve new design problems. Future proofing enables adoption and sustainability.

## Transparent and open

Enable feedback on processes and content from the entire community. Allow contribution from users as well as producers.

## Responsible

We factor environmental sustainability into our decisions, minimising our resource usage and enabling the community to do the same.

---

# Get started

URL: https://design.sis.gov.uk/get-started
Subtitle: Use the Design System and UI Kit to create accessible, usable and consistent apps and services for the United Kingdom Intelligence Community.


import { IcCard } from "@ukic/react";

## Design System and UI Kit

- [Accessibility guidance](/accessibility) to design, build and test apps and services that work for everyone.
- [Style tokens](/styles) to create consistent experiences.
- [Component guidance](/components) to implement accessible, usable and consistent user interfaces (UI).
- [Patterns](/patterns) to help users with intuitive experiences for common user tasks.

### For developers

<IcCard
  heading="Install the UI Kit components"
  message="Install and use the UI Kit component library. Use React or web components to quickly build accessible interfaces."
  href="get-started/install-components"
  clickable
  fullWidth
/>

### For designers

<IcCard
  heading="Figma UI Kit"
  message="Reusable and flexible Figma components used to design, prototype and hand-off designs for apps and digital products."
  href="get-started/figma"
  clickable
  fullWidth
/>

## Contribute

We are expanding the UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you would like to help please [read more on how to contribute](/community).

## Using v1.0 component library

You can still use v1.0 (link available for internal users only). Support will be limited and the library deprecated in the future.

---

# Privacy Policy

URL: https://design.sis.gov.uk/icds/privacy-policy
Subtitle: Privacy Policy for the Intelligence Community Design System.


## Our Privacy Policy

The [Intelligence Community Design System](/) brings together experts and users from across [SIS (also known as MI6)](https://sis.gov.uk), [MI5](https://www.mi5.gov.uk), [GCHQ](https://gchq.gov.uk) and a number of partners. We've open-sourced the Design System to give an insight into what we do, and work with experts across a number of topics.

To do this, we work with contributors who don't work for or with SIS, MI5, GCHQ or our partners. That means we may need to collect some personal data from them.

The Design System is run by SIS, MI5 and GCHQ, but SIS is the responsible entity for the website.

[Read SIS's entry in the Data Protection Public Register for accurate contact details](https://ico.org.uk/ESDWebPages/Entry/ZA455227).

## What data we collect on the Design System

### Contributing on GitHub

If you choose to contribute to the Design System using your GitHub account, you will associate your GitHub identity with us.

When you contribute, the data we might therefore collect includes:

- Your name.
- User profile on GitHub and associated tools and platforms.

If you choose to submit a 'pull request' (code contribution) to the Design System using your GitHub account, you will be asked to sign our Contributor's License Agreement.

Where you provide consent, the data we collect includes:

- Your name.
- Your email address.
- User profile on GitHub and associated tools and platforms.
- Your consent to be contacted (or not) for career opportunities.
- Your consent to be contacted (or not) regarding a token of gratitude.

For more information, [please read GitHub's Privacy Statement](https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement).

## How long we keep your data

We will only keep your personal data for as long as:

- The law requires us to.
- We need for the purposes listed above.

## Providers we use

SIS does not store your personal data we collect on our own services. We use data processors who provide us with:

- Software collaboration platforms when you share research, feedback or make a contribution.
- Web analytics services.

We take all reasonable steps to make sure your data on these platforms is secure. For more information, read GitHub and Google's privacy statements using the links above.

We will not:

- Sell or rent your data to third parties.
- Share your data with third parties for marketing purposes.

We will share your data if we’re required to do so by law &ndash; for example, by court order, or to prevent fraud or other crime.

## Questions and complaints

SIS, along with MI5 and GCHQ, is one of the UK Intelligence Agencies. SIS runs this Design System website.

For full information on the Privacy Policy of each Intelligence Agency, please see the respective page:

- [SIS Privacy Policy](https://www.sis.gov.uk/privacy-policy.html)
- [MI5 Privacy Policy](https://www.mi5.gov.uk/privacy-policy)
- [GCHQ Privacy Policy](https://www.gchq.gov.uk/section/about-this-website/privacy)

## Limitations and amendments

This statement only covers the Design System website at design.sis.gov.uk. This statement does not cover third party websites to which we may link. It does not cover the main SIS website.

## Changes to this notice

We may change this privacy notice. When we make changes to this notice, the 'last updated' date at the bottom of this page will also change. Any changes to this privacy notice will apply to you and your data immediately. If these changes affect how your personal data is processed, SIS will take reasonable steps to make sure you know.

---

# Form layout

URL: https://design.sis.gov.uk/patterns/form-layout
Subtitle: A simple layout for a form helps to make it easier to complete and allows users to focus on the content of the questions.


import { IcAlert } from "@ukic/react";
import basicFormGood from "./images/basic-form-good.png";
import basicFormBad from "./images/basic-form-bad.png";
import basicFormBad2 from "./images/basic-form-bad-2.png";
import stepper1 from "./images/stepper1.png";
import stepper2 from "./images/stepper2.png";

<IcAlert
  heading="Pattern in development"
  message="We are refreshing this pattern to include new guidance and code."
  variant="info"
/>

## Basic form

This form layout involves displaying multiple form fields on one page.

Try to limit the number of fields on a page to about five or six.

Always keep the layout of the form simple by preferring a single column of fields.

Form fields should match the size of the answer you expect to each question &ndash; such as a short, single-line text field for a first name, or a long, multi-line text field for a paragraph.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={basicFormGood}
    imageAlt="A good example of a form with fields that match the size of the expected input and are displayed in a single column."
    state="good"
    caption="Use fields that reflect the size of the expected input to make it easier to understand what each question is asking for. The whole width of the page does not need to be filled."
  />
  <DoDontCaution
    imageSrc={basicFormBad}
    imageAlt="A bad example of a form with fields that take up the whole width of the screen instead of matching the size of the expected input. The form fields are also displayed in multiple columns."
    state="bad"
    caption="Don't use multiple columns as this can affect readability and make it more likely that users will miss something."
  />
</DoubleDoDontCaution>

Align form fields to the left for a clean and consistent layout for your application.

<DoDontCaution
  imageSrc={basicFormBad2}
  imageAlt="A bad example of a form that is centre-aligned, with a left-aligned page header."
  state="bad"
  caption="Don't align your form to the centre of the page."
/>

## Multi-page form

Use a stepper (which is built into the [page header](/components/page-header) component) to separate a long form out into multiple pages.

Use multiple pages if your form is much longer than about five or six fields.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={stepper1}
    imageAlt="A form, with four fields, and a stepper indicating the current step."
    state="none"
    caption="A stepper can split up complex forms to let you add inline guidance and design simpler layouts."
  />
  <DoDontCaution
    imageSrc={stepper2}
    imageAlt="A form, with two fields, and a stepper indicating the current, completed, and invalid steps."
    state="none"
    caption="A stepper can help you manage complex validation and intermediate (as-you-go) saving of forms."
  />
</DoubleDoDontCaution>

---

# App errors

URL: https://design.sis.gov.uk/patterns/app-errors
Subtitle: App errors are shown when a problem occurs that the user has no control over.


import { IcAlert, IcTypography, IcLink } from "@ukic/react";

<IcAlert
  heading="Pattern in development"
  message="We are refreshing this pattern to include new guidance and code."
  variant="info"
/>

## When to use

Display an app error when:

- When you need to make users aware that something’s not working as expected.
- When a system is partially functioning.
- When data sources are unavailable.
- Where an incoming data source SLA has been breached.
- When an app is unavailable for scheduled system maintenance.

## When not to use

- Don't use app errors for [form validation feedback](/patterns/form-validation).
- Don't use a [toast](/components/toast) for errors because a user might not notice the error message.

## Usage

App errors should bring sufficient context to allow the user to understand whether they can still use the app, and they should contain resolution information.

If possible, manage users' expectations on how long something will take to fix and offer workarounds (if available).

Use words that describe the cause of the error and, where possible, give the user a way to resolve it.

### Alerts

Use an alert if only part of an app (such as an asynchronous component) has a problem.

<ComponentPreview icds>
  <IcAlert
    heading="Something went wrong"
    message="The app couldn't connect to the server to download the latest information. Please check your connection or contact your local IT Service Desk."
    variant="error"
  />
</ComponentPreview>

### Dialogs and modals

Use dialogs for critical problems where you need to preserve information on the page.

For example, for a network problem when trying to save information and to prevent interaction with the rest of the app.

### Full page

Use full-page errors for the most critical problems, especially those that can't be resolved.

For example, use a full-page error message when content is missing or when the app fails to load.

<ComponentPreview noPadding left>
  <div style={{ padding: "2.25rem" }}>
    <IcTypography variant="h1" component="h3" applyVerticalMargins>
      LATTE STREET is unavailable
    </IcTypography>
    <IcTypography variant="body" applyVerticalMargins>
      This app is currently unavailable whilst we carry out an update.
    </IcTypography>
    <IcTypography variant="caption">
      Please check the <IcLink href="#">downtime calendar</IcLink> and try again
      later.
    </IcTypography>
  </div>
</ComponentPreview>

### Persistent banner

Use a persistent banner at the top of an app experiencing a system or data problem. If multiple problems exist, group them into one banner.

Link to available support pages and provide resolution information (if available) to provide assurance and transparency to your users.

Be careful to keep persistent banners visually distinct when used alongside classification banners.

### Email

Use an email to notify users of a system being down, including for scheduled maintenance.

### Tone of voice

Write your error message with short, jargon-free language to inform your users and consider that errors can increase anxiety for people. An error shouldn't blame the user.

Use words that describe the cause of the error and, where possible, give the user a way to resolve it.

## Accessibility considerations

When building or using this pattern:

- Make sure components for app errors are announced to screen readers and other assistive technology.
- Don't use colour on its own to convey the app error. Always include text or iconography.
- Consider that errors can increase anxiety for people. An error shouldn't blame the user.

---

# Patterns

URL: https://design.sis.gov.uk/patterns
Subtitle: This section introduces our common design patterns.


## Introduction

Patterns are best practice designs or implementations for common user needs.

They support consistent interactions across a wide range of apps. They make it easier for people to switch between app contexts, identify common tasks, and still know how to use your app.

Patterns often use multiple [components](/components) and are always based on the [style tokens](/styles). All patterns have been tested to meet or exceed [accessibility requirements](/accessibility/requirement).

## Contribute

We are expanding the Design System and UI Kit. You can check out the [roadmap](/community/roadmap) for what's coming. If you can help you can [read more on how to contribute](/community).

---

# Form validation

URL: https://design.sis.gov.uk/patterns/form-validation
Subtitle: Form validation checks that the information provided is correct and helps the user to fix any problems.


import { IcTextField, IcAlert } from "@ukic/react";
import ErrorSummaryEx from "./components/ErrorSummaryEx";

<IcAlert
  heading="Pattern in development"
  message="We are refreshing this pattern to include new guidance and code."
  variant="info"
/>

## When to use

Use form validation for all forms where information is required or is required in a particular format.

Always show an error summary at the top of the form along with a message under invalid fields.

## Usage

In some cases, you can present success validation on text fields. For example, if choosing a username.

Don't display text field errors as the user is typing. Wait until typing is finished or the form is submitted.

### Error summary

Use a multiline error alert to display a summary list of the validation issues.

<ComponentPreview noPadding>
  <ErrorSummaryEx />
</ComponentPreview>

Put the alert at the top of the form. Set focus on the error summary when form validation has failed.

Each issue in the list should link to the related input field. Set focus to the field when the summary list item is clicked.

### Text fields

Display an error message under each invalid text field. Don't hide any 'helper text' when showing an error message.

<ComponentPreview icds>
  <IcTextField
    label="What's your favourite type of coffee?"
    required
    helperText="Such as Arabica, Robusta or Liberica."
    validationStatus="error"
    validationText="Please provide your subscription number."
  />
</ComponentPreview>

## Accessibility considerations

When building or using this pattern:

- Set the focus of the keyboard and scroll to the error summary when it appears. Make sure the error summary is announced by a screen reader.
- Consider that errors can increase anxiety for people. An error shouldn't blame the user.
- Add ‘Error: ’ to the beginning of the page `<title>` to inform assistive technology users as soon as possible.

---

# Success messages

URL: https://design.sis.gov.uk/patterns/success
Subtitle: Success messages inform the user of a successful outcome.


import { IcAlert, IcButton, IcTextField } from "@ukic/react";

export const SnackbarBasic = () => {
  const title = "Your coffee order is being processed.";
  const [open, setOpen] = React.useState(false);
  const toggle = () => setOpen(!open);
  return (
    <div>
      <IcButton variant="primary" onClick={toggle}>
        Submit coffee order
      </IcButton>{" "}
      {open && (
        <Snackbar
          anchorOrigin={{ horizontal: "left", vertical: "bottom" }}
          message={title}
          open={open}
        />
      )}
    </div>
  );
};

<IcAlert
  heading="Pattern in development"
  message="We are refreshing this pattern to include new guidance and code."
  variant="info"
/>

## When to use

Use a success message when you want to inform the user that a task has been successful.

For example, show a [success alert](/components/alert) on a subsequent page after submitting a form.

## When not to use

Don't overuse success messages. Don't add success validation to every text field.

Don't use full-page success messages. If a form is submitted successfully, consider a success alert component on the subsequent screen.

## Usage

### Toasts

Use a [toast](/components/toast) to deliver a passive success message. Use a snackbar when you don't need to guarantee a user will notice the message.

### Alerts

Use alerts to give feedback after a significant task. Alerts are more likely to be noticed by users.

For example, use a success alert on a subsequent page after submitting a request to give the user a reference number.

<ComponentPreview icds>
  <IcAlert
    heading="Application submitted"
    message="Your application for 'additional coffee allowance' was submitted successfully."
    variant="success"
  />
</ComponentPreview>

### Summary and 'review' pages

Only use a summary page after submitting a form if you need the user to export the information.

Don't use a full page for a success message; use a snackbar or alert on a list or homepage instead.

### Text fields

Use success messages on [text inputs](/components/text-field) if you need to validate information before submitting the form.

Use them in situations where you need immediate feedback, such as choosing a username.

<ComponentPreview icds>
  <IcTextField
    label="Username"
    value="coffeeninja005"
    validationStatus="success"
    validationText="This username is available."
  />
</ComponentPreview>

## Accessibility considerations

When building or using this pattern:

- Make sure components such as alerts are announced to screen readers and other assistive technology.
- Don't use colour on its own to convey that a problem has occurred; always include text.

---

# Elevation

URL: https://design.sis.gov.uk/styles/elevation


import elevationFig1 from "./images/fig-1-an-example-of-an-application-showing-the-different-layers-of-interaction.png";

## Interaction layers

Adding elevation with shadow helps to provide hierarchy to components.

An app can be considered to be a set of different interaction layers that hold different types of components that exhibit similar behaviour. Components on each of these layers cast differing levels of shadow to provide the appearance of different heights from the page.

There are three layers:

1. The base layer contains most of the page content and scrolls within the viewport. Its contents are on the bottom layer of an app so cast little or no shadow.
2. The overlay layer contains components that overlay the base layer. These overlaid components may stick to the viewport when scrolled and cast a small shadow.
3. The modal layer sits above all other content and contains components that are important to display to the user and interrupt their current task. Components on this layer cast a large shadow.

<DoDontCaution
  imageSrc={elevationFig1}
  imageAlt="A graphic of an application showing the different layers of interaction on the lef-hand side and a depth chart on the right. The chart is used to show the hierarchy of the interactions. Explained in the previous text."
  state="none"
  caption="An example of an application showing the different layers of interaction. This includes the base layer with some raised content, the overlay layer and the modal layer."
/>

Tokens are provided for the z-index values of components which sit above the base layer as well as the base z-index itself:

| <span class="css-token-header">**Token**</span>                   | **Component**                                                                                                            | **Calculated z-index** |
| 
---

# Focus indicator

URL: https://design.sis.gov.uk/styles/focus-indicator


import focusIndicatorFig1 from "./images/fig-1-focus-indicators-inherit-the-border-radius-of-the-components-they-enclose.png";
import focusIndicatorFig2 from "./images/fig-2-focus-on-links-is-indicated-by-an-underline.png";

## Enclosing components

The focus indicator shows users where they are on a page. It encloses most components and inherits their shapes. They are especially useful for keyboard-only and power users.

When applied to squared components, for example [buttons](/components/button), [text field](/components/text-field) and [checkboxes](/components/checkbox), the focus indicator will fully enclose the component and therefore appear squared.

When applied to rounded components, for example [radio](/components/radio), [switch](/components/switch) and [back to top](/components/back-to-top), the focus indicator will appear rounded.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={focusIndicatorFig1}
    imageAlt="An image of a button and back to top component, both with focus applied to them."
    state="none"
    caption="Focus indicators inherit the border radius of the components they enclose."
  />
</DoubleDoDontCaution>

## Links

When links are focused, the indicator will appear as the hover state.

<DoubleDoDontCaution>
  <DoDontCaution
    imageSrc={focusIndicatorFig2}
    imageAlt="An image of a blue link labelled 'Coffee blog' with a thick underline of the same colour."
    state="none"
    caption="Focus on links is indicated by a thick underline."
  />
</DoubleDoDontCaution>

## Positioning and layout

### Adjacent to components

For most components, the focus indicator will enclose the full component, appearing directly adjacent to its borders.

### Internal to components

Focus indicators are required to be fully visible. For components that are adjacent to other components, or the viewport edge, the focus indicator appears internal to the component to remain visible.

Enough padding is provided within these components so that no content is obscured. Make sure to always confirm that no part of the focus indicator or the component's content is clipped or obscured.

## Navigation

Keyboard navigation controls vary between components. For specific information, refer to the 'Accessibility' tab in a component's page.

## Accessibility considerations

<p>
  We've designed this style token to meet the emerging{" "}
  <ic-link
    target="_blank"
    href="https://www.w3.org/TR/WCAG22/"
    rel="noreferer noopener nofollow"
  >
    Web Content Accessibility Guidelines (WCAG) 2.2 Candidate Recommendation
  </ic-link>{" "}
  criteria for Level AA (and in some cases AAA) requirements.
</p>

Given the requirements are still a draft and may be subject to change, we will track these criteria to make sure this style token remains conformant.

---

# Icons

URL: https://design.sis.gov.uk/styles/icons


import IconFinder from "./components/IconFinder";

## What icons we use

<p>
  The Design System uses a reduced number of the{" "}
  <ic-link
    target="_blank"
    href="https://materialdesignicons.com/"
    rel="noreferer noopener nofollow"
  >
    Material Design Icons
  </ic-link>{" "}
  library. You can use other Material Design Icons if you need to, but keep the
  common icons consistent.
</p>

We use the extended open source icon set because our apps often need to use uncommon icons.

<IconFinder />

## Usage

### Use sparingly

Don't rely on icons when your layout becomes complex as this can make it harder to understand.

Consider alternatives such as dropdowns, merged buttons and splitting a layout across multiple pages.

## Accessibility considerations

Provide a text label when you use icons. Even if the text isn't visible on the screen, assistive technology needs to describe the icon.

Use tooltips on icons or icon buttons so that the meaning of an icon is obvious.

## Slotted SVGs

Adding the `slot` attribute to SVGs within a Typescript file produces an error due to slot not being a SVG prop. `<SlottedSVG>` removes this error and can be used with [native SVGs](/get-started/install-components/react/#working-with-slotted-svgs) or [Material Design Icons (MDI)](/get-started/install-components/react/#using-material-design-icons-mdi-with-slottedsvg).

- [Side navigation component](/components/side-navigation/code/#with-material-design-icons-in-slottedsvg) using Material Design Icons with SlottedSVG

---

# Layout and spacing

URL: https://design.sis.gov.uk/styles/layout-spacing
Subtitle: Common layout and spacing create consistency across pages and enable the rapid creation of new pages.


import layoutSpacingFig1 from "./images/fig-1-components-laid-out-on-8px-grid.png";
import layoutSpacingFig2 from "./images/fig-2-vertical-rhythm-example.png";
import layoutSpacingFig3 from "./images/fig-3-margins-columns-gutters.png";
import layoutSpacingFig4 from "./images/fig-4-max-width.png";
import layoutSpacingFig5 from "./images/fig-5-content-on-grid.png";
import layoutSpacingFig6 from "./images/fig-6-containers.png";
import layoutSpacingFig7 from "./images/fig-7-fixed-grid.png";
import layoutSpacingFig8 from "./images/fig-8-influencers.png";

## Using consistent layouts

The eight-pixel, fluid column grid provides the basis for every page. It enables consistent positioning and sizing of all UI components to build structure into the designs, and speeds up the creation of new pages and components.

Columns enable pages to be defined responsively, so that they look great on any device or screen size. Every component can be positioned across a number of columns and spacing between components is maintained through the use of gutters.

Using the eight-pixel square provides visual rhythm throughout the UI components as it allows internal elements to be consistently placed, and creates a continuous vertical flow using spacing tokens.

## The eight-pixel square

Every component is created upon a grid comprising of eight-pixel squares. Each internal element uses position, sizing and padding values in multiples of eight pixels so that they align to this grid. Some smaller or more compact elements can use fractions of the eight-pixel square to achieve sizes such as four or two pixels.

<DoDontCaution
  imageSrc={layoutSpacingFig1}
  imageAlt="Two short forms each with a select box, text area and secondary button. All components and their internal elements align to a visible eight-pixel grid."
  state="none"
  caption="Components are based upon an eight-pixel grid to help drive visual consistency between them."
/>

Spacing tokens are used within the components to make sure they are consistent and to allow the quick update of spacing within the system by changing the token values. The spacing tokens are all multiples of the base eight-pixel grid square.

| **Spacing token** | **Value** |
| 
---

# Motion

URL: https://design.sis.gov.uk/styles/motion


import motionVid1 from "./images/slide-animation-between-steps.mp4";
import motionVid2 from "./images/expand-animation-on-cards.mp4";
import motionVid3 from "./images/entry-and-exit.mp4";
import motionVid4 from "./images/button-state-transitions.mp4";

## Using motion

Motion is achieved by applying animations or transitions to interface elements.

Motion can make your app feel more responsive. It can be especially useful for providing subtle feedback and affordance about functionality, as well as when loading data.

However, use animation subtly and sparingly. Many people can experience side effects from excessive animation, such as headaches, eye strain and anxiety.

## When to use

Use motion to highlight relationships between interface elements to reinforce the flow of an app.

Small animations are valuable for providing feedback, such as showing that an action has been registered.

Transitions between component states or animating how components enter or exit the page help an application to feel more fluid.

However, most apps won't need animation or transitions other than the default ones from a component library.

If using custom motion in your app always provide a way to turn off animations.

## When not to use

Don't use motion or animation to add decorative or fun elements as these can be distracting and can cause people more severe side effects.

Don't use motion as the only way to provide feedback, only use it to enhance information that can be understood without the motion.

Don't create new animations where a standard one exists, such as a progress bar.

## Motion behaviour

### Transitions

When navigating between pages, or in multi-step processes and other complex layouts, animating the transition can make it more obvious what has changed.

<video
  width="100%"
  muted
  controls
  loop
  title="A slide and fade animation used to highlight navigation through a multi-stepped process."
>
  <source src={motionVid1} type="video/mp4" />
</video>

It can also help to hint towards where you've come from and where you might go based on your next navigation action.

<video
  width="50%"
  muted
  controls
  loop
  title="An expand animation helps to link the overlay to the component that it's related to. It also provides an indication to where the close button would take the user."
>
  <source src={motionVid2} type="video/mp4" />
</video>

#### Establish relationships

When elements are displayed, they enter and exit the screen. Animating entry and exit behaviours can help to establish relationships between elements.

Defining the order in which elements appear can help to afford hierarchy or importance. Grouping similar elements so that they animate in the same way can differentiate them from unrelated elements that animate differently.

Starting entrance animations from specific positions can create parent/child relationships between elements.

<video
  width="50%"
  muted
  controls
  loop
  title="Entry and exit transitions can establish relationships between content before a user even reads the content."
>
  <source src={motionVid3} type="video/mp4" />
</video>

### Feedback

Micro-interactions provide subtle feedback about a user interaction. Motion can be used as micro-interactions that immediately indicate that an action was recognised.

This type of motion should be quick so not to distract or delay the completion of a task, but instead aid the understanding of it.

When elements change state, animation can help to emphasize the transformation by grabbing the user's attention.

<video
  width="50%"
  muted
  controls
  loop
  title="Animating the transitions between component states emphasise the transition."
>
  <source src={motionVid4} type="video/mp4" />
</video>

### Loading placeholders

Motion can be used to indicate that something is loading. Loading indicators use motion to provide a sense of progress. Animated placeholders, such as the skeleton loading pattern, prevent layouts from moving as elements are loaded and create a smoother experience.

## Animation tokens

The UI Kit uses a set of animation tokens to consistently apply motion across its components. These tokens use a consistent set of values to achieve continuity across the site.

### Duration

These tokens define how quickly an animation takes place. The 'fast' duration is often used for animations between component states. The ‘slow' duration is most often used for content changes.

- Fast (100ms)
- Slow (300ms)

### Easing

Easing helps to make motion feel natural. Using the easing token consistently helps to achieve continuity throughout an app. Use the easing tokens `--ic-easing-transition-fast` or `--ic-easing-transition-slow`.

## Animation styles

These are the common animation styles that are used on component UI Kit.

### Fade in and out

Fade animations change the opacity of an element and are used for quick transition between states as well as in entry and exit transitions.

### Slide up, down, left and right

Slide animations change the position of an element and are often used for entry and exit transitions or navigation.

### Zoom in and out

Zoom animations change the size of an element and are often used for entry and exit transitions or micro-interactions.

### Expand and shrink

Expand and shrink animations change the shape of a component and are often used for entry and exit transitions.

## Accessibility considerations

Never use a full-page or parallax animation. Where possible, avoid decorative animation altogether.

Don't animate the scrolling of a page other than the default browser behaviour.

Some people indicate they prefer reduced motion through the prefers-reduced-motion browser setting. Your app must respect this setting.

---

# Templates

URL: https://design.sis.gov.uk/styles/templates
Subtitle: Follow these common layout templates to apply frequently used navigation patterns to your app designs.


import templatesFig1 from "./images/fig-1-side-navigation.png";
import templatesFig2 from "./images/fig-2-top-navigation.png";
import templatesFig3 from "./images/fig-3-side-nav-with-page-header.png";
import templatesFig4 from "./images/fig-4-hero.png";

## Using layout templates

Use different combinations of navigation components and page content to create different layouts.

Some combinations work better for particular use cases. Side navigation takes up less room on data-heavy apps, but top navigation offers simpler navigation for content-based apps. Use the following templates to quickly create new pages.

Side navigation is preferred for most apps as it provides more screen space for main content.

## Side navigation

Use the [side navigation](/components/side-navigation) layout for data-heavy apps. This template prioritises the main content area, giving it the full height and width of the viewport. The navigation items in the side navigation give access to your app’s main functions from every page.

<DoDontCaution
  imageSrc={templatesFig1}
  imageAlt="An example of an app with a side navigation and some example content laid out using a 12-column grid."
  state="none"
  caption="The side navigation template is useful for data-heavy apps."
/>

## Top navigation

[Top navigation](/components/top-navigation) works well for content-based apps, such as an intranet, blog or this Design System. The main navigation items can always be accessed at the top of the page. This layout often uses large margins to achieve a readable line-length for the page’s main content section.

<DoDontCaution
  imageSrc={templatesFig2}
  imageAlt="An example app titled ‘Java nice day’ that uses a top navigation and has some example content laid out on a 12-column grid."
  state="none"
  caption="The top navigation template is useful for content-based apps."
/>

## Secondary navigation

Use secondary navigation components within these templates to provide additional navigation within each main section of an app.

### Page header

A [page header](/components/page-header) can be added to any page in an app, giving it a title as well as offering secondary-navigation options through tabs or a stepper.

Use [tabs](/components/tabs) to provide access to related pages where the content is mutually exclusive from one another.

Use a [stepper](/components/stepper) to signpost a user through a linear series of steps to complete a process or view information in a particular order.

<DoDontCaution
  imageSrc={templatesFig3}
  imageAlt="Two examples of a side-navigation layout each with a page header. One uses a page header with tabs to provide secondary navigation. The other uses a page header with a stepper."
  state="none"
  caption="Two examples of a side-navigation layout each with a page header. One uses a page header with tabs to provide secondary navigation. The other uses a page header with a stepper."
/>

### Hero

A [hero](/components/hero) can be included on homepages to signpost key links or actions in an emphasised position. Don’t use hero banners on every page though.

<DoDontCaution
  imageSrc={templatesFig4}
  imageAlt="An example app using a top navigation layout with a hero banner that provides a key link titled ‘Get started’."
  state="none"
  caption="Use top navigation and hero on a homepage to introduce the app or provide direction to a key action (such as search or get started)."
/>

## Accessibility considerations

When using these layout templates use appropriate HTML regions such as `<main>` and `<nav>`.

## Related components

- [Top navigation](/components/top-navigation)
- [Side navigation](/components/side-navigation)
- [Page header](/components/page-header)
- [Hero](/components/hero)

---

# Typography

URL: https://design.sis.gov.uk/styles/typography


import TypographicScale from "./components/TypographicScale";

## Using consistent typography

Well-defined typography creates obvious hierarchy and helps to organise information.

<p>
  The Design System uses the{" "}
  <ic-link
    target="_blank"
    href="https://fonts.google.com/specimen/Open+Sans"
    rel="noreferer noopener nofollow"
  >
    Open Sans
  </ic-link>{" "}
  font for most text and{" "}
  <ic-link
    target="_blank"
    href="https://fonts.google.com/specimen/Nunito+Sans"
    rel="noreferer noopener nofollow"
  >
    Nunito Sans
  </ic-link>{" "}
  for large headings. These are flexible and readable fonts that work well
  across digital and print.
</p>

## Headings

Write all headings in sentence case.

Use the logical order of `h#` tags in code. For example, a `h3` heading needs to come after a `h2` heading but can be styled as any variant. It's important that [heading tags are used properly](/accessibility/coding/headings).

<TypographicScale variants="h1, h2, h3, h4" />

## Subtitles

Write all subtitles in sentence case.

Use subtitles for sub-section headings and table headings.

<TypographicScale variants="subtitle-large, subtitle-small" />

## Text

Write all body text in sentence case.

Use a minimum of 16pt for body text. 18pt should be used for apps with a lot of text (like intranets or reports).

<TypographicScale variants="body, caption, caption-uppercase" />

## Labels

<TypographicScale variants="label, label-uppercase" />

## Links

If your link is at the end of a sentence or paragraph, make sure that the linked text does not include the full stop.

<TypographicScale variants="link" />

---

# Testing with assistive technologies

URL: https://design.sis.gov.uk/accessibility/testing/assistive-tech-testing
Subtitle: Don't rely on users of assistive technology to do the testing for you.


## Introduction

Testing with assistive technologies can help to spot accessibility problems that weren't picked up in [automated](/accessibility/testing/automated-testing) and [manual](/accessibility/testing/manual-testing) testing. It's not always required to comply with the Policy but it’s a way to make a huge difference to people who use your apps and services.

A wide range of assistive technologies are used by people. These often include screen readers, screen magnifiers, colour overlays and alternative input hardware.

<p>
  GOV.UK provides more{" "}
  <ic-link
    target="_blank"
    href="https://www.gov.uk/government/publications/assistive-technology-definition-and-safe-use/assistive-technology-definition-and-safe-use"
    rel="noreferer noopener nofollow"
  >
    examples and a definition of an assistive technology
  </ic-link>
  .
</p>

As with any software release, users always find bugs, and some of those may be accessibility problems. However, by performing automated and manual accessibility testing, the severity of accessibility problems should reduce.

## Screen readers and magnifiers

People with [visual impairments](/accessibility/needs/visual) rely on different types of assistive technologies. Some people without visual impairments might also use these tools because they prefer them.

Those that are blind, with little to no sight, depend on a screen reader to render a web page 'in text'. Once as text, this can be changed into other formats such as speech and braille.

The majority of visually impaired users have some sight or low vision and may rely on magnifiers that enlarge the screen content.

Tools used by visually impaired users include:

<ul>
  <li>
    <ic-link
      target="_blank"
      href="https://www.freedomscientific.com/products/software/jaws/"
      rel="noreferer noopener nofollow"
    >
      JAWS
    </ic-link>{" "}
    is a licensed screen reader for Windows.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.zoomtext.com/"
      rel="noreferer noopener nofollow"
    >
      ZoomText
    </ic-link>{" "}
    is a licensed magnifier for Windows.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.freedomscientific.com/products/software/fusion/"
      rel="noreferer noopener nofollow"
    >
      Fusion
    </ic-link>{" "}
    where Jaws and ZoomText are packaged together.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://www.nvaccess.org/"
      rel="noreferer noopener nofollow"
    >
      NVDA
    </ic-link>{" "}
    is a free and open-source screen reader for Windows.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://yourdolphin.com/en-gb/products/individuals/supernova-magnifier-screen-reader"
      rel="noreferer noopener nofollow"
    >
      SuperNova
    </ic-link>{" "}
    is licensed and both a screen reader and magnifier for Windows.
  </li>
  <li>
    <ic-link
      target="_blank"
      href="https://help.apple.com/voiceover/mac/"
      rel="noreferer noopener nofollow"
    >
      VoiceOver
    </ic-link>{" "}
    is a screen reader built in into all Apple products.
  </li>
  <li>
    Windows includes{" "}
    <ic-link
      target="_blank"
      href="https://support.microsoft.com/en-gb/help/11542/windows-use-magnifier-to-make-things-easier-to-see"
      rel="noreferer noopener nofollow"
    >
      Windows Magnifier
    </ic-link>
    , a screen magnifier.
  </li>
  <li>
    MacOS includes{" "}
    <ic-link
      target="_blank"
      href="https://support.apple.com/en-gb/guide/mac-help/mh35715/mac"
      rel="noreferer noopener nofollow"
    >
      Apple Zoom
    </ic-link>
    , a screen magnifier.
  </li>
</ul>

The Design System recommends using NVDA and VoiceOver, depending on your platform, for screen reader testing.

When testing with a screen reader, check that you can interact with all features and understand the content without looking at the screen.

When testing with a magnifier, check that you can see and interact with all features easily without the need for excessive scrolling.

## Voice control

Voice control or speech recognition lets you navigate and control your computer with your voice alone.

Users include those with [dyslexia](/accessibility/needs/neurodiversity) who may have difficulty with spelling or are better at communicating verbally. Others may have [motor impairments](/accessibility/needs/motor) and may be unable to use a keyboard or mouse.

<p>
  <ic-link
    target="_blank"
    href="https://www.nuance.com/en-gb/dragon.html"
    rel="noreferer noopener nofollow"
  >
    Dragon
  </ic-link>{" "}
  is a licensed speech recognition software predominantly for Windows, as
  support for Mac has discontinued.
</p>

<p>
  Alternatives include{" "}
  <ic-link
    target="_blank"
    href="https://support.microsoft.com/en-us/help/4042244/windows-10-use-dictation"
    rel="noreferer noopener nofollow"
  >
    Windows Speech Recognition
  </ic-link>{" "}
  and{" "}
  <ic-link
    target="_blank"
    href="https://support.apple.com/en-in/guide/mac-help/mh40584/mac"
    rel="noreferer noopener nofollow"
  >
    Apple Dictation
  </ic-link>
  .
</p>

When testing with a voice control software, check that you can interact with all features.

## High contrast modes

High contrast modes allow users with low vision to customise the colours (and sometimes the font).

<p>
  Both Windows and Mac provide high contrast modes in{" "}
  <ic-link
    target="_blank"
    href="https://support.microsoft.com/en-gb/help/13862/windows-10-use-high-contrast-mode"
    rel="noreferer noopener nofollow"
  >
    Windows High Contrast Mode
  </ic-link>{" "}
  and{" "}
  <ic-link
    target="_blank"
    href="https://support.apple.com/en-in/guide/mac-help/unac089/mac"
    rel="noreferer noopener nofollow"
  >
    Apple Display Preferences
  </ic-link>
  .
</p>

There are also browser plugins to customise users' experiences and override styles in your apps and services.

Test your app with various colour and font combinations to ensure your app can still be used. This will ensure that your CSS is written in a way that can be overridden by the user.

## Available assistive technologies

Many of the assistive technologies used are licensed. The table below summarises some of the assistive technologies available for testing at no extra cost.

| Assistive Technology | Windows                                                                                                                                                              | Mac                                                                                                                  |
| 
---

# Testing for accessibility

URL: https://design.sis.gov.uk/accessibility/testing
Subtitle: This section introduces you to different types of accessibility testing.


## Introduction

Testing your code regularly during development can help to identify accessibility issues in both the design and implementation before you test it with users. Approach accessibility testing as you would standard functional testing.

There are well known [limitations of automated accessibility testing](/accessibility/testing/automated-testing-limitation). Automated testing alone only finds between 30&ndash;50% of accessibility problems, so you have to do manual testing too.

## What you need to do

Your accessibility testing must include:

- Using [automated browser testing](/accessibility/testing/automated-testing#browser-testing) regularly during development.
- Conducting your own [keyboard-only testing](/accessibility/testing/manual-testing#keyboard-only-testing) for all parts of the app.
- Conducting additional [manual testing](/accessibility/testing/manual-testing#full-manual-accessibility-testing) to account for limitations of automated accessibility testing.
- Producing your own [documentation](/accessibility/documenting) of full, partial and non-conformances to the relevant accessibility standard.

## Test as you develop

Test as frequent as you can (ideally on every ticket and pull request). To help reduce the amount of accessibility problems you find in testing, you should update your development workflows to:

- Use [linting](/accessibility/testing/automated-testing#linters) in any code to catch common problems introduced during development.
- Consider using [integration testing](/accessibility/testing/automated-testing#integration-and-unit-testing) and [end-to-end testing](/accessibility/testing/automated-testing#end-to-end-testing).
- [Test regularly with assistive technologies](/accessibility/testing/assistive-tech-testing), particularly the [NVDA screen reader](/accessibility/testing/assistive-tech-testing#testing-with-nvda).

## Testing with real people

<p>
  You should aim to{" "}
  <ic-link
    target="_blank"
    href="https://accessibility.blog.gov.uk/2018/03/20/why-accessibility-testing-with-real-users-is-so-important/"
    rel="noreferer noopener nofollow"
  >
    design and test with real people
  </ic-link>{" "}
  where possible. Reach out to your user community to get a diverse group of
  users involved in your usability testing.
</p>

This may relate to disability and impairments but also skills, experience, ways of working and technology literacy.

In general, [don't rely on any specific communities](/accessibility/introduction/discussing) for usability testing.

### Always do your own testing first

Complete all the accessibility testing you can before testing with users who have accessibility needs. This will let them focus on real usability issues instead of common accessibility issues.

---

# Template

URL: https://design.sis.gov.uk/template
Status: Agreed.


# Template

**This file should always be kept, alongside any submodules that contain the actual content you wish to display.**

The frontmatter in this file contains all optional fields used throughout this application. This prevents any errors arising due to a GraphQL query being unable to find any records containing the field it cares about.

## A hidden file

The file shouldn't appear in any search results, due to the _hidden_ field in the frontmatter, but should be available to view at /template.

---

